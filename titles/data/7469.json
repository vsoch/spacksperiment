{
    "url": "https://api.github.com/repos/spack/spack/issues/7469",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/7469/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/7469/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/7469/events",
    "html_url": "https://github.com/spack/spack/pull/7469",
    "id": 304575767,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTc0NTIxMjg2",
    "number": 7469,
    "title": "Intel prefixes",
    "user": {
        "login": "mgsternberg",
        "id": 31289496,
        "node_id": "MDQ6VXNlcjMxMjg5NDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/31289496?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mgsternberg",
        "html_url": "https://github.com/mgsternberg",
        "followers_url": "https://api.github.com/users/mgsternberg/followers",
        "following_url": "https://api.github.com/users/mgsternberg/following{/other_user}",
        "gists_url": "https://api.github.com/users/mgsternberg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mgsternberg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mgsternberg/subscriptions",
        "organizations_url": "https://api.github.com/users/mgsternberg/orgs",
        "repos_url": "https://api.github.com/users/mgsternberg/repos",
        "events_url": "https://api.github.com/users/mgsternberg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mgsternberg/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 446754070,
            "node_id": "MDU6TGFiZWw0NDY3NTQwNzA=",
            "url": "https://api.github.com/repos/spack/spack/labels/blas-lapack-scalapack",
            "name": "blas-lapack-scalapack",
            "color": "4477a8",
            "default": false,
            "description": null
        },
        {
            "id": 477156668,
            "node_id": "MDU6TGFiZWw0NzcxNTY2Njg=",
            "url": "https://api.github.com/repos/spack/spack/labels/intel",
            "name": "intel",
            "color": "127cc1",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 113,
    "created_at": "2018-03-12T23:24:10Z",
    "updated_at": "2018-08-30T04:10:27Z",
    "closed_at": "2018-08-30T04:09:35Z",
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "pull_request": {
        "url": "https://api.github.com/repos/spack/spack/pulls/7469",
        "html_url": "https://github.com/spack/spack/pull/7469",
        "diff_url": "https://github.com/spack/spack/pull/7469.diff",
        "patch_url": "https://github.com/spack/spack/pull/7469.patch"
    },
    "body": "I reworked `class IntelPackage` to overcome what was for me a _major barrier to entry_ in adopting Spack that showed up when attempting to integrate an existing Intel tool chain on my HPC system.\r\n\r\nThere was a serious conceptual conflict for `prefix` between versions of Intel packages that were installed under Spack and those brought in via `packages.yaml`. I am not the only one to have stumbled over this, see e.g. https://groups.google.com/d/msg/spack/x28qlmqPAys/Ewx6220uAgAJ\r\n\r\nThis is an initial attempt at tackling the problem, having targeted MKL and Intel-MPI as proof-of-concept.  I was able to build ABINIT and CP2K with those, the latter having a downright gluttonous list of dependencies.  Other Intel packages should be possible to integrate.\r\n\r\nThe major affected files so far are:\r\n\r\n- `.../build_systems/intel.py`\r\n- `.../intel-mkl/package.py`\r\n- `.../intel-mpi/package.py`\r\n- `.../intel-parallel-studio/package.py`\r\n\r\nA major goal was _elimination of duplicate code_. To this end, I pulled up `foo_libs()` and related methods into the `IntelPackage` class definition. The following methods should give a flavor of my approach:\r\n\r\n```\r\ndef product_dir(self, product_dir_name, version_glob='_2???.*.*[0-9]',\r\n                postfix_dir=''):\r\n    '''Returns the version-specific directory of an Intel product release,\r\n    holding the main product and possibly auxiliary files from other\r\n    products.\r\n    '''\r\n\u2026\r\ndef component_dir(self, component=None):\r\n    '''Returns the directory of a product component, appropriate for\r\n    presenting to users in environment variables like MKLROOT and\r\n    I_MPI_ROOT, or the product dir itself (when the component not evident\r\n    from the package name and wasn't specified).\r\n    '''\r\n\u2026\r\ndef component_bin_dir(self, component=None, relative=False):\r\n\u2026\r\ndef component_lib_dir(self, component=None, relative=False):\r\n```\r\n\r\nThe reorganization dramatically shortens `.../intel-mkl/package.py`, and allows to write, e.g.\r\n```\r\ndef file_to_source(self):\r\n    return join_path(self.component_bin_dir(), 'mklvars.sh')\r\n```\r\n\r\n\r\nOther changes are minor and showed up/were prompted by testing:\r\n\r\n- `lib/spack/spack/environment.py`\r\n- `var/spack/repos/builtin/packages/libxc/package.py`\r\n\r\n\r\nComments and suggestions on my approach are needed and welcome.",
    "performed_via_github_app": null
}