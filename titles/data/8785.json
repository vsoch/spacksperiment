{
    "url": "https://api.github.com/repos/spack/spack/issues/8785",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/8785/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/8785/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/8785/events",
    "html_url": "https://github.com/spack/spack/issues/8785",
    "id": 343593941,
    "node_id": "MDU6SXNzdWUzNDM1OTM5NDE=",
    "number": 8785,
    "title": "Ideas for deeper Git/CMake integration",
    "user": {
        "login": "HadrienG2",
        "id": 1305080,
        "node_id": "MDQ6VXNlcjEzMDUwODA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1305080?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/HadrienG2",
        "html_url": "https://github.com/HadrienG2",
        "followers_url": "https://api.github.com/users/HadrienG2/followers",
        "following_url": "https://api.github.com/users/HadrienG2/following{/other_user}",
        "gists_url": "https://api.github.com/users/HadrienG2/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/HadrienG2/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/HadrienG2/subscriptions",
        "organizations_url": "https://api.github.com/users/HadrienG2/orgs",
        "repos_url": "https://api.github.com/users/HadrienG2/repos",
        "events_url": "https://api.github.com/users/HadrienG2/events{/privacy}",
        "received_events_url": "https://api.github.com/users/HadrienG2/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 508566016,
            "node_id": "MDU6TGFiZWw1MDg1NjYwMTY=",
            "url": "https://api.github.com/repos/spack/spack/labels/cmake",
            "name": "cmake",
            "color": "c2e0c6",
            "default": false,
            "description": null
        },
        {
            "id": 73908756,
            "node_id": "MDU6TGFiZWw3MzkwODc1Ng==",
            "url": "https://api.github.com/repos/spack/spack/labels/feature",
            "name": "feature",
            "color": "84b6eb",
            "default": false,
            "description": null
        },
        {
            "id": 584430629,
            "node_id": "MDU6TGFiZWw1ODQ0MzA2Mjk=",
            "url": "https://api.github.com/repos/spack/spack/labels/git",
            "name": "git",
            "color": "bfdadc",
            "default": false,
            "description": null
        },
        {
            "id": 466955297,
            "node_id": "MDU6TGFiZWw0NjY5NTUyOTc=",
            "url": "https://api.github.com/repos/spack/spack/labels/proposal",
            "name": "proposal",
            "color": "0e8a16",
            "default": false,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 14,
    "created_at": "2018-07-23T11:29:32Z",
    "updated_at": "2018-08-29T22:20:03Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Most recent C++ software is developed using some kind of Git forge (typically GitHub or a self-hosted service), and uses CMake as its low-level build system. Within their git repository, software releases are typically tracked using one of a few different tagging conventions, e.g. \"v1.2.3\".\r\n\r\nThis de facto standardization could in principle be leveraged by Spack in order to ease the job of packagers, in the following way: when a packager types in something like `spack create https://gitlab.cern.ch/acts/acts-core.git`, Spack could...\r\n\r\n1. Auto-detect that the URL refers to a git repository (these typically end with \".git\")\r\n2. Make a local clone of said repository.\r\n3. Enumerate the list of tags.\r\n4. Filter those which use a typical release tagging convention (e.g. \"X.Y.Z\" or \"vX.Y.Z\")\r\n5. Automatically generate `version(<version number>, commit=<hash>)` entries from release tags, plus one entry for the master branch.\r\n6. Figure out that the package uses CMake (e.g. by detecting a CMakeLists file in the master branch)\r\n7. Use CMake to infer project dependencies and configuration options (prior art: #3626).\r\n8. Provide the packager in the end with a package.py that has...\r\n    * The right name (no \".git\" or \"-git\" remaining from the URL)\r\n    * The right template (CMakePackage)\r\n    * A pre-filled list of versions from the filtered git tags\r\n    * A pre-filled list of dependencies from CMake FindPackages\r\n    * A pre-filled list of variants from CMake's options.\r\n    * A couple of FIXMEs for things which cannot be autogenerated.\r\n\r\nIn this way, a packager would only need to...\r\n\r\n- Review the job of the automatic algorithm\r\n- Fill in human-oriented metadata e.g. package description.\r\n- Add dependencies which have not been properly declared in the CMakeLists\r\n- Give variants a nicer name/description which follows Spack conventions, and remove those which are not deemed interesting enough.\r\n- Account for package-specific build idiosyncraties which are only documented in human language\r\n- Build and test the various package versions\r\n\r\nA possible future extension of this design would be to add something like a `spack update acts-core` command, which would automatically re-analyse the project's git repository and adds new tags as new software releases come in.\r\n\r\nWhat do you think about this general direction? I personally think that reaching this level of automation would be desirable, because it would reduce the amount of mechanical and repetitive work which humans are notoriously bad at, and increase the amount of time available for working on the hard packaging problems which only humans can do (e.g. figuring out missing dependencies). On the other hand, one negative side is that this adds more automagic to Spack, which will cost some development time to maintain and reduce in weirder failures when it gets something wrong.",
    "performed_via_github_app": null
}