{
    "url": "https://api.github.com/repos/spack/spack/issues/12923",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/12923/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/12923/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/12923/events",
    "html_url": "https://github.com/spack/spack/issues/12923",
    "id": 497629301,
    "node_id": "MDU6SXNzdWU0OTc2MjkzMDE=",
    "number": 12923,
    "title": "Relocation unit test failing on local development box",
    "user": {
        "login": "alalazo",
        "id": 4199709,
        "node_id": "MDQ6VXNlcjQxOTk3MDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4199709?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/alalazo",
        "html_url": "https://github.com/alalazo",
        "followers_url": "https://api.github.com/users/alalazo/followers",
        "following_url": "https://api.github.com/users/alalazo/following{/other_user}",
        "gists_url": "https://api.github.com/users/alalazo/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/alalazo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/alalazo/subscriptions",
        "organizations_url": "https://api.github.com/users/alalazo/orgs",
        "repos_url": "https://api.github.com/users/alalazo/repos",
        "events_url": "https://api.github.com/users/alalazo/events{/privacy}",
        "received_events_url": "https://api.github.com/users/alalazo/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 880675484,
            "node_id": "MDU6TGFiZWw4ODA2NzU0ODQ=",
            "url": "https://api.github.com/repos/spack/spack/labels/binary-packages",
            "name": "binary-packages",
            "color": "fc5fb3",
            "default": false,
            "description": ""
        },
        {
            "id": 73908754,
            "node_id": "MDU6TGFiZWw3MzkwODc1NA==",
            "url": "https://api.github.com/repos/spack/spack/labels/bug",
            "name": "bug",
            "color": "fc2929",
            "default": true,
            "description": null
        },
        {
            "id": 759411369,
            "node_id": "MDU6TGFiZWw3NTk0MTEzNjk=",
            "url": "https://api.github.com/repos/spack/spack/labels/buildcache",
            "name": "buildcache",
            "color": "bf354c",
            "default": false,
            "description": null
        },
        {
            "id": 446779717,
            "node_id": "MDU6TGFiZWw0NDY3Nzk3MTc=",
            "url": "https://api.github.com/repos/spack/spack/labels/rpath",
            "name": "rpath",
            "color": "bfdadc",
            "default": false,
            "description": null
        },
        {
            "id": 456341797,
            "node_id": "MDU6TGFiZWw0NTYzNDE3OTc=",
            "url": "https://api.github.com/repos/spack/spack/labels/tests",
            "name": "tests",
            "color": "b60205",
            "default": false,
            "description": "General test capability(ies)"
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": {
        "login": "gartung",
        "id": 4292184,
        "node_id": "MDQ6VXNlcjQyOTIxODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4292184?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gartung",
        "html_url": "https://github.com/gartung",
        "followers_url": "https://api.github.com/users/gartung/followers",
        "following_url": "https://api.github.com/users/gartung/following{/other_user}",
        "gists_url": "https://api.github.com/users/gartung/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gartung/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gartung/subscriptions",
        "organizations_url": "https://api.github.com/users/gartung/orgs",
        "repos_url": "https://api.github.com/users/gartung/repos",
        "events_url": "https://api.github.com/users/gartung/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gartung/received_events",
        "type": "User",
        "site_admin": false
    },
    "assignees": [
        {
            "login": "gartung",
            "id": 4292184,
            "node_id": "MDQ6VXNlcjQyOTIxODQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4292184?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gartung",
            "html_url": "https://github.com/gartung",
            "followers_url": "https://api.github.com/users/gartung/followers",
            "following_url": "https://api.github.com/users/gartung/following{/other_user}",
            "gists_url": "https://api.github.com/users/gartung/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gartung/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gartung/subscriptions",
            "organizations_url": "https://api.github.com/users/gartung/orgs",
            "repos_url": "https://api.github.com/users/gartung/repos",
            "events_url": "https://api.github.com/users/gartung/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gartung/received_events",
            "type": "User",
            "site_admin": false
        }
    ],
    "milestone": null,
    "comments": 12,
    "created_at": "2019-09-24T11:31:49Z",
    "updated_at": "2019-09-24T13:40:10Z",
    "closed_at": "2019-09-24T13:40:10Z",
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "Updating to the latest version of `develop` I got relocation unit tests failing on my development machine.\r\n\r\n\r\n### Steps to reproduce the issue\r\nRun the following command:\r\n```console\r\n$ spack test -k relocate\r\n```\r\n\r\n### Error message\r\n<details>\r\n\r\n<summary>Click to expand the error message</summary>\r\n\r\n```console\r\n============================================================== test session starts ===============================================================\r\nplatform linux2 -- Python 2.7.15+, pytest-3.2.5, py-1.4.34, pluggy-0.4.0\r\nrootdir: /home/culpo/PycharmProjects/spack/lib/spack/spack/test, inifile: pytest.ini\r\ncollected 1806 items                                                                                                                              \r\n\r\npackaging.py ..s\r\nrelocate.py FF.\r\n============================================================ short test summary info =============================================================\r\nFAIL relocate.py::test_file_is_relocatable[True]\r\nFAIL relocate.py::test_file_is_relocatable[False]\r\nSKIP [1] packaging.py:362: only works with Mach-o objects\r\n\r\n=========================================================== slowest 20 test durations ============================================================\r\n0.07s call     relocate.py::test_file_is_relocatable[True]\r\n0.07s call     relocate.py::test_file_is_relocatable[False]\r\n0.01s setup    relocate.py::test_file_is_relocatable[False]\r\n0.01s call     packaging.py::test_relocate_text\r\n0.00s teardown packaging.py::test_relocate_text\r\n0.00s setup    packaging.py::test_relocate_text\r\n0.00s setup    packaging.py::test_relocate_links\r\n0.00s setup    relocate.py::test_file_is_relocatable[True]\r\n0.00s setup    relocate.py::test_file_is_relocatable_errors\r\n0.00s teardown relocate.py::test_file_is_relocatable[False]\r\n0.00s teardown relocate.py::test_file_is_relocatable[True]\r\n0.00s teardown packaging.py::test_relocate_links\r\n0.00s teardown relocate.py::test_file_is_relocatable_errors\r\n0.00s call     relocate.py::test_file_is_relocatable_errors\r\n0.00s teardown packaging.py::test_relocate_macho\r\n0.00s call     packaging.py::test_relocate_links\r\n0.00s setup    packaging.py::test_relocate_macho\r\n==================================================================== FAILURES ====================================================================\r\n_________________________________________________________ test_file_is_relocatable[True] _________________________________________________________\r\n\r\nsource_file = local('/tmp/pytest-of-culpo/pytest-43/test_file_is_relocatable_True_0/relocatable.c'), is_relocatable = True\r\n\r\n    @pytest.mark.requires_executables(\r\n        '/usr/bin/gcc', 'patchelf', 'strings', 'file'\r\n    )\r\n    def test_file_is_relocatable(source_file, is_relocatable):\r\n        compiler = spack.util.executable.Executable('/usr/bin/gcc')\r\n        executable = str(source_file).replace('.c', '.x')\r\n        compiler_env = {\r\n            'PATH': '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\r\n        }\r\n        compiler(str(source_file), '-o', executable, env=compiler_env)\r\n    \r\n        assert spack.relocate.is_binary(executable)\r\n>       assert spack.relocate.file_is_relocatable(executable) is is_relocatable\r\n\r\nrelocate.py:60: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n../relocate.py:678: in file_is_relocatable\r\n    rpaths = patchelf('--print-rpath', file, output=str).strip()\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <exe: ['None']>, args = ('--print-rpath', '/tmp/pytest-of-culpo/pytest-43/test_file_is_relocatable_True_0/relocatable.x'), kwargs = {}\r\nenv_arg = None\r\nenv = {'BASH_FUNC_spack%%': '() {  if [ -n \"${ZSH_VERSION:-}\" ]; then\\n emulate -L sh;\\n fi;\\n _sp_flags=\"\";\\n while [ ! -z ... 'CLUTTER_IM_MODULE': 'xim', 'COLORTERM': 'truecolor', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', ...}\r\nfail_on_error = True, ignore_errors = (), input = None, output = <type 'str'>, error = None, streamify = <function streamify at 0x7fd09ec49758>\r\nostream = -1, close_ostream = False\r\n\r\n    def __call__(self, *args, **kwargs):\r\n        \"\"\"Run this executable in a subprocess.\r\n    \r\n            Parameters:\r\n                *args (str): Command-line arguments to the executable to run\r\n    \r\n            Keyword Arguments:\r\n                _dump_env (dict): Dict to be set to the environment actually\r\n                    used (envisaged for testing purposes only)\r\n                env (dict): The environment to run the executable with\r\n                extra_env (dict): Extra items to add to the environment\r\n                    (neither requires nor precludes env)\r\n                fail_on_error (bool): Raise an exception if the subprocess returns\r\n                    an error. Default is True. The return code is available as\r\n                    ``exe.returncode``\r\n                ignore_errors (int or list): A list of error codes to ignore.\r\n                    If these codes are returned, this process will not raise\r\n                    an exception even if ``fail_on_error`` is set to ``True``\r\n                input: Where to read stdin from\r\n                output: Where to send stdout\r\n                error: Where to send stderr\r\n    \r\n            Accepted values for input, output, and error:\r\n    \r\n            * python streams, e.g. open Python file objects, or ``os.devnull``\r\n            * filenames, which will be automatically opened for writing\r\n            * ``str``, as in the Python string type. If you set these to ``str``,\r\n              output and error will be written to pipes and returned as a string.\r\n              If both ``output`` and ``error`` are set to ``str``, then one string\r\n              is returned containing output concatenated with error. Not valid\r\n              for ``input``\r\n    \r\n            By default, the subprocess inherits the parent's file descriptors.\r\n    \r\n            \"\"\"\r\n        # Environment\r\n        env_arg = kwargs.get('env', None)\r\n        if env_arg is None:\r\n            env = os.environ.copy()\r\n            env.update(self.default_env)\r\n        else:\r\n            env = self.default_env.copy()\r\n            env.update(env_arg)\r\n        env.update(kwargs.get('extra_env', {}))\r\n        if '_dump_env' in kwargs:\r\n            kwargs['_dump_env'].clear()\r\n            kwargs['_dump_env'].update(env)\r\n    \r\n        fail_on_error = kwargs.pop('fail_on_error', True)\r\n        ignore_errors = kwargs.pop('ignore_errors', ())\r\n    \r\n        # If they just want to ignore one error code, make it a tuple.\r\n        if isinstance(ignore_errors, int):\r\n            ignore_errors = (ignore_errors, )\r\n    \r\n        input  = kwargs.pop('input',  None)\r\n        output = kwargs.pop('output', None)\r\n        error  = kwargs.pop('error',  None)\r\n    \r\n        if input is str:\r\n            raise ValueError('Cannot use `str` as input stream.')\r\n    \r\n        def streamify(arg, mode):\r\n            if isinstance(arg, string_types):\r\n                return open(arg, mode), True\r\n            elif arg is str:\r\n                return subprocess.PIPE, False\r\n            else:\r\n                return arg, False\r\n    \r\n        ostream, close_ostream = streamify(output, 'w')\r\n        estream, close_estream = streamify(error,  'w')\r\n        istream, close_istream = streamify(input,  'r')\r\n    \r\n        quoted_args = [arg for arg in args if re.search(r'^\"|^\\'|\"$|\\'$', arg)]\r\n        if quoted_args:\r\n            tty.warn(\r\n                \"Quotes in command arguments can confuse scripts like\"\r\n                \" configure.\",\r\n                \"The following arguments may cause problems when executed:\",\r\n                str(\"\\n\".join([\"    \" + arg for arg in quoted_args])),\r\n                \"Quotes aren't needed because spack doesn't use a shell.\",\r\n                \"Consider removing them\")\r\n    \r\n        cmd = self.exe + list(args)\r\n    \r\n        cmd_line = \"'%s'\" % \"' '\".join(\r\n            map(lambda arg: arg.replace(\"'\", \"'\\\"'\\\"'\"), cmd))\r\n    \r\n        tty.debug(cmd_line)\r\n    \r\n        try:\r\n            proc = subprocess.Popen(\r\n                cmd,\r\n                stdin=istream,\r\n                stderr=estream,\r\n                stdout=ostream,\r\n                env=env)\r\n            out, err = proc.communicate()\r\n    \r\n            result = None\r\n            if output is str or error is str:\r\n                result = ''\r\n                if output is str:\r\n                    result += text_type(out.decode('utf-8'))\r\n                if error is str:\r\n                    result += text_type(err.decode('utf-8'))\r\n    \r\n            rc = self.returncode = proc.returncode\r\n            if fail_on_error and rc != 0 and (rc not in ignore_errors):\r\n                long_msg = cmd_line\r\n                if result:\r\n                    # If the output is not captured in the result, it will have\r\n                    # been stored either in the specified files (e.g. if\r\n                    # 'output' specifies a file) or written to the parent's\r\n                    # stdout/stderr (e.g. if 'output' is not specified)\r\n                    long_msg += '\\n' + result\r\n    \r\n                raise ProcessError('Command exited with status %d:' %\r\n                                   proc.returncode, long_msg)\r\n    \r\n            return result\r\n    \r\n        except OSError as e:\r\n            raise ProcessError(\r\n>               '%s: %s' % (self.exe[0], e.strerror), 'Command: ' + cmd_line)\r\nE           ProcessError: None: No such file or directory\r\nE               Command: 'None' '--print-rpath' '/tmp/pytest-of-culpo/pytest-43/test_file_is_relocatable_True_0/relocatable.x'\r\n\r\n../util/executable.py:195: ProcessError\r\n________________________________________________________ test_file_is_relocatable[False] _________________________________________________________\r\n\r\nsource_file = local('/tmp/pytest-of-culpo/pytest-43/test_file_is_relocatable_False0/non_relocatable.c'), is_relocatable = False\r\n\r\n    @pytest.mark.requires_executables(\r\n        '/usr/bin/gcc', 'patchelf', 'strings', 'file'\r\n    )\r\n    def test_file_is_relocatable(source_file, is_relocatable):\r\n        compiler = spack.util.executable.Executable('/usr/bin/gcc')\r\n        executable = str(source_file).replace('.c', '.x')\r\n        compiler_env = {\r\n            'PATH': '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\r\n        }\r\n        compiler(str(source_file), '-o', executable, env=compiler_env)\r\n    \r\n        assert spack.relocate.is_binary(executable)\r\n>       assert spack.relocate.file_is_relocatable(executable) is is_relocatable\r\n\r\nrelocate.py:60: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n../relocate.py:678: in file_is_relocatable\r\n    rpaths = patchelf('--print-rpath', file, output=str).strip()\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <exe: ['None']>, args = ('--print-rpath', '/tmp/pytest-of-culpo/pytest-43/test_file_is_relocatable_False0/non_relocatable.x'), kwargs = {}\r\nenv_arg = None\r\nenv = {'BASH_FUNC_spack%%': '() {  if [ -n \"${ZSH_VERSION:-}\" ]; then\\n emulate -L sh;\\n fi;\\n _sp_flags=\"\";\\n while [ ! -z ... 'CLUTTER_IM_MODULE': 'xim', 'COLORTERM': 'truecolor', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', ...}\r\nfail_on_error = True, ignore_errors = (), input = None, output = <type 'str'>, error = None, streamify = <function streamify at 0x7fd09ef7bcf8>\r\nostream = -1, close_ostream = False\r\n\r\n    def __call__(self, *args, **kwargs):\r\n        \"\"\"Run this executable in a subprocess.\r\n    \r\n            Parameters:\r\n                *args (str): Command-line arguments to the executable to run\r\n    \r\n            Keyword Arguments:\r\n                _dump_env (dict): Dict to be set to the environment actually\r\n                    used (envisaged for testing purposes only)\r\n                env (dict): The environment to run the executable with\r\n                extra_env (dict): Extra items to add to the environment\r\n                    (neither requires nor precludes env)\r\n                fail_on_error (bool): Raise an exception if the subprocess returns\r\n                    an error. Default is True. The return code is available as\r\n                    ``exe.returncode``\r\n                ignore_errors (int or list): A list of error codes to ignore.\r\n                    If these codes are returned, this process will not raise\r\n                    an exception even if ``fail_on_error`` is set to ``True``\r\n                input: Where to read stdin from\r\n                output: Where to send stdout\r\n                error: Where to send stderr\r\n    \r\n            Accepted values for input, output, and error:\r\n    \r\n            * python streams, e.g. open Python file objects, or ``os.devnull``\r\n            * filenames, which will be automatically opened for writing\r\n            * ``str``, as in the Python string type. If you set these to ``str``,\r\n              output and error will be written to pipes and returned as a string.\r\n              If both ``output`` and ``error`` are set to ``str``, then one string\r\n              is returned containing output concatenated with error. Not valid\r\n              for ``input``\r\n    \r\n            By default, the subprocess inherits the parent's file descriptors.\r\n    \r\n            \"\"\"\r\n        # Environment\r\n        env_arg = kwargs.get('env', None)\r\n        if env_arg is None:\r\n            env = os.environ.copy()\r\n            env.update(self.default_env)\r\n        else:\r\n            env = self.default_env.copy()\r\n            env.update(env_arg)\r\n        env.update(kwargs.get('extra_env', {}))\r\n        if '_dump_env' in kwargs:\r\n            kwargs['_dump_env'].clear()\r\n            kwargs['_dump_env'].update(env)\r\n    \r\n        fail_on_error = kwargs.pop('fail_on_error', True)\r\n        ignore_errors = kwargs.pop('ignore_errors', ())\r\n    \r\n        # If they just want to ignore one error code, make it a tuple.\r\n        if isinstance(ignore_errors, int):\r\n            ignore_errors = (ignore_errors, )\r\n    \r\n        input  = kwargs.pop('input',  None)\r\n        output = kwargs.pop('output', None)\r\n        error  = kwargs.pop('error',  None)\r\n    \r\n        if input is str:\r\n            raise ValueError('Cannot use `str` as input stream.')\r\n    \r\n        def streamify(arg, mode):\r\n            if isinstance(arg, string_types):\r\n                return open(arg, mode), True\r\n            elif arg is str:\r\n                return subprocess.PIPE, False\r\n            else:\r\n                return arg, False\r\n    \r\n        ostream, close_ostream = streamify(output, 'w')\r\n        estream, close_estream = streamify(error,  'w')\r\n        istream, close_istream = streamify(input,  'r')\r\n    \r\n        quoted_args = [arg for arg in args if re.search(r'^\"|^\\'|\"$|\\'$', arg)]\r\n        if quoted_args:\r\n            tty.warn(\r\n                \"Quotes in command arguments can confuse scripts like\"\r\n                \" configure.\",\r\n                \"The following arguments may cause problems when executed:\",\r\n                str(\"\\n\".join([\"    \" + arg for arg in quoted_args])),\r\n                \"Quotes aren't needed because spack doesn't use a shell.\",\r\n                \"Consider removing them\")\r\n    \r\n        cmd = self.exe + list(args)\r\n    \r\n        cmd_line = \"'%s'\" % \"' '\".join(\r\n            map(lambda arg: arg.replace(\"'\", \"'\\\"'\\\"'\"), cmd))\r\n    \r\n        tty.debug(cmd_line)\r\n    \r\n        try:\r\n            proc = subprocess.Popen(\r\n                cmd,\r\n                stdin=istream,\r\n                stderr=estream,\r\n                stdout=ostream,\r\n                env=env)\r\n            out, err = proc.communicate()\r\n    \r\n            result = None\r\n            if output is str or error is str:\r\n                result = ''\r\n                if output is str:\r\n                    result += text_type(out.decode('utf-8'))\r\n                if error is str:\r\n                    result += text_type(err.decode('utf-8'))\r\n    \r\n            rc = self.returncode = proc.returncode\r\n            if fail_on_error and rc != 0 and (rc not in ignore_errors):\r\n                long_msg = cmd_line\r\n                if result:\r\n                    # If the output is not captured in the result, it will have\r\n                    # been stored either in the specified files (e.g. if\r\n                    # 'output' specifies a file) or written to the parent's\r\n                    # stdout/stderr (e.g. if 'output' is not specified)\r\n                    long_msg += '\\n' + result\r\n    \r\n                raise ProcessError('Command exited with status %d:' %\r\n                                   proc.returncode, long_msg)\r\n    \r\n            return result\r\n    \r\n        except OSError as e:\r\n            raise ProcessError(\r\n>               '%s: %s' % (self.exe[0], e.strerror), 'Command: ' + cmd_line)\r\nE           ProcessError: None: No such file or directory\r\nE               Command: 'None' '--print-rpath' '/tmp/pytest-of-culpo/pytest-43/test_file_is_relocatable_False0/non_relocatable.x'\r\n\r\n../util/executable.py:195: ProcessError\r\n============================================================= 1800 tests deselected ==============================================================\r\n========================================= 2 failed, 3 passed, 1 skipped, 1800 deselected in 4.20 seconds =========================================\r\n```\r\n\r\n</details>\r\n\r\n### Information on your system\r\n\r\nEDIT: **I have `patchelf` installed on the system**. Running `git bisect` points to a940ff34d745e0830f9e40305698bfd85d65fbd3:\r\n```console\r\na940ff34d745e0830f9e40305698bfd85d65fbd3 is the first bad commit\r\ncommit a940ff34d745e0830f9e40305698bfd85d65fbd3\r\nAuthor: Patrick Gartung <gartung@fnal.gov>\r\nDate:   Thu Sep 19 17:16:26 2019 -0500\r\n\r\n    Put back the use of otool and install_name_tool when running on macOS. Only use machotools on linux. (#12867)\r\n    \r\n    Move verbose messages to debug level\r\n    \r\n    get_patchelf should return None for test platform as well because create_buildinfo invokes patchelf to get rpaths.\r\n\r\n:040000 040000 93e9e70d3d3747e508d2f124429bd925951ce755 dae8128bce5520a4e80ec9704dcb9ec249d38b34 M      lib\r\n``` \r\nIf it matters:\r\n```console\r\n$ uname -a\r\nLinux nuvolari 5.0.0-29-generic #31~18.04.1-Ubuntu SMP Thu Sep 12 18:29:21 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\r\n```",
    "performed_via_github_app": null
}