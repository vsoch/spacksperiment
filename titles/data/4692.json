{
    "url": "https://api.github.com/repos/spack/spack/issues/4692",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/4692/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/4692/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/4692/events",
    "html_url": "https://github.com/spack/spack/pull/4692",
    "id": 241107042,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTI5Mjk2NDY1",
    "number": 4692,
    "title": "cc: package search paths come before dependency paths",
    "user": {
        "login": "becker33",
        "id": 13971568,
        "node_id": "MDQ6VXNlcjEzOTcxNTY4",
        "avatar_url": "https://avatars.githubusercontent.com/u/13971568?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/becker33",
        "html_url": "https://github.com/becker33",
        "followers_url": "https://api.github.com/users/becker33/followers",
        "following_url": "https://api.github.com/users/becker33/following{/other_user}",
        "gists_url": "https://api.github.com/users/becker33/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/becker33/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/becker33/subscriptions",
        "organizations_url": "https://api.github.com/users/becker33/orgs",
        "repos_url": "https://api.github.com/users/becker33/repos",
        "events_url": "https://api.github.com/users/becker33/events{/privacy}",
        "received_events_url": "https://api.github.com/users/becker33/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 446645732,
            "node_id": "MDU6TGFiZWw0NDY2NDU3MzI=",
            "url": "https://api.github.com/repos/spack/spack/labels/build-environment",
            "name": "build-environment",
            "color": "bfdadc",
            "default": false,
            "description": null
        },
        {
            "id": 446615268,
            "node_id": "MDU6TGFiZWw0NDY2MTUyNjg=",
            "url": "https://api.github.com/repos/spack/spack/labels/compilers",
            "name": "compilers",
            "color": "f9d0c4",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2017-07-06T22:42:35Z",
    "updated_at": "2018-08-05T04:31:11Z",
    "closed_at": "2018-08-01T22:48:01Z",
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
        "url": "https://api.github.com/repos/spack/spack/pulls/4692",
        "html_url": "https://github.com/spack/spack/pull/4692",
        "diff_url": "https://github.com/spack/spack/pull/4692.diff",
        "patch_url": "https://github.com/spack/spack/pull/4692.patch"
    },
    "body": "We have been prepending Spack include paths, library paths, and rpaths since #248.  This causes problems when a header or library in the package has the same name as one exported by one of its dependencies.  The *dependency's* header will be preferred over the package's, which is not what most builds expect.  This also breaks some of our production codes.\r\n\r\nThis restores the pre-248 behavior of parsing compiler arguments out by type (`-L`, `-I`, `-Wl,-rpath`) and reconstituting the full command at the end.\r\n\r\n`<includes> <other_args> <library dirs> <rpaths>`\r\n\r\nThis differs from the original behavior in one significant way, though: it *appends* the library arguments so that dependency libraries do not shadow those in the build.  So this does not have the issue brought up in #195.\r\n\r\nThis is safe because semantics aren't affected by *interleaving* `-I`, `-L`, and `-Wl,-rpath` arguments with others, only with each other (so the order fo two `-L` args affects the search path, but we search for all libraries on the command line using the same search path).\r\n\r\nWe preserve the following:\r\n1. Any system directory in the paths will be listed last.\r\n2. The root package's include/library/RPATH flags come before flags of the same type for any dependency.\r\n3. Order will be preserved within flags passed by the build (except system paths, which are moved to be last)\r\n4. Flags for dependencies will appear between the root flags and the system flags, and the flags for any dependency will come before those for *its* dependencies (this is for completeness -- we already guarantee this in `build_environment.py`)\r\n\r\n\r\nThis partially addresses concerns raised in #1380, and should eliminate the need for the workaround in #3317.\r\n\r\n@lee218llnl: any chance that you can verify that the last part of that statement is true?",
    "performed_via_github_app": null
}