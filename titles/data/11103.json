{
    "url": "https://api.github.com/repos/spack/spack/issues/11103",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/11103/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/11103/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/11103/events",
    "html_url": "https://github.com/spack/spack/pull/11103",
    "id": 428874512,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjY3MTMyMzAz",
    "number": 11103,
    "title": "WIP: Support parsing clispecs as yaml",
    "user": {
        "login": "scottwittenburg",
        "id": 6527504,
        "node_id": "MDQ6VXNlcjY1Mjc1MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6527504?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/scottwittenburg",
        "html_url": "https://github.com/scottwittenburg",
        "followers_url": "https://api.github.com/users/scottwittenburg/followers",
        "following_url": "https://api.github.com/users/scottwittenburg/following{/other_user}",
        "gists_url": "https://api.github.com/users/scottwittenburg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/scottwittenburg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/scottwittenburg/subscriptions",
        "organizations_url": "https://api.github.com/users/scottwittenburg/orgs",
        "repos_url": "https://api.github.com/users/scottwittenburg/repos",
        "events_url": "https://api.github.com/users/scottwittenburg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/scottwittenburg/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 10,
    "created_at": "2019-04-03T16:56:16Z",
    "updated_at": "2019-09-14T18:27:22Z",
    "closed_at": "2019-09-14T18:27:22Z",
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "pull_request": {
        "url": "https://api.github.com/repos/spack/spack/pulls/11103",
        "html_url": "https://github.com/spack/spack/pull/11103",
        "diff_url": "https://github.com/spack/spack/pull/11103.diff",
        "patch_url": "https://github.com/spack/spack/pull/11103.patch"
    },
    "body": "Currently commands that operate on specs, like `spack install` for example, might or might not additionally allow users to provide the `-f <path-to-spec.yaml>` argument as an alternate way to identify specs.  Using the `-f` option is nice because it removes all ambiguity as to what will be installed, or the spec for which a buildcache will be created, etc.\r\n\r\nInstead of incrementally updating all the various commands where this `-f <path-to-spec.yaml>` functionality might be useful (see, for example, #10912), this PR represents an attempt to support it in one go for all commands simultaneously.\r\n\r\nAt a high level, this PR attempts to let the `spack.cmd.parse_specs(...)` method do what it has always done, i.e. assume the positional arguments are clispecs.  If that fails, however, then it additionally tries to see if the positional arguments are readable files representing concrete specs.  So for example, while you can still say:\r\n\r\n```\r\nspack install pkgconf bzip2\r\n```\r\n\r\nYou could also now concretize the `pkgconf` and `bzip2` specs and write those out to the filesystem before saying:\r\n\r\n```\r\nspack install /tmp/pkgconf.yaml /tmp/bzip2.yaml\r\n```\r\n\r\nIn order to unify the way commands handle specs on the command line, the first commit in this PR creates a new common command line argument, `specs`, as the `REMAINDER` of the positional args, and any commands that called `parse_specs()`, now use that common arg.  This also allows documenting the limitations discussed below in a single location, instead of in every command that operates on specs.\r\n\r\nThere are still some unanswered questions here though.\r\n\r\n1. Previously the `spack install -f ...` form could handle relative paths:\r\n\r\n```\r\ncd /tmp\r\nspack install -f bzip2.yaml\r\n```\r\n\r\nBut with the change proposed in this PR, spack thinks that `bzip2` is some kind of namespace and expects `yaml` to refer to a package.  If we were to first treat the positional args as if they might be file paths, it would avoid this issue, but it's my understanding that doing things in that order would cause other problems.\r\n\r\n**EDIT**\r\n\r\n*This PR now simply documents that the above relative path must be prefixed with `./` in order to avoid the ambiguity.*\r\n\r\n2. This PR doesn't support mixed mode specs, i.e. you can't pass as positional arguments some abstract spec strings along with some file paths, ala:\r\n\r\n```\r\nspack install pkgconf@1.4.2 /tmp/bzip2.yaml\r\n```\r\n\r\nThere are currently some tests for mixed mode spec installation, see e.g. `test_install_mix_cli_and_files` in `lib/spack/spack/test/cmd/install.py`.  In that test, the mixed mode is achieved by passing positional arguments along with the `-f` option and supplying file paths.  Keeping the `-f` option where in the commands where it exists already could be a way to continue supporting mixed mode identification of specs, as well as provide backward compatibility for users expecting the `-f` option.\r\n\r\n**EDIT**\r\n\r\n*This PR now documents that the above mixed-mode approach to providing specs on the command line is not supported.*\r\n\r\n3. What should happen if you have a `spec.yaml` from another system, and you accidentally try to install from it?  It may be seen as concrete due to being read from a yaml file, but the concretization may not be valid on the current system.  This may or may not already be an issue when using the `-f` option, however, so maybe isn't a big deal from the perspective of this PR.\r\n",
    "performed_via_github_app": null
}