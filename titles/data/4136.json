{
    "url": "https://api.github.com/repos/spack/spack/issues/4136",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/4136/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/4136/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/4136/events",
    "html_url": "https://github.com/spack/spack/issues/4136",
    "id": 226602755,
    "node_id": "MDU6SXNzdWUyMjY2MDI3NTU=",
    "number": 4136,
    "title": "Auto-Detection of Fortran Name Mangling",
    "user": {
        "login": "citibeth",
        "id": 1924215,
        "node_id": "MDQ6VXNlcjE5MjQyMTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1924215?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/citibeth",
        "html_url": "https://github.com/citibeth",
        "followers_url": "https://api.github.com/users/citibeth/followers",
        "following_url": "https://api.github.com/users/citibeth/following{/other_user}",
        "gists_url": "https://api.github.com/users/citibeth/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/citibeth/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/citibeth/subscriptions",
        "organizations_url": "https://api.github.com/users/citibeth/orgs",
        "repos_url": "https://api.github.com/users/citibeth/repos",
        "events_url": "https://api.github.com/users/citibeth/events{/privacy}",
        "received_events_url": "https://api.github.com/users/citibeth/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 446634397,
            "node_id": "MDU6TGFiZWw0NDY2MzQzOTc=",
            "url": "https://api.github.com/repos/spack/spack/labels/discussion",
            "name": "discussion",
            "color": "a87f5a",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 10,
    "created_at": "2017-05-05T15:08:07Z",
    "updated_at": "2019-12-09T13:53:03Z",
    "closed_at": "2019-12-09T13:53:03Z",
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "@adamjstewart @markcmiller86 \r\n\r\nThe following procedure will do the required auto-detection:\r\n\r\n1. Create the following file called `CMakeLists.txt`:\r\n```\r\ncmake_minimum_required(VERSION 3.0.2)\r\nenable_language(Fortran)\r\n\r\ninclude(FortranCInterface)\r\nFortranCInterface_HEADER(FCMangle.h\r\n                         MACRO_NAMESPACE \"FC_\"\r\n                         SYMBOL_NAMESPACE \"FC_\"\r\n                         SYMBOLS mysub mymod:my_sub)\r\n```\r\n\r\n2. Run `cmake -DCMAKE_fortran_COMPILER=<path-to-fortran-compiler> .` in the same directory as `CMakeLists.txt`\r\n\r\n3. That yields a file like the following, which can be used / parsed further (`FCMangle.h`):\r\n```\r\n#ifndef FC_HEADER_INCLUDED\r\n#define FC_HEADER_INCLUDED\r\n\r\n/* Mangling for Fortran global symbols without underscores. */\r\n#define FC_GLOBAL(name,NAME) name##_\r\n\r\n/* Mangling for Fortran global symbols with underscores. */\r\n#define FC_GLOBAL_(name,NAME) name##_\r\n\r\n/* Mangling for Fortran module symbols without underscores. */\r\n#define FC_MODULE(mod_name,name, mod_NAME,NAME) __##mod_name##_MOD_##name\r\n\r\n/* Mangling for Fortran module symbols with underscores. */\r\n#define FC_MODULE_(mod_name,name, mod_NAME,NAME) __##mod_name##_MOD_##name\r\n\r\n/*--------------------------------------------------------------------------*/\r\n/* Mangle some symbols automatically.                                       */\r\n#define FC_mysub FC_GLOBAL(mysub, MYSUB)\r\n#define FC_mymod_my_sub FC_MODULE_(mymod,my_sub, MYMOD,MY_SUB)\r\n\r\n#endif\r\n```\r\n\r\n**QUESTION:** How would this be integrated into Spack?  Easiest would just be a Python function that creates the `CMakeFiles.txt` in the stage, runs `cmake` and returns the result (or leaves the file somewhere).  The problem here is it depends on `cmake`, which means it depends on a particular version of `cmake`.  Running with system `cmake` could often fail.  However, if this function is meant to be called from within a `package.py`, maybe we could require that Package `depends_on('cmake')`???\r\n",
    "performed_via_github_app": null
}