{
    "url": "https://api.github.com/repos/spack/spack/issues/13955",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/13955/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/13955/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/13955/events",
    "html_url": "https://github.com/spack/spack/issues/13955",
    "id": 531535809,
    "node_id": "MDU6SXNzdWU1MzE1MzU4MDk=",
    "number": 13955,
    "title": "Extends Python with External Python",
    "user": {
        "login": "ax3l",
        "id": 1353258,
        "node_id": "MDQ6VXNlcjEzNTMyNTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1353258?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ax3l",
        "html_url": "https://github.com/ax3l",
        "followers_url": "https://api.github.com/users/ax3l/followers",
        "following_url": "https://api.github.com/users/ax3l/following{/other_user}",
        "gists_url": "https://api.github.com/users/ax3l/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ax3l/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ax3l/subscriptions",
        "organizations_url": "https://api.github.com/users/ax3l/orgs",
        "repos_url": "https://api.github.com/users/ax3l/repos",
        "events_url": "https://api.github.com/users/ax3l/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ax3l/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 446615135,
            "node_id": "MDU6TGFiZWw0NDY2MTUxMzU=",
            "url": "https://api.github.com/repos/spack/spack/labels/configuration",
            "name": "configuration",
            "color": "bfd4f2",
            "default": false,
            "description": null
        },
        {
            "id": 455855856,
            "node_id": "MDU6TGFiZWw0NTU4NTU4NTY=",
            "url": "https://api.github.com/repos/spack/spack/labels/external-packages",
            "name": "external-packages",
            "color": "c5def5",
            "default": false,
            "description": null
        },
        {
            "id": 446619758,
            "node_id": "MDU6TGFiZWw0NDY2MTk3NTg=",
            "url": "https://api.github.com/repos/spack/spack/labels/python",
            "name": "python",
            "color": "c2e0c6",
            "default": false,
            "description": null
        },
        {
            "id": 73908758,
            "node_id": "MDU6TGFiZWw3MzkwODc1OA==",
            "url": "https://api.github.com/repos/spack/spack/labels/question",
            "name": "question",
            "color": "cc317c",
            "default": true,
            "description": null
        },
        {
            "id": 1483227126,
            "node_id": "MDU6TGFiZWwxNDgzMjI3MTI2",
            "url": "https://api.github.com/repos/spack/spack/labels/workflow",
            "name": "workflow",
            "color": "4a47ff",
            "default": false,
            "description": ""
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-12-02T21:00:34Z",
    "updated_at": "2019-12-02T22:00:18Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "My colleague @ldamorim and I are currently trying to install packages that declare `extends('python')` and use an external, macOS Catalina Python 3.7.3 in `package.yaml`. \r\n\r\nSince this method tries to install into the python install directory, which in the case of a system-provided install does require root access and will fail. We wonder how workflows and good policies would look like for users that want to re-use their system-wide python.\r\n\r\nRegarding the [actual intentions](https://github.com/spack/spack/issues/5559#issuecomment-333598324) of `extends('python')` one could potentially achieve the same user-level functionality (auto-load an extension when the base package is loaded) without modifying the base package python but instead by setting environment variables in user-controlled paths, similar to `pip`'s `--user` option.\r\n\r\nAlternatively, being able to mark an external package in `packages.yaml` as \"read-only\" and discarding/warning on all `extends()` could be a possible hack to get going?\r\n\r\nAny opinions or recommendations?",
    "performed_via_github_app": null
}