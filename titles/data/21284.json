{
    "url": "https://api.github.com/repos/spack/spack/issues/21284",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/21284/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/21284/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/21284/events",
    "html_url": "https://github.com/spack/spack/issues/21284",
    "id": 794021459,
    "node_id": "MDU6SXNzdWU3OTQwMjE0NTk=",
    "number": 21284,
    "title": "binutils tools should be part of Spack compiler definition",
    "user": {
        "login": "jonglezb",
        "id": 30461003,
        "node_id": "MDQ6VXNlcjMwNDYxMDAz",
        "avatar_url": "https://avatars.githubusercontent.com/u/30461003?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonglezb",
        "html_url": "https://github.com/jonglezb",
        "followers_url": "https://api.github.com/users/jonglezb/followers",
        "following_url": "https://api.github.com/users/jonglezb/following{/other_user}",
        "gists_url": "https://api.github.com/users/jonglezb/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jonglezb/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jonglezb/subscriptions",
        "organizations_url": "https://api.github.com/users/jonglezb/orgs",
        "repos_url": "https://api.github.com/users/jonglezb/repos",
        "events_url": "https://api.github.com/users/jonglezb/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jonglezb/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 73908756,
            "node_id": "MDU6TGFiZWw3MzkwODc1Ng==",
            "url": "https://api.github.com/repos/spack/spack/labels/feature",
            "name": "feature",
            "color": "84b6eb",
            "default": false,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2021-01-26T08:04:28Z",
    "updated_at": "2021-05-04T02:15:00Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "<!--*Please add a concise summary of your suggestion here.*-->\r\nbinutils is currently taken from the system by default, even when using a compiler that lives under Spack. This is a bit strange given how important it is when building.\r\n\r\n### Rationale\r\n\r\nTo make sure we don't depend on a particular system package, we bootstrap our Spack tree by building GCC within Spack, and we then use this Spack GCC as Spack compiler. Then, subsequent updates of our Spack tree are done using a different system that doesn't even have a system compiler.\r\n\r\nThe problem is that Spack keeps trying to use the system binutils, which completely fails when the system doesn't have a system compiler (GCC cannot build anything without `as`). We solve it in the following way:\r\n\r\n- build binutils when bootstraping\r\n- when updating the tree, start by loading binutils (`spack load binutils`)\r\n\r\nHowever, it does not feel like this is how Spack should work.\r\n\r\n<!--*Is your feature request related to a problem? Please describe it!*-->\r\n\r\n### Description\r\n\r\n<!--*Describe the solution you'd like and the alternatives you have considered.*-->\r\nAccording to Spack documentation, one way would be for all C packages to depend on binutils, but this is considered too annoying to do (I agree): https://spack.readthedocs.io/en/latest/getting_started.html?highlight=binutils#package-utilities\r\n\r\nWe could workaround by adding binutils to `prepend_path` in the compiler definition (I haven't tried that yet):\r\nhttps://spack.readthedocs.io/en/latest/basic_usage.html?highlight=binutils#compiler-environment-variables-and-additional-rpaths\r\nHowever, it feels more like a hack, and wouldn't work when auto-detecting compilers.\r\n\r\nThe cleanest solution would probably be to declare binutils tools in the compiler definition, e.g.:\r\n\r\n```\r\n- compiler:\r\n    spec: gcc@8.3.0\r\n    paths:\r\n      cc: /grid5000/spack/opt/spack/linux-debian10-x86_64/gcc-8.3.0/gcc-8.3.0-cva45sgdtwukvazpxc6eurpry7xpi4zl/bin/gcc\r\n      cxx: /grid5000/spack/opt/spack/linux-debian10-x86_64/gcc-8.3.0/gcc-8.3.0-cva45sgdtwukvazpxc6eurpry7xpi4zl/bin/g++\r\n      f77: /grid5000/spack/opt/spack/linux-debian10-x86_64/gcc-8.3.0/gcc-8.3.0-cva45sgdtwukvazpxc6eurpry7xpi4zl/bin/gfortran\r\n      fc: /grid5000/spack/opt/spack/linux-debian10-x86_64/gcc-8.3.0/gcc-8.3.0-cva45sgdtwukvazpxc6eurpry7xpi4zl/bin/gfortran\r\n      as: /grid5000/spack/opt/spack/linux-debian10-x86_64/gcc-8.3.0/binutils-2.32-xiigusjo2rxs4yt4kuygdk3nf3qmuplm/bin/as\r\n      ld: /grid5000/spack/opt/spack/linux-debian10-x86_64/gcc-8.3.0/binutils-2.32-xiigusjo2rxs4yt4kuygdk3nf3qmuplm/bin/ld\r\n```\r\n\r\nHowever, it might be very verbose if we specify all tools.\r\n\r\nI'm open to other suggestions.  Maybe our usage is just not aligned with the way Spack works.\r\n\r\n### Additional information\r\n<!--*Add any other context about the feature request here.*-->\r\n\r\n```\r\n$ spack --version\r\n0.16.0-908-85ea52acd1\r\n```\r\n\r\n### General information\r\n\r\n- [x] I have run `spack --version` and reported the version of Spack\r\n- [x] I have searched the issues of this repo and believe this is not a duplicate\r\n\r\n\r\n\r\n<!--If you want to ask a question about the tool (how to use it, what it can currently do, etc.), try the `#general` channel on our Slack first. We have a welcoming community and chances are you'll get your reply faster and without opening an issue.\r\n\r\nOther than that, thanks for taking the time to contribute to Spack!\r\n-->",
    "performed_via_github_app": null
}