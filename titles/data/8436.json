{
    "url": "https://api.github.com/repos/spack/spack/issues/8436",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/8436/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/8436/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/8436/events",
    "html_url": "https://github.com/spack/spack/pull/8436",
    "id": 331002933,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTkzODQ2Nzcz",
    "number": 8436,
    "title": "Binding Python scripts and libraries at build-time",
    "user": {
        "login": "hartzell",
        "id": 312978,
        "node_id": "MDQ6VXNlcjMxMjk3OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/312978?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hartzell",
        "html_url": "https://github.com/hartzell",
        "followers_url": "https://api.github.com/users/hartzell/followers",
        "following_url": "https://api.github.com/users/hartzell/following{/other_user}",
        "gists_url": "https://api.github.com/users/hartzell/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hartzell/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hartzell/subscriptions",
        "organizations_url": "https://api.github.com/users/hartzell/orgs",
        "repos_url": "https://api.github.com/users/hartzell/repos",
        "events_url": "https://api.github.com/users/hartzell/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hartzell/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 466955297,
            "node_id": "MDU6TGFiZWw0NjY5NTUyOTc=",
            "url": "https://api.github.com/repos/spack/spack/labels/proposal",
            "name": "proposal",
            "color": "0e8a16",
            "default": false,
            "description": null
        },
        {
            "id": 446619758,
            "node_id": "MDU6TGFiZWw0NDY2MTk3NTg=",
            "url": "https://api.github.com/repos/spack/spack/labels/python",
            "name": "python",
            "color": "c2e0c6",
            "default": false,
            "description": null
        },
        {
            "id": 459174375,
            "node_id": "MDU6TGFiZWw0NTkxNzQzNzU=",
            "url": "https://api.github.com/repos/spack/spack/labels/revisit",
            "name": "revisit",
            "color": "b60205",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 23,
    "created_at": "2018-06-10T21:12:20Z",
    "updated_at": "2020-12-28T22:45:44Z",
    "closed_at": "2020-12-28T22:45:43Z",
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "pull_request": {
        "url": "https://api.github.com/repos/spack/spack/pulls/8436",
        "html_url": "https://github.com/spack/spack/pull/8436",
        "diff_url": "https://github.com/spack/spack/pull/8436.diff",
        "patch_url": "https://github.com/spack/spack/pull/8436.patch"
    },
    "body": "[Edited in response to feedback]\r\n\r\n### Binding Python scripts and libraries at build-time\r\n\r\nThis PR is a Proof of Concept, exploring an approach to enabling Python to find the additional packages Spack installs without depending on `PYTHONPATH`.  Issue #8343 (a flake8 failure) is an example of problems caused by using `PYTHONPATH`.  This is an alternative approach to solving the problem to the one presented in PR #8364.\r\n\r\nYou can test drive the idea by starting in a clean Spack tree and installing a python-only module, you should be able to run its script without any additional modules or ....\r\n\r\n```console\r\nspack install py-flake8\r\n(module purge; /home/hartzell/tmp/spack-rpath.py/opt/spack/linux-rhel7-x86_64/gcc-4.8.5/py-flake8-3.5.0-4gkbvq2u3si6jxsmlapdeolds4wgwzdx/bin/flake8 --help)\r\n```\r\n\r\nThe task is to add the various directories into which we've installed an application's python prerequisites onto its `sys.path`.\r\n\r\n**The implementation is a proof of concept hack, don't get too hung up on the code itself.**  If the idea gets general support I'll work on the implementation.\r\n\r\nWhen I was developing this I was struck by the similarity to RPATHS and shared libraries, hence the names I used for various things.  On further consideration, the name might be confusing and perhaps I should use something distinct.\r\n\r\n### The current approach\r\n\r\nThe current approach is to either:\r\n\r\n- `activate` the prereq's, which links them into the Python tree, which is on `sys.path` by default; or\r\n\r\n  The problem with this approach is that only one version can be activated at a time and everyone using that Spack tree is stuck with it.\r\n\r\n- add them via `PYTHONPATH` (using modulefiles or ...).\r\n\r\n  The problem with this approach is that directories added via `PYTHONPATH` are second class citizens, the directories themselves are searched **BUT** the `*.pth` files they contain are not processed.  Lesser problems with this approach include `PYTHONPATH`'s global nature, its availability for finger poking and the complexity of juggling the modulefiles (e.g recursively loading prerequisites).\r\n\r\n### The proposed solution\r\n\r\nThis solution sets from whence an application loads its libraries *at build time*, not at run time.  \r\n\r\nThere are two parts:\r\n\r\n1. When Python packages are installed, they install a file containing the paths to all of the their python prerequisites (`.spack-rpaths`) within their `prefix`.\r\n\r\n2. The Python package installs a `sitecustomize.py` script, which Python runs very early in the interpreter's startup.\r\n\r\n   The `sitecustomize.py` code checks for a `.spack-rpaths` file.  If it finds one it uses `site.addsitedir` to add the directories it contains to `sys.path`.\r\n\r\n   Directories that are added to `sys.path` via `site.addsitedir` *do* process `*.pth** files, so the magic they contain is invoked as expected.\r\n\r\nThis solution parallels what rpath does for shared libraries.\r\n\r\n### Issues and sticky bits\r\n\r\nPotentially sticky bits include:\r\n\r\n- The biggest roadblock to this approach is that `sitecustomize.py` is processed *so* early that `sys.argv` has not been created yet, so discovering the path to the directory in which the script lives is magical.  This prototype grabs it from `/proc/self/cmdline`.  I've included an alternate solution that is either really elegant or too-cute-by-half (or both...), see the comments in `sitecustomize.py` for the gory details.\r\n- Dealing with deployments that use the system python.  They might need to install our `sitecustomize.py`, they *might* be able to leverage *usercustomize*, or they might need to use one of the other techniques.\r\n- I haven't played with Python3 yet.\r\n- I suspect that a sufficiently determined user could break things by setting `PYTHONPATH`.\r\n\r\nBeyond that, there's a bit of engineering to be done.\r\n\r\nSomething similar might be workable for Perl using its `sitecustomize` support.  Perhaps R and ... too.\r\n",
    "performed_via_github_app": null
}