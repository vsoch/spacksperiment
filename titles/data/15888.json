{
    "url": "https://api.github.com/repos/spack/spack/issues/15888",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/15888/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/15888/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/15888/events",
    "html_url": "https://github.com/spack/spack/issues/15888",
    "id": 595033637,
    "node_id": "MDU6SXNzdWU1OTUwMzM2Mzc=",
    "number": 15888,
    "title": "High-Efficiency Containerization of Spack Environments",
    "user": {
        "login": "citibeth",
        "id": 1924215,
        "node_id": "MDQ6VXNlcjE5MjQyMTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1924215?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/citibeth",
        "html_url": "https://github.com/citibeth",
        "followers_url": "https://api.github.com/users/citibeth/followers",
        "following_url": "https://api.github.com/users/citibeth/following{/other_user}",
        "gists_url": "https://api.github.com/users/citibeth/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/citibeth/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/citibeth/subscriptions",
        "organizations_url": "https://api.github.com/users/citibeth/orgs",
        "repos_url": "https://api.github.com/users/citibeth/repos",
        "events_url": "https://api.github.com/users/citibeth/events{/privacy}",
        "received_events_url": "https://api.github.com/users/citibeth/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 719256466,
            "node_id": "MDU6TGFiZWw3MTkyNTY0NjY=",
            "url": "https://api.github.com/repos/spack/spack/labels/containers",
            "name": "containers",
            "color": "c5def5",
            "default": false,
            "description": null
        },
        {
            "id": 537065486,
            "node_id": "MDU6TGFiZWw1MzcwNjU0ODY=",
            "url": "https://api.github.com/repos/spack/spack/labels/environments",
            "name": "environments",
            "color": "d4c5f9",
            "default": false,
            "description": null
        },
        {
            "id": 73908756,
            "node_id": "MDU6TGFiZWw3MzkwODc1Ng==",
            "url": "https://api.github.com/repos/spack/spack/labels/feature",
            "name": "feature",
            "color": "84b6eb",
            "default": false,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-04-06T11:27:24Z",
    "updated_at": "2020-04-06T11:30:45Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "@alalazo @tgamblin Here is how I build Spack-based Docker containers.  It would be great if this approach could make its way into Spack.  It addresses the following fundamental problems that happen if you just put a bunch of `spack env ...` commands into a Dockerfile:\r\n\r\n1. Building a Spack environment from scratch (source compilation) is really slow!\r\n\r\n1. Building a Spack environment from scratch is non-deterministic, unless you've got all your tarballs cached.  (And last time I checked, some Spack builds don't seem to be cached; for example, *develop* branches).\r\n\r\n1. Containers need to be debugged.  Debugging something that takes 4 hours to run is not practical.\r\n\r\nTo address those concerns, here is what I do:\r\n\r\n1. I create a base container (call it *base0*) containing the system installs I will need.\r\n\r\n1. I create a container (call it *spack1*) containing *base0*, plus it mounts a Docker volume.  I install Spack on the Docker volume.  (In my case I didn't know about Docker volumes yet; so I just used dd and mount from within the Docker container to create a virtual HD in a file that lives on my local C:\\ drive, which I mount insider the container):\r\n    https://docs.docker.com/storage/volumes/\r\n(Note that Volumes are the preferred mechanism for persisting data generated by and used by Docker containers)\r\n\r\n1. I enter my *spack1* container and work interactively with Spack to create and debug the environment I need.\r\n\r\n1. Once the environment I need is fully built, I \"render\" it as follows:\r\n   1. For each installed package in the environment, generate a tarball containing the package's Spack install directory and its module.\r\n   1. If using an Amazon S3 / CI/CD environment, I now do:\r\n       1. Upload each generated tarball needed for this environment to a repository location in S3.  If the filename of that tarball already exists in S3, then there's no need to upload it again because I'll presume it's the same.  (Refinement: probably should re-upload anything with a *develop* version).\r\n       1. Generate a Dockerfile for a container I'll call *installed1*, based on on *base0*, which I write to a mounted location on my C:\\ drive.  This Dockerfile consists of one long RUN command that, for each required tarball, downloads and untars it into the container image.  Note that it is untarred into the *same* location as where it originally came from, so no need to worry about relocatable Spack binary packages here.\r\n       1. Write the correct env var settings into the Dockerfile as well.  This is done by loading all the environment's modules from inside of *spack1* and then doing a little bit of *diff*-style analysis on the resulting environment variables to figure out what loading all those modules did.  Then I write those env var updates directly into the Dockerfile with an ENV command.\r\n        1. Commit the machine-generated Dockerfile for *installed1* to our local GitLab/GitHub. Integrated CI/CD then builds the container image.\r\n   1. If using a local filesystem, the above steps instead work as:\r\n       1. Copy each generated tarball into the directory for the *installed1* container directory.  As before, no need to copy it a again if the tarball already exists in *installed1*\r\n       1. Remove any tarballs from *installed1* that no longer are needed in the current version of the environment.\r\n       1. Generate *installed1/Dockerfile* as above.  This time, just use a bunch of ADD commands to directly untar and add the tarballs to the Docker image.\r\n       1. Add the env var settings to the Dockerfile as well, as above.\r\n       1. Commit to the GitLab/GitHub repo *just* *installed1/Dockerfile*, don't commit the tarballs.  Because hashes are unique, the tarballs can always be regenerated...\r\n\r\n1. Now that *installed1* is rendered, I build it (if not already built through CI/CD).  And then I build additional stuff on top of it: for example, a PIP-based environment, top-level container configurations, etc.\r\n\r\nThe advantage of this system over what's currently in Spack is speed and convenience.  When we need something added to our container, my process works as follows:\r\n\r\n1. Enter the *spack1* container and start fiddling with the environment.  Usually there will be a bunch of back-and-forth as I debug builds, update recipes, change versions of prerequisites, etc.  But in theory, I'm just building one new package, so this won't take too long.\r\n1. Test my new package interactively from within *spack1*.\r\n1. When everything works out, commit the Spack tree checked out inside of *spack1* back to our internal Spack fork.  (And maybe later, submit changes for PRs, update internal Spack fork with new stuff, etc).  Note that this tree also contains my environment's *spack.yaml* file, it is entirely integrated.\r\n1. Render the environment as described above.  This step will usually be fast: if I'm just adding a single package to the environment, rendering the environment just involves checking things over and then generating a single tarball.\r\n1. Do the Docker build of *install1*, as described above.  This will run at least as fast as a Dockerfile containing a bunch of `apt install` commands, because it's just downloading and untarring a bunch of tar files.  This will be at least 100-1000X faster than rebuilding the environment from source.\r\n\r\n",
    "performed_via_github_app": null
}