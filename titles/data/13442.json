{
    "url": "https://api.github.com/repos/spack/spack/issues/13442",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/13442/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/13442/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/13442/events",
    "html_url": "https://github.com/spack/spack/issues/13442",
    "id": 512718760,
    "node_id": "MDU6SXNzdWU1MTI3MTg3NjA=",
    "number": 13442,
    "title": "Cannot override compilers inside an environment",
    "user": {
        "login": "scottwittenburg",
        "id": 6527504,
        "node_id": "MDQ6VXNlcjY1Mjc1MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6527504?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/scottwittenburg",
        "html_url": "https://github.com/scottwittenburg",
        "followers_url": "https://api.github.com/users/scottwittenburg/followers",
        "following_url": "https://api.github.com/users/scottwittenburg/following{/other_user}",
        "gists_url": "https://api.github.com/users/scottwittenburg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/scottwittenburg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/scottwittenburg/subscriptions",
        "organizations_url": "https://api.github.com/users/scottwittenburg/orgs",
        "repos_url": "https://api.github.com/users/scottwittenburg/repos",
        "events_url": "https://api.github.com/users/scottwittenburg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/scottwittenburg/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 73908754,
            "node_id": "MDU6TGFiZWw3MzkwODc1NA==",
            "url": "https://api.github.com/repos/spack/spack/labels/bug",
            "name": "bug",
            "color": "fc2929",
            "default": true,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
        "login": "scheibelp",
        "id": 1659704,
        "node_id": "MDQ6VXNlcjE2NTk3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1659704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/scheibelp",
        "html_url": "https://github.com/scheibelp",
        "followers_url": "https://api.github.com/users/scheibelp/followers",
        "following_url": "https://api.github.com/users/scheibelp/following{/other_user}",
        "gists_url": "https://api.github.com/users/scheibelp/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/scheibelp/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/scheibelp/subscriptions",
        "organizations_url": "https://api.github.com/users/scheibelp/orgs",
        "repos_url": "https://api.github.com/users/scheibelp/repos",
        "events_url": "https://api.github.com/users/scheibelp/events{/privacy}",
        "received_events_url": "https://api.github.com/users/scheibelp/received_events",
        "type": "User",
        "site_admin": false
    },
    "assignees": [
        {
            "login": "scheibelp",
            "id": 1659704,
            "node_id": "MDQ6VXNlcjE2NTk3MDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1659704?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/scheibelp",
            "html_url": "https://github.com/scheibelp",
            "followers_url": "https://api.github.com/users/scheibelp/followers",
            "following_url": "https://api.github.com/users/scheibelp/following{/other_user}",
            "gists_url": "https://api.github.com/users/scheibelp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/scheibelp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scheibelp/subscriptions",
            "organizations_url": "https://api.github.com/users/scheibelp/orgs",
            "repos_url": "https://api.github.com/users/scheibelp/repos",
            "events_url": "https://api.github.com/users/scheibelp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/scheibelp/received_events",
            "type": "User",
            "site_admin": false
        }
    ],
    "milestone": null,
    "comments": 14,
    "created_at": "2019-10-25T20:59:56Z",
    "updated_at": "2019-11-09T00:09:59Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "TLDR: `with cfg.override('compilers:', actual_compilers):` does not seem actually to override the compilers inside a spack environment.\r\n\r\nWhen running pipelines that are intended to bootstrap a missing compiler, we have typically added the compiler we want to the spack environment, substituting empty strings for all the paths.  This allows us to \"cross-concretize\" the specs against that compiler even if the system where we concretize doesn't actually have that compiler.\r\n\r\nNow we are attempting to build that compiler and it's dependencies within the environment where we have listed it only for cross-concretization purposes, but it's getting picked as the compiler to build with.  For example, say my release environment wants to build:\r\n\r\n```\r\nbzip2@1.0.8@gcc@5.5.0 os=centos7\r\n```\r\n\r\nBut I'm sure the machine where I want to build that doesn't have `gcc@5.5.0`, so I put it in my environment like this:\r\n\r\n```\r\ncompilers:\r\n    - compiler:\r\n        spec: gcc@5.5.0\r\n        target: x86_64\r\n        operating_system: centos7\r\n        paths: { \"cc\": \"\", \"cxx\": \"\", \"f77\": \"\", \"fc\": \"\" }\r\n        environment: {}\r\n        extra_rpaths: []\r\n        flags: {}\r\n        modules: []\r\n```\r\n\r\nAnd that allows me to concretize `bzip2` with the right compiler.  Then I'll add `gcc@5.5.0` as a compiler to bootstrapped in that environment (within the `gitlab-ci` section).  When I'm concretizing `gcc@5.5.0` to be able to stage it and all it's dependencies in the bootstrapping portion of the pipeline, I want spack to use whatever compiler is available on that machine to build `gcc@5.5.0`, so I try to explicitly override the compilers configuration to remove the compiler I know I only put there for cross-concretization, so that spack chooses an actual compiler on the system with which to build `gcc@5.5.0`.  This is happening in python and looks something like:\r\n\r\n```python\r\nimport spack.config as cfg\r\nfrom spack.spec import Spec\r\nreal_compilers = [{'compiler': {'environment': {}, 'extra_rpaths': [], 'flags': {}, 'implicit_rpaths': [], 'modules': [], 'operating_system': 'centos7', 'paths': {'cc': '/bin/gcc', 'cxx': '/bin/g++', 'f77': '/bin/gfortran', 'fc': '/bin/gfortran'}, 'spec': 'gcc@4.8.5', 'target': 'x86_64'}}]\r\nwith cfg.override('compilers:', real_compilers):\r\n    s = Spec('gcc@5.5.0')\r\n    s.concretize()\r\n```\r\n\r\nAnd what I get back is something like `gcc@5.5.0%gcc@5.5.0...`, which is not what I wanted.  So I feel it may be a bug that I cannot completely override the compiler config from within the environment.\r\n\r\n### Steps to reproduce the issue\r\n\r\nThis is most easily and reliably reproduced in a docker container where the installed compilers are known.  \r\n\r\n1. Start by putting the following `spack.yaml` into a directory (e.g. `/tmp/reproduce`):\r\n\r\n```\r\nspack:\r\n  specs: [bzip2@1.0.8 os=centos7]\r\n  mirrors: {mirror: 's3://spack-private/mirror'}\r\n  gitlab-ci:\r\n    mappings:\r\n    - match: [os=centos7]\r\n      runner-attributes:\r\n        image:\r\n          name: spack/centos7\r\n          entrypoint: ['']\r\n        tags: [docker]\r\n        variables: {}\r\n  compilers:\r\n    - compiler:\r\n        spec: gcc@5.5.0\r\n        target: x86_64\r\n        operating_system: centos7\r\n        paths: { \"cc\": \"\", \"cxx\": \"\", \"f77\": \"\", \"fc\": \"\" }\r\n        environment: {}\r\n        extra_rpaths: []\r\n        flags: {}\r\n        modules: []\r\n  repos: []\r\n  upstreams: {}\r\n  modules:\r\n    enable: []\r\n  packages: {}\r\n  config: {}\r\n```\r\n\r\n2. In the same directory clone spack and make sure the latest `develop` branch is checked out.\r\n\r\n3. Run the `spack/centos7` docker container, mounting that directory as `/work`:\r\n\r\n```console\r\n$ docker run --rm --entrypoint /bin/bash -v /tmp/reproduce:/work -ti spack/centos7\r\n[root@ba3e3475c3c6 ~]# \r\n```\r\n\r\n4. Change into the environment directory and source the newly cloned spack:\r\n\r\n```console\r\n[root@ba3e3475c3c6 ~]# cd /work/                \r\n[root@ba3e3475c3c6 work]# source spack/share/spack/setup-env.sh\r\n```\r\n\r\n5. Now run a spack python session and try to manually override the compilers:\r\n\r\n```console\r\n[root@ba3e3475c3c6 work]# spack python\r\nSpack version 0.12.1\r\nPython 2.7.5, Linux x86_64\r\n>>> import spack.config as cfg\r\n>>> from spack.spec import Spec\r\n>>> real_compilers = [{'compiler': {'environment': {}, 'extra_rpaths': [], 'flags': {}, 'implicit_rpaths': [], 'modules': [], 'operating_system': 'centos7', 'paths': {'cc': '/bin/gcc', 'cxx': '/bin/g++', 'f77': '/bin/gfortran', 'fc': '/bin/gfortran'}, 'spec': 'gcc@4.8.5', 'target': 'x86_64'}}]\r\n>>> with cfg.override('compilers:', real_compilers):\r\n...     s = Spec('gcc@5.5.0')\r\n...     s.concretize() \r\n...     print(s)\r\n... \r\ngcc@5.5.0%gcc@5.5.0...\r\n>>>\r\n```\r\n\r\nPlease let me know if more information is required.  Using the same docker container should allow faithful reproduction without worrying about different system configs.",
    "performed_via_github_app": null
}