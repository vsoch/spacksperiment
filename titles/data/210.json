{
    "url": "https://api.github.com/repos/spack/spack/issues/210",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/210/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/210/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/210/events",
    "html_url": "https://github.com/spack/spack/pull/210",
    "id": 119332846,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NTIwNTM3NTY=",
    "number": 210,
    "title": "Multiple package repositories",
    "user": {
        "login": "tgamblin",
        "id": 299842,
        "node_id": "MDQ6VXNlcjI5OTg0Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/299842?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tgamblin",
        "html_url": "https://github.com/tgamblin",
        "followers_url": "https://api.github.com/users/tgamblin/followers",
        "following_url": "https://api.github.com/users/tgamblin/following{/other_user}",
        "gists_url": "https://api.github.com/users/tgamblin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tgamblin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tgamblin/subscriptions",
        "organizations_url": "https://api.github.com/users/tgamblin/orgs",
        "repos_url": "https://api.github.com/users/tgamblin/repos",
        "events_url": "https://api.github.com/users/tgamblin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tgamblin/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 302342691,
            "node_id": "MDU6TGFiZWwzMDIzNDI2OTE=",
            "url": "https://api.github.com/repos/spack/spack/labels/will-merge",
            "name": "will-merge",
            "color": "bfe5bf",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 7,
    "created_at": "2015-11-29T03:20:46Z",
    "updated_at": "2016-01-27T02:33:43Z",
    "closed_at": "2016-01-19T09:18:30Z",
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
        "url": "https://api.github.com/repos/spack/spack/pulls/210",
        "html_url": "https://github.com/spack/spack/pull/210",
        "diff_url": "https://github.com/spack/spack/pull/210.diff",
        "patch_url": "https://github.com/spack/spack/pull/210.patch"
    },
    "body": "@mplegendre: can you review this implementation of package repositories?  I closed your old pull request.\n\nThis version builds on your PR and adds a few things:\n1. Changed repository layout to look like this:\n   \n   ```\n       repo_root/\n           repo.yaml\n           packages/\n   ```\n   \n   The additional top-level wrapper directory makes a natural place for `repo.yaml` and should leave room for per-repo settings, files, and such later.\n2. `repo.yaml` currently contains only a namespace for packages, e.g. for the builtin repo:\n   \n   ``` yaml\n   repo:\n       namespace: 'builtin'\n   ```\n   \n   Namespaces can be nested, e.g. we could use namespaces like `gov.llnl.bdiv` or `gov.nersc.bio`.\n3. The loading logic is simpler and it's all consolidated in `repository.py`.  There is `RepoPath`, which implements a list of repositories to search for packages, and there is `Repo`, which is pretty much what `PackageDB` used to be.  Both `Repo` and `RepoPath` are valid Python class importers, so you can stick them in `sys.meta_path`.  \n\n4.`RepoPath` implements an overlay namespace, rooted at `spack.pkg`, so you can import your packages directly from `spack.pkg.<namespace>.  So if you want to extend, say, the builtin`mpich`package, you can do this:\n``\n    import spack.pkg.builtin.mpich\n    class Mpich(spack.pkg.builtin.mpich.Mpich):\n        ...\n``\n    You can actually play around with this using`spack python` and importing the class.\n1. Package namespaces are integrated with `Spec` parsing and concretization.  You can be very specific about what you want to install, e.g. if you have a repo that overlays its own `mpich` on the default one, you can still link to the default one like with an explicit namespace on the command line:\n   \n   ``` bash\n   $ spack install mpileaks ^builtin.mpich\n   ```\n   \n   Specs without namespaces are bound at the end of concretization based on repo precedence.  Likewise you can do `depends_on('builtin.mpich')` in the package if you want to be specific there.  A spec is unsatisfiable if it contains `mpich` from two different namespaces.\n2. `~/.spack/repos.yaml` and `$spack/etc/spack/repos.yaml` determine what repositories are configured.  `$spack/etc/spack/repos.yaml` looks like this by default:\n   \n   ```\n   repos:\n     - $spack/var/spack/repos/builtin\n   ```\n   \n   That points at the builtin spack package repo.  You can add your own in your `~/.spack/repos.yaml` like this:\n   \n   ```\n   repos:\n     - ~/spack-repos/myrepo\n   ```\n   \n   This repo will be searched before the default one.  If you want to override **all** settings in the site `repos.yaml`, you can use two `:`'s like this:\n   \n   ```\n   repos::\n     - ~/spack-repos/myrepo\n   ```\n   \n   And the builtins will not be searched at all.  I expect this case to be rare.\n3. `spack repo list` will list configured repositories.\n4. `spack repo create` will create an empty repository.\n\nOk, that is about it.  The only issue I really have is that I am not sure the logic in `config.py` is robust enough to handle adding a `spack repo add` and `spack repo remove` commands with scope arguments.  I can't figure out how to remove stuff just from one scope or another without mnemonics.  I thought not having mnemonics would make repos simpler, but maybe they need them after all, for consistency.  It would be easy enough to always refer to them by root or namespace, though.  Thoughts?\n",
    "performed_via_github_app": null
}