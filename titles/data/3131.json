{
    "url": "https://api.github.com/repos/spack/spack/issues/3131",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/3131/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/3131/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/3131/events",
    "html_url": "https://github.com/spack/spack/issues/3131",
    "id": 206952479,
    "node_id": "MDU6SXNzdWUyMDY5NTI0Nzk=",
    "number": 3131,
    "title": "Projects vs. Packages: Principles for Spack Authorship and Use",
    "user": {
        "login": "citibeth",
        "id": 1924215,
        "node_id": "MDQ6VXNlcjE5MjQyMTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1924215?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/citibeth",
        "html_url": "https://github.com/citibeth",
        "followers_url": "https://api.github.com/users/citibeth/followers",
        "following_url": "https://api.github.com/users/citibeth/following{/other_user}",
        "gists_url": "https://api.github.com/users/citibeth/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/citibeth/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/citibeth/subscriptions",
        "organizations_url": "https://api.github.com/users/citibeth/orgs",
        "repos_url": "https://api.github.com/users/citibeth/repos",
        "events_url": "https://api.github.com/users/citibeth/events{/privacy}",
        "received_events_url": "https://api.github.com/users/citibeth/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 446634397,
            "node_id": "MDU6TGFiZWw0NDY2MzQzOTc=",
            "url": "https://api.github.com/repos/spack/spack/labels/discussion",
            "name": "discussion",
            "color": "a87f5a",
            "default": false,
            "description": null
        },
        {
            "id": 537065486,
            "node_id": "MDU6TGFiZWw1MzcwNjU0ODY=",
            "url": "https://api.github.com/repos/spack/spack/labels/environments",
            "name": "environments",
            "color": "d4c5f9",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2017-02-11T02:54:43Z",
    "updated_at": "2019-12-09T13:15:39Z",
    "closed_at": "2019-12-09T13:15:39Z",
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "@tgamblin  @becker33 Keywords: variant forwarding, Spack Environments\r\n\r\nThis thread is a continuation of discussion in #3049.  The key idea is we (software authors) need to think of our *projects* as a *software DAG with a root* combined with some project configuration info, rather than *our top-level project plus dependencies.*  There is nothing special about the root of my DAG --- especially if someone else uses my top-level application as a libarary.\r\n\r\n> However, I think this is a compelling case for using forwarding. The semantics of it make sense -- lbann with debugging is useless when elemental does not have debug symbols.\r\n\r\nI don't think that's compelling because it's way too common.  There are plenty of other base numerical packages like Elemental, where it makes sense to enable/disable debugging on them and the applications that rely on them simultaneously.  PETSc, Eigen, METIS, SuiteSparse, just to name a few...  Altogether they have at least dozens of applications from which one could imagine forwarding the `+debug` variant.\r\n\r\nWe need to think of a way to address this issue at the Spack level, rather than the per-package level.  Once that is done, we will have to rip out all the variant forwarding the package level.  There is no way to grep for variant forwarding, although we can (and will need to) grep for `debug`.\r\n\r\n\r\n> This package isn't widely used\r\n\r\nI think that *is* the most compelling argument to allow the variant forwarding in this case.\r\n\r\n> on similar grounds to our decision in #2670\r\n\r\nI think that #2670 is more problematic than this #3049.  #2670 contains a lot of `~` characters in its `depends_on()` directives.  These are known to break the concretizer, and I'm not sure a new concretizer will fix that; witness the ongoing problems people have building R, in the light of things like `depends_on('pango~X')`.  I suppose the similarity is that in both cases, users did not want to use the `packages.yaml` functionality --- and it is expedient to allow that for rarely-used packages.\r\n\r\n*It seems we keep running into cases where people want to code site-specific or project-specific stuff into packages.*  And then we have to choose between convenience of those users vs. flexibility (for other users) of the package that is ultimately created.  Here is what I think we can learn from this experience:\r\n\r\nTakeaway Points\r\n-----------------------\r\n\r\n1. **What do we need to change to make things both convenient and flexible for users?**  I believe we need to encourage **thinking of projects as a DAG of software, rather than single package.**  And put explicit support for it in Spack, and discussion in the manual.  Even if you are the author of the top-level package in a DAG, we should encourage you to think of the project as being a *collection of pacakges*, rather than \"your single package plus dependencies.\"  And remember... the top-level package in your project's DAG could end up as not-the-top-level in someone else's DAG.  Right now, Spack has now support for anything beyond packages; so people keep defaulting to the top-level package as their project.  Hence the desire to forward dependencies from it.\r\n\r\nI believe/hope that Spack Environments can go a long way to addressing this issue.  We should keep it in mind as we design Spack Environments further.\r\n\r\n2. Beyond that, the fundamental trade-off with Spack seems to be that you save time by not writing all the packages yourself --- but you have to spend more time (a) making your packages useful to others, at least if they're packages that others will want to use, and (b) chasing down problems introduced when others change packages, sometimes just with version upgrades.  I believe the trade-off is worth it.  But we could do better making this trade-off explicit in our docs (discussion sections), building best practices on package authorship.\r\n\r\n3.  I also believe we could do better, as a community, on developing shared practices on package writing.  It turns out to be a lot more complicated than just reading the Packaging Guide.  The fundamental assumption that needs to be jettisoned with Spack is the assumption that your package is the top of  the DAG.  I believe we should always work under the assumption that somebody else might come along and use our top-level package that we worked so hard on as a dependency for their even-higher-level package.\r\n\r\n\r\n> I would really like to address making variants more sane after we get the concretizer done.\r\n\r\nDo you have specific ideas on what ideas or mechanisms for saner variants might be enabled by the new concretizer?  I believe the biggest outstanding problem is forwarding through virtual packages --- and that's not an issue here.\r\n\r\nI have some variant upgrades we've discussed in the Issues... as soon as #2386 is merged, I want to start working on them.\r\n\r\n",
    "performed_via_github_app": null
}