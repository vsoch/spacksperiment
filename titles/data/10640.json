{
    "url": "https://api.github.com/repos/spack/spack/issues/10640",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/10640/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/10640/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/10640/events",
    "html_url": "https://github.com/spack/spack/issues/10640",
    "id": 411698446,
    "node_id": "MDU6SXNzdWU0MTE2OTg0NDY=",
    "number": 10640,
    "title": "How Spack Can Help Your Open Source Project",
    "user": {
        "login": "citibeth",
        "id": 1924215,
        "node_id": "MDQ6VXNlcjE5MjQyMTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1924215?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/citibeth",
        "html_url": "https://github.com/citibeth",
        "followers_url": "https://api.github.com/users/citibeth/followers",
        "following_url": "https://api.github.com/users/citibeth/following{/other_user}",
        "gists_url": "https://api.github.com/users/citibeth/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/citibeth/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/citibeth/subscriptions",
        "organizations_url": "https://api.github.com/users/citibeth/orgs",
        "repos_url": "https://api.github.com/users/citibeth/repos",
        "events_url": "https://api.github.com/users/citibeth/events{/privacy}",
        "received_events_url": "https://api.github.com/users/citibeth/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 446625544,
            "node_id": "MDU6TGFiZWw0NDY2MjU1NDQ=",
            "url": "https://api.github.com/repos/spack/spack/labels/documentation",
            "name": "documentation",
            "color": "0d5977",
            "default": true,
            "description": ""
        },
        {
            "id": 73908756,
            "node_id": "MDU6TGFiZWw3MzkwODc1Ng==",
            "url": "https://api.github.com/repos/spack/spack/labels/feature",
            "name": "feature",
            "color": "84b6eb",
            "default": false,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-02-19T00:53:27Z",
    "updated_at": "2019-02-21T02:49:24Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "Most of the time, we think about Spack in terms of helping users install stuff.  But it can also be helpful for upstream developers.  Why?  Because anyone who publishes an open source project these days will encounter an unending stream of \"I'm having trouble building/installing\" questions.  (See the NetCDF mailing lists, for example).  These questions typically fall into  a few common categories:\r\n\r\n1. Newbies who aren't familiar with the Autotools/CMake/Setuptools/etc. standard build system used for the project.  The upstream author is therefore asked to answer an unending stream of unnecessary basic questions on build systems.\r\n\r\n2. Questions about arcane compilers / OS / container / etc. combinations with which the upstream author has no familiarity.\r\n\r\nThe upstream author should not have to answer questions of type (1); and is not prepared to answer questions of type (2).  By referencing Spack, upstream authors can outsource these kinds of questions to the Spack community: type (1) will likely not come up because Spack does this stuff automatically; and type (2) will be more likely to find a response in a context that is not specific to a single package.\r\n\r\nTherefore, I'm proposing that we (at Spack) put together a standard text of \"build instructions\" that upstream authors can include in their docs.  These instructions basically ask users to (a) Understand that this package uses standard build tools that are documented elsewhere, (b) try Spack, (c) look at the Spack recipes if you really want to build by hand, and (d) post to the Spack forums if you still have problems.  This would be like an updated form of the `INSTALLING` docs that come with every Autotools-based package.\r\n\r\nSee below for sample text. Any thoughts?  Is this something we can integrate into Spack docs and convince upstream authors to cut-n-paste?\r\n\r\nInstalling Blitz\r\n================\r\n\r\nWe recommend that users consider using Spack to install Blitz++ (see\r\nbelow; use `spack install blitz`).  For those who enjoy spending hours\r\nupon hours installing software by hand...\r\n\r\nBlitz++ is distributed with a GNU Autotools build.  Autotools was\r\noriginally developed to address the non-portability of hand-built\r\nMakefiles.  It was a big step forward, and for the first time allowed\r\nusers to install programs on their own Unix/Linux system, without too\r\nmany hassles due to minor differences between Unices.  While\r\nfrequently easy to use for end users, Autotools is also arcane and\r\ndifficult to use.  It has since been supplanted by `CMake`, which\r\noffers a somewhat more straightforward way of doing things.  It is our\r\nrecommendation that any new projects are produced with CMake builds\r\n--- not Autotools or hand-built Makefiles.  See\r\n[here](https://devmanual.gentoo.org/general-concepts/autotools/index.html)\r\n--- or search around --- for more information on Autotools:\r\n\r\nNOTES:\r\n\r\n1. Autools-based tarballs are normally distributed with a\r\n`./configure` script.  This is most convenient for the user, since\r\nnothing special must be installed on the system for it to work.\r\nAutotools-based Git repositories normally do *not* contain the\r\n`./configure` script: because that script is a generated file, not an\r\noriginal source file.  Anyone checking out an Autotools-based project\r\nfrom a Git repository needs to run `autoreconf` to first generate the\r\n`./configure` file; this is a fundamental fact of life when using\r\nAutotools and Git.  Search around for instructions on how to do so.\r\n\r\nAuto-Builders: Spack\r\n=====================\r\n\r\nAlthough Autotools is not in itself particularly difficult to use,\r\nmodern open source software stacks frequently require dozens or even\r\nhundreds of packages for a particular project.  Blitz++ does not have\r\nany dependencies, and is therefore pretty \"easy\" to install; but\r\ntypical projects that involve Blitz++ could require the installation\r\nof many more packages.  Installing a dozen or more packages by hand is\r\nslow, error-prone, and must be re-done every time something\r\nfoundational changes (compiler or OS version) --- in other words, hand\r\ninstallation of packages is a waste of time.  Nobody hand-builds\r\nassembly code today either.  Some things are better automated.\r\n\r\n[Spack](https://spack.io) is an auto-installer that automates the\r\ninstallation (and re-installation) of packages.  People have\r\nsuccessfully used it to manage software stacks for particular projects\r\ninvolving over 100 packages --- which would previously have taken\r\nweeks for one person to complete by hand.  We recommend that people\r\ninterested in Blitz++ use Spack for installation, for the following\r\nreaosns:\r\n\r\n1. Spack already knows the intricacies of building and installing\r\nsoftware --- including Autotools, Autoreconf, CMake, dependency\r\nmanagement, compiler versions, shared libraries, etc.  This is arcane,\r\ntricky stuff that should not be foisted on everybody just because they\r\nwant to use open source software.\r\n\r\n1. Spack already knows the package-specific \"gotchas\" involved in\r\ninstalling any particular piece of software.  Many packages are quite\r\nstandard, and don't require much special knowledge beyond a general\r\nunderstanding of Autotools or CMake --- but many others have a variety\r\nof \"gotchas\": they require patches or workardounds for particular\r\nsituations, they use standard tools in non-standard ways, they have\r\nbugs that require patching, they involve a one-off hand-built\r\nMakefile; the list goes on.  Every package-specific \"gotcha\" requires\r\nminutes or hours of effort to understand when installing that package\r\n--- effort that does not help in installing any other package, nor\r\ndoes it help the next person installing the same package.  This is a\r\nbig waste of time.  Spack knows the \"gotchas\" for each package so you\r\ndon't have to.\r\n\r\n1. The use of Spack avoides the need for project authors (such as\r\nthose at Blitz++) to answer an unending stream of build questions,\r\nalmost all of which are entirely generic and have nothing to do with\r\nthe actual project.  If Spack fails on a particular package, and then\r\nquestions are asked on the Spack forum --- then people who spend every\r\nday on build system minutea will be there to help.\r\n\r\n1. Spack recipes provide a clear and concise explanation (in Python\r\ncode) of how to install a particular package.  For those who prefer to\r\ncontinue stone age traditions, inspection of the Spack package will\r\ntell exactly what is required to install a package by hand, including\r\nthe package-specific \"gotchas.\"\r\n\r\n\r\n\r\n",
    "performed_via_github_app": null
}