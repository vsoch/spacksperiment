{
    "url": "https://api.github.com/repos/spack/spack/issues/744",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/744/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/744/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/744/events",
    "html_url": "https://github.com/spack/spack/pull/744",
    "id": 145967521,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NjUyOTI3MjY=",
    "number": 744,
    "title": "feature : customization of modules from configuration files",
    "user": {
        "login": "alalazo",
        "id": 4199709,
        "node_id": "MDQ6VXNlcjQxOTk3MDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4199709?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/alalazo",
        "html_url": "https://github.com/alalazo",
        "followers_url": "https://api.github.com/users/alalazo/followers",
        "following_url": "https://api.github.com/users/alalazo/following{/other_user}",
        "gists_url": "https://api.github.com/users/alalazo/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/alalazo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/alalazo/subscriptions",
        "organizations_url": "https://api.github.com/users/alalazo/orgs",
        "repos_url": "https://api.github.com/users/alalazo/repos",
        "events_url": "https://api.github.com/users/alalazo/events{/privacy}",
        "received_events_url": "https://api.github.com/users/alalazo/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 57,
    "created_at": "2016-04-05T12:03:29Z",
    "updated_at": "2016-05-11T17:20:05Z",
    "closed_at": "2016-05-11T16:08:44Z",
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
        "url": "https://api.github.com/repos/spack/spack/pulls/744",
        "html_url": "https://github.com/spack/spack/pull/744",
        "diff_url": "https://github.com/spack/spack/pull/744.diff",
        "patch_url": "https://github.com/spack/spack/pull/744.patch"
    },
    "body": "##### Modifications :\n- [x] during module file generation all the dependencies can add variables to `run_env` (previously it was only extendee)\n- [x] it is possible to filter modifications to specific environment variables out of module files\n- [x] `autoload` and/or `prereq` in `tcl` module files\n- [x] `autoload` and/or `prereq` in `dotkit` module files\n- [x] it is possible to customize the environment modifications in modules\n- [x] it is possible to conditionally blacklist modules\n- [x] it is possible to use a naming scheme like in #498 and to issue conflicts in `tcl` modules\n- [x] regression tests on all the bugs found by @glennpj \n##### Example : filter modifications out of module files\n\nModifications to certain environment variables in module files are generated by default. Suppose you would like to avoid having `CPATH` and `LIBRARY_PATH` modified by your `dotkit` modules. Then a user `modules.yaml` like:\n\n``` yaml\nmodules:\n  dotkit:\n    all:\n      filter:\n        environment_blacklist: ['CPATH', 'LIBRARY_PATH']  # Exclude changes to any of these variables\n```\n\nwill generate `dotkit` module files that will not contain modifications to either `CPATH` or `LIBRARY_PATH` and `tcl` module files that instead will contain those modifications.\n##### Example : autoload direct dependencies in `tcl` module files\n\nThe following lines in `modules.yaml`:\n\n``` yaml\nmodules:\n  tcl:\n    all:\n      autoload: 'direct'\n```\n\nwill produce `tcl` module files that will automatically load their direct dependencies. Adding prerequisites could be done in a similar way : \n\n``` yaml\nmodules:\n  tcl:\n    all:\n      prerequisites: 'direct'\n```\n##### Example : customize module file entries\n\nIt's possible to customize the entries written in module files. For instance with:\n\n``` yaml\nmodules:\n  tcl:\n    all:\n      environment:\n        set: ['BAR,bar']\n    ^openmpi:: # Note the double ':'\n      environment:\n        set: ['BAR,baz']\n    zlib:\n      environment:\n        set: ['FOO,foo']\n    zlib%gcc@4.8:\n      environment:\n        set: ['FOOBAR,foobar']\n```\n\nwhat will happen is : \n- every module will have a `setenv BAR bar` line\n- unless the module depends on openmpi in which case `setenv BAR baz` ('::' overrides previous rules, to be consistent with what happens for different configuration sections)\n- anything that matches `zlib` will have  `setenv FOO foo`\n- anything that matches `zlib%gcc@4.8` will have  `setenv FOOBAR foobar`\n##### Example : don't generate modules for things that are built with the system compiler\n\nThe following configuration file : \n\n``` yaml\nmodules:\n  tcl:\n    whitelist: ['gcc', 'llvm']  # whitelist will have precedence over blacklist\n    blacklist: ['%gcc@4.4.7']\n```\n\nwill skip module file generation for anything that satisfies `%gcc@4.4.7`, with the exception of `gcc` and `llvm`.\n##### Example : customize the naming scheme and insert conflicts\n\nA configuration file like:\n\n``` yaml\nmodules:\n  tcl:\n    naming_scheme: '{name}/{version}-{compiler.name}-{compiler.version}'\n    all:\n      conflict: ['{name}', 'intel/14.0.1']\n```\n\nwill create module files that will conflict with `intel/14.0.1` and with the base directory of the same module (i.e. you cannot have two versions of the same things loaded at the same time). The conflict directive currently accepts as items : \n- string literals\n- string \"formats\" that match part of the dirname in `naming_scheme`\n",
    "performed_via_github_app": null
}