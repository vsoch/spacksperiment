{
    "url": "https://api.github.com/repos/spack/spack/issues/4164",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/4164/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/4164/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/4164/events",
    "html_url": "https://github.com/spack/spack/issues/4164",
    "id": 227281659,
    "node_id": "MDU6SXNzdWUyMjcyODE2NTk=",
    "number": 4164,
    "title": "Is it possible to remove architecture and compiler flags from the SHA1 hash ?",
    "user": {
        "login": "samfux84",
        "id": 11944875,
        "node_id": "MDQ6VXNlcjExOTQ0ODc1",
        "avatar_url": "https://avatars.githubusercontent.com/u/11944875?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/samfux84",
        "html_url": "https://github.com/samfux84",
        "followers_url": "https://api.github.com/users/samfux84/followers",
        "following_url": "https://api.github.com/users/samfux84/following{/other_user}",
        "gists_url": "https://api.github.com/users/samfux84/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/samfux84/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/samfux84/subscriptions",
        "organizations_url": "https://api.github.com/users/samfux84/orgs",
        "repos_url": "https://api.github.com/users/samfux84/repos",
        "events_url": "https://api.github.com/users/samfux84/events{/privacy}",
        "received_events_url": "https://api.github.com/users/samfux84/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2017-05-09T08:00:47Z",
    "updated_at": "2017-11-23T13:24:56Z",
    "closed_at": "2017-11-23T13:24:56Z",
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "We plan to distinguish instruction sets (sse4, avx, avx2) within a target (x86_64), such that we can have multiple installations of the same package on a shared file system, optimized for the different compute node types in our cluster (we have an inhomogeneous cluster and add on average 1 new hardware generation per year). An automounter script on the compute nodes would then be used to load the particular installation directory for a specific architecture (instruction set). There are two views in this approach. The sysadmin view (installation directories), and the user view (mountpoints).\r\n\r\nIf we for instance look at the Python 3.6.0 package, the 3 installation directories (bin directories) would then be (sysadmin view):\r\n\r\n```\r\n$spack/opt/spack/linux-centos7-x86_64_avx2/gcc-4.8.5/python-3.6.0-lmvbetshtmx36seaq2fbwrezrg5cn2zx/bin\r\n$spack/opt/spack/linux-centos7-x86_64_avx/gcc-4.8.5/python-3.6.0-ehzms6e7wjfs6xl73qr6qpkl5fue32gi/bin\r\n$spack/opt/spack/linux-centos7-x86_64_sse4/gcc-4.8.5/python-3.6.0-fyf3bemdndvyygcr6qsf7imqeelyb3t2/bin\r\n```\r\n\r\nThe automounter script on the compute node would then mount $spack/opt/spack/PLATFORM-OS-ARCH as /cluster/apps and these 3 directories would look like (user view):\r\n\r\n```\r\n/cluster/apps/gcc-4.8.5/python-3.6.0-lmvbetshtmx36seaq2fbwrezrg5cn2zx/bin\r\n/cluster/apps/gcc-4.8.5/python-3.6.0-ehzms6e7wjfs6xl73qr6qpkl5fue32gi/bin\r\n/cluster/apps/gcc-4.8.5/python-3.6.0-fyf3bemdndvyygcr6qsf7imqeelyb3t2/bin\r\n```\r\n\r\nIf a user is on a login node of the cluster, he needs to load modules, even though he does not know on which compute node (architecture) his job will run. The module file adds the path of the installation directory to the $PATH variable. At this point the information is incomplete, because I don't know which of the three paths (user view) should be added to the environment of the user. I would like to avoid that a user has to take a decision where his job will run, when he submits it, because the compute node should take care of mounting the proper installation directory.\r\n\r\nThe only possibility to have such a setup with incomplete information would be if the identifiers are not depending on the architecture and the compiler flags. In my opinion such a separation (excluding the architecture and the compiler flags from the SHA1 hash) would not lead to any conflict, as a compute node will only mount one installation tree (sse4, avx or avx2) at any time. \r\n\r\nIf the unique identifier would be the same for all architectures, then the user view for the Python bin directory would be:\r\n\r\n`/cluster/apps/gcc-4.8.5/python-3.6.0-lmvbetshtmx36seaq2fbwrezrg5cn2zx/bin`\r\n\r\nIn this case, the module would add this path to the user environment and depending on the node type, where the user job runs, the automounter would resolve this path to one of the 3 installation directories optimized for that particular architecture (a simple bash script is used to change the module file, such that it contains the path's of the user view and not the path's of the sysadmin view).\r\n\r\nComing back to the unique identifier. It contains information about\r\n\r\n- The version and variant of the package to be installed\r\n- The versions and variants of the dependencies of the package to be installed\r\n- The architecture for which the package is installed\r\n- The compiler flags\r\n\r\nFor distinguishing packages that only differ by the architecture and the compiler flags, there is already \"arch\" parameter from the \"spack install\" command (or the SPACK_TARGET_TYPE introduced by alalazo's      \r\n#3754 ). If there was a way to remove the architecture and the compiler flags from the SHA1 hash, then the unique identifier would only contain information about the software and dependencies, but not of the hardware on which the software is used/installed. As described above, there would be no collisions as a compute node will only mount one installation tree (sse4, avx or avx2).\r\n\r\nIn order to test this idea, I tried to comment out the parts in the spec.py file of spack, which add the architecture and the compiler flags to the yaml_text variable:\r\n\r\nlines 1337/1338:\r\n\r\n```\r\n        #if self.architecture:\r\n        #    d.update(self.architecture.to_dict())\r\n```\r\n\r\nline 1351:\r\n\r\n`        #params.update(sorted(self.compiler_flags.items()))`\r\n\r\nThen I tried to install a package (patch) with the modified spec.py:\r\n\r\n```\r\n[spackapps@lo-login-02 bin]$ spack install -v patch@2.7.5 %gcc@4.8.5 arch=linux-centos7-x86_64_avx2\r\n==> Error: Specs patch@2.7.5%gcc@4.8.5 cflags=\"-ftree-vectorize -O2 -march=core-avx2 -fPIC -mavx2\" cppflags=\"-ftree-vectorize -O2 -march=core-avx2 -fPIC -mavx2\" cxxflags=\"-ftree-vectorize -O2 -march=core-avx2 -fPIC -mavx2\"  arch=linux-centos7-x86_64_avx2 and patch@2.7.5%gcc@4.8.5 have the same SHA-1 prefix!\r\n```\r\n\r\nI don't know why spack reports a hash collision in this case.\r\n\r\nAny input/comment on this idea or the hash collision ?",
    "performed_via_github_app": null
}