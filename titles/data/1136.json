{
    "url": "https://api.github.com/repos/spack/spack/issues/1136",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/1136/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/1136/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/1136/events",
    "html_url": "https://github.com/spack/spack/issues/1136",
    "id": 162790274,
    "node_id": "MDU6SXNzdWUxNjI3OTAyNzQ=",
    "number": 1136,
    "title": "Easy installation of a git repo with a package.py in the root",
    "user": {
        "login": "DavidPoliakoff",
        "id": 4220361,
        "node_id": "MDQ6VXNlcjQyMjAzNjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4220361?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DavidPoliakoff",
        "html_url": "https://github.com/DavidPoliakoff",
        "followers_url": "https://api.github.com/users/DavidPoliakoff/followers",
        "following_url": "https://api.github.com/users/DavidPoliakoff/following{/other_user}",
        "gists_url": "https://api.github.com/users/DavidPoliakoff/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/DavidPoliakoff/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/DavidPoliakoff/subscriptions",
        "organizations_url": "https://api.github.com/users/DavidPoliakoff/orgs",
        "repos_url": "https://api.github.com/users/DavidPoliakoff/repos",
        "events_url": "https://api.github.com/users/DavidPoliakoff/events{/privacy}",
        "received_events_url": "https://api.github.com/users/DavidPoliakoff/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 466955297,
            "node_id": "MDU6TGFiZWw0NjY5NTUyOTc=",
            "url": "https://api.github.com/repos/spack/spack/labels/proposal",
            "name": "proposal",
            "color": "0e8a16",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 63,
    "created_at": "2016-06-28T21:20:21Z",
    "updated_at": "2018-12-17T18:08:34Z",
    "closed_at": "2018-12-17T18:08:34Z",
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Hey @citibeth @trws @adamjstewart \n\nWe were talking about this yesterday (#1108) . Bower lets you do the following\n\n```\nbower install [github link]\n```\n\nIt pulls a package.json out of the given repository and installs the dependencies and the package itself. This leads to a turnaround from \"I see a project that interests me\" to \"I have this package installed for my project\" on the order of five minutes. The spack equivalent is to... spack edit -f [desiredPackageName] and copy and paste from the github repo? In the absence of this feature, I'll be polishing up a bash script for this purpose (do not run this under any circumstances, it hasn't been vetted and I can think of ways to make it delete things you wouldn't want deleted)\n\n```\n#!/bin/env bash\necho $tarball\ncurl -L $1/tarball/master  | tar -xz */package.py\n#name of the downloaded package\npackagename=$(grep \"class.*Package\" */package.py | sed \"s,class ,,\" | sed \"s,[(].*,,\")\n#name of the folder I get from github\nfoldername=$(ls -d */)\nmv -f $foldername $packagename\n#make a package folder\nmkdir ../var/spack/repos/builtin/packages/$packagename\n#move the package into that folder\nmv -f $packagename/* ../var/spack/repos/builtin/packages/$packagename\nrm -r $packagename\n#install it\nspack install $packagename\n```\n\n(Run from a specific directory) I can point this at my test repo (https://github.com/DavidPoliakoff/trivial), whose only interesting feature is having a package.py in the root, and it will pull the package file out of the repo, make a directory for it in my spack repo, move the package.py into that directory, then install it.\n\nThis is a horrible way of achieving the goal, but it's what I'll use in projects I don't feel like putting up package PR's for until\n\n```\nspack [verb] [github link]\n```\n\nlets me install the contents of that repo using spack, using a package.py provided by that github repo. Essentially, this lets me turn the spack model on its head, instead of $SPACK_ROOT/var/spack/repos/builtin/packages/ being the place that says what packages exist, software packages can provide a description of how they should be packaged by spack, and commands can be run to pull them down.\n\nTODO's would be\n\n1) Pythonic, spacky implementation of this bash script (perhaps through a new verb, spack clone)\n2) Dependency handling. How can my repo depend on another repo? Perhaps syntax like (depends_on(get_github_package(\"[github URL]\"))\n3) Doing the same for hg, svn, tarballs\n\nBasically, Spack wants to have a repo (or set of repos) that tell it where software exists, and how to pull it down. This is a great model, but I also want software to be able to say \"here's how Spack can install me\" and have Spack be able to respond\n",
    "performed_via_github_app": null
}