{
    "url": "https://api.github.com/repos/spack/spack/issues/8823",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/8823/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/8823/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/8823/events",
    "html_url": "https://github.com/spack/spack/issues/8823",
    "id": 345518887,
    "node_id": "MDU6SXNzdWUzNDU1MTg4ODc=",
    "number": 8823,
    "title": "[RFC] make libunwind a virtual dependency",
    "user": {
        "login": "goxberry",
        "id": 321479,
        "node_id": "MDQ6VXNlcjMyMTQ3OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/321479?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/goxberry",
        "html_url": "https://github.com/goxberry",
        "followers_url": "https://api.github.com/users/goxberry/followers",
        "following_url": "https://api.github.com/users/goxberry/following{/other_user}",
        "gists_url": "https://api.github.com/users/goxberry/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/goxberry/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/goxberry/subscriptions",
        "organizations_url": "https://api.github.com/users/goxberry/orgs",
        "repos_url": "https://api.github.com/users/goxberry/repos",
        "events_url": "https://api.github.com/users/goxberry/events{/privacy}",
        "received_events_url": "https://api.github.com/users/goxberry/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 456144594,
            "node_id": "MDU6TGFiZWw0NTYxNDQ1OTQ=",
            "url": "https://api.github.com/repos/spack/spack/labels/virtual-dependencies",
            "name": "virtual-dependencies",
            "color": "0052cc",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2018-07-29T10:13:33Z",
    "updated_at": "2018-08-16T22:19:55Z",
    "closed_at": "2018-08-16T22:19:55Z",
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "### Summary\r\n\r\nThe \"non-GNU\" version of `libunwind` does not build on Darwin. However, LLVM bundles a `libunwind` implementation, and Apple's LLVM fork also provides a system `libunwind`. It should be possible to use either LLVM `libunwind` to satisfy a `libunwind` dependency, which motivates proposing a `libunwind` virtual dependency.\r\n\r\n### Expected Result\r\n\r\n```\r\nspack install mfem+libunwind\r\n# successful installation -- LLVM provides a libunwind that works for MFEM\r\n```\r\n\r\n### Actual Result\r\n\r\n```\r\n# spack attempts to install non-GNU libunwind; install crashes and burns because\r\n# native binary format on OS X is not ELF\r\noxberry1:~$ 3.2>spack install libunwind\r\n==> Installing libunwind\r\n# snip out the usual spack output\r\n\r\n118 errors found in build log:\r\n     262    libtool: compile:  /Users/oxberry1/spack/lib/spack/env/clang/clang -DHAVE_CONFIG_H -I. -I/Users/oxberry1/spack/var/spack/sta\r\n            ge/libunwind-1.2.1-ety77hbgddtgsm574hm3dmd77c57nopy/libunwind-1.2.1/src -I../include -I/Users/oxberry1/spack/var/spack/stage\r\n            /libunwind-1.2.1-ety77hbgddtgsm574hm3dmd77c57nopy/libunwind-1.2.1/include -I/Users/oxberry1/spack/var/spack/stage/libunwind-\r\n            1.2.1-ety77hbgddtgsm574hm3dmd77c57nopy/libunwind-1.2.1/include/tdep-x86_64 -I. -D_GNU_SOURCE -DNDEBUG -g -O2 -fexceptions -W\r\n            all -Wsign-compare -MT mi/Gfind_dynamic_proc_info.lo -MD -MP -MF mi/.deps/Gfind_dynamic_proc_info.Tpo -c mi/Gfind_dynamic_pr\r\n            oc_info.c  -fno-common -DPIC -o mi/.libs/Gfind_dynamic_proc_info.o\r\n# snip 109 lines\r\n >> 372    ./elfxx.h:63:30: error: use of undeclared identifier 'ELFMAG'\r\n     373      return (memcmp (ei->image, ELFMAG, SELFMAG) == 0\r\n     374                                 ^\r\n# snip 756 more lines\r\n```\r\n\r\n### Steps to reproduce the issue\r\n\r\nOn a Mac with macOS 10.12.6 (or probably any Mac)\r\n\r\n```console\r\n$ spack libunwind\r\n# Or generally, try to install anything that depends on `libunwind` with `clang`\r\n```\r\n\r\n### Proposed steps to resolve the issue\r\n\r\n- [x] make `libunwind` a virtual package (#8825)\r\n- [x] have the `llvm` package `provides('libunwind@0')` when `+internal_libunwind` (by analogy to the `elf` virtual package and `libelf`) (#8825)\r\n- [x] rename `libunwind` to `nongnu-libunwind` (#8825)\r\n- [x] add `conflicts('platform=darwin')` to `nongnu-libunwind` (#8824)\r\n- [x] have `nongnu-libunwind` package `provides('libunwind@1')` (by analogy to the `elf` virtual package and `elfutils`) (#8825)\r\n- [x] create an `apple-libunwind` placeholder package with an error-message-throwing `fetcher` that `provides('libunwind@0')` (by analogy to the `opengl` package) (#8825)\r\n- [x] add documentation suggesting Mac users add `apple-libunwind` to their `packages.yaml`; the `libs` property should point to `/usr/lib/system/libunwind.dylib`, and the `headers` property should point to `/usr/include/unwind.h` (#8825)\r\n- [x] add `libunwind` versions to packages that depend on `libunwind@1` (unknown)\r\n\r\n### Rationale: why make `libunwind` virtual? Why add versions & a placeholder package?\r\n\r\nTo the best of my knowledge, there are three `libunwind` implementations:\r\n\r\n* the non-GNU version currently implemented in `libunwind`\r\n* the version bundled in `llvm+internal_libunwind`\r\n* the version bundled with Apple's system LLVM\r\n\r\nA `libunwind` virtual package enables any one of these versions to satisfy a `libunwind@0` dependency. The version number is necessary due to differences between the non-GNU version and the LLVM versions. These differences are discussed in http://lists.llvm.org/pipermail/cfe-dev/2016-September/050649.html; in brief, the LLVM versions implement a base ABI, and the non-GNU version implements additional features. Because the non-GNU version implements the base ABI plus additional features, the proposal denotes the LLVM versions of `libunwind` as providing `libunwind@0` (base ABI) and the non-GNU version as providing `libunwind@1`, by analogy to the way `provides('elf')` currently works in `spack`. Most of the current `depends_on('libunwind')` dependencies would be transitioned to `depends_on('libunwind@0')`. If the non-GNU version is required, the dependency would be expressed as `depends_on('libunwind@1')`.\r\n\r\nThe placeholder package `apple-libunwind` is suggested to provide only the paths needed to `libunwind` and its header. Apple does not install all of the LLVM components in a common prefix, whereas the `llvm` package does, so an `apple-libunwind` placeholder package avoids the pitfalls that might arise if users attempted to add something like `llvm@9.0.0-apple` to `packages.yaml`.\r\n\r\n### Existing work\r\n\r\nThis issue has been discussed before in #7263 and #8483; a broader discussion of virtual package issues aggregated by @citibeth is in #7970. \r\n\r\nIn #7263, @v-dobrev proposed adding `libs` and `headers` properties to `libunwind` that return the paths `/usr/lib/system/libunwind.dylib` and `/usr/include/unwind.h`, respectively, and suggesting users add `libunwind` to their `packages.yaml`. It does not address the different ABIs provided by non-GNU `libunwind` versus LLVM `libunwind`. It also does not address `spack` installations of `llvm`.\r\n\r\nIn #8483, I submitted a kludgy patch to get around the bugs that arise when trying to `spack install mfem+libunwind` on Darwin. This patch does not address any of the broader issues above, but limits its scope to just the `mfem` package.\r\n\r\n### Why didn't you just submit a PR?\r\n\r\nSee #8824 and #8825. I implemented a short-term, limited-scope fix for just `mfem` in #8483, but I think this solution is more compatible with the idioms and philosophy of `spack`. The proposed changes also affect multiple packages, which is why I wanted to provide a longer explanation and start a conversation thread about it.",
    "performed_via_github_app": null
}