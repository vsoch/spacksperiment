{
    "url": "https://api.github.com/repos/spack/spack/issues/17169",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/17169/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/17169/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/17169/events",
    "html_url": "https://github.com/spack/spack/issues/17169",
    "id": 641656911,
    "node_id": "MDU6SXNzdWU2NDE2NTY5MTE=",
    "number": 17169,
    "title": "Extend existing gitlab.spack.io check to test PRs from forks",
    "user": {
        "login": "scottwittenburg",
        "id": 6527504,
        "node_id": "MDQ6VXNlcjY1Mjc1MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6527504?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/scottwittenburg",
        "html_url": "https://github.com/scottwittenburg",
        "followers_url": "https://api.github.com/users/scottwittenburg/followers",
        "following_url": "https://api.github.com/users/scottwittenburg/following{/other_user}",
        "gists_url": "https://api.github.com/users/scottwittenburg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/scottwittenburg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/scottwittenburg/subscriptions",
        "organizations_url": "https://api.github.com/users/scottwittenburg/orgs",
        "repos_url": "https://api.github.com/users/scottwittenburg/repos",
        "events_url": "https://api.github.com/users/scottwittenburg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/scottwittenburg/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 1491154932,
            "node_id": "MDU6TGFiZWwxNDkxMTU0OTMy",
            "url": "https://api.github.com/repos/spack/spack/labels/gitlab",
            "name": "gitlab",
            "color": "f7b094",
            "default": false,
            "description": "Issues related to gitlab integration"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-06-19T02:21:25Z",
    "updated_at": "2020-09-21T21:44:57Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Currently gitlab.spack.io runs the E4S pipeline any time a PR is created and the associated branch was pushed to the main spack repo, as well as when any PR is merged to `develop`.   In the coming weeks, this functionality will be extended so that the pipeline runs on every PR, even those from forks.\r\n\r\nTo prepare for this, this issue is about keeping track of the tasks that remain to be done.  Until gitlab extends support to PRs from forks on their mirrored projects (see this [issue](https://gitlab.com/gitlab-org/gitlab/-/issues/218712) for details), we are implementing the feature ourselves using custom pr/branch syncing between github and gitlab.  This first set of tasks has to do with that portion of the work.\r\n\r\n- [x] Wrap up conversion of sync script from bash to python, [here](https://github.com/spack/spack-infrastructure/pull/33)\r\n- [x] Add to the above cron job a pass that will post statuses back to each associated PR\r\n- [ ] Add to the above cron job synchronization of other branches on which we want pipelines to run (e.g. `develop`, release branches, etc)\r\n- [ ] This pr/branch sync is currently a cron job running in our kubernetes cluster, but should become a GitHub app and associated service.\r\n- [ ] Delete the current CI/CD only `gitlab.spack.io/spack/spack` repo and replace it with a simple mirror\r\n\r\nSpack pipelines need a fully functional path in the absence of secrets, which is how PR pipelines (especially once PRs from forks are supported) will run.  Secrets include AWS credentials for pushing binaries to the remote mirror, auth token for certain communications with CDash, and most importantly, the package signing key.  The following items relate to this portion of the work.\r\n\r\n- [ ] Pull out the public part of the signing key and make it available in the binary mirror.  From the pipeline, we need to be able to trust that key whenever we run.\r\n  - Alternatively, the the spack/spack repo could have several key variables defined and choose the `SPACK_SIGNING_KEY` it sends to the spack/e4s repo from those, depending on whether it's running a `develop` or PR pipeline.\r\n- [ ] Currently during PR pipelines, spack already avoids attempting to push binaries to the public mirror, but the binaries we put into the artifacts buildcache for downstream jobs to consume as dependencies are still being signed.  We need to either create those buildcaches unsigned or have some throwaway signing key for them.\r\n- [x] Allow spack to use multiple keys for verifying packages.\r\n  - verified we can put a secret key and any number of public keys in the `SPACK_SIGNING_KEY` env var\r\n  - but maybe creating unsigned binaries for PR pipelines is simpler as we don't need to expose any \"secret\" in that case\r\n- [x] Depending on which path we take in the item above, we need to make sure we can install both officially signed binaries from the public mirror, and the binaries in the artifacts buildcache.\r\n- [x] Validate that the public mirror permissions are such that we can read from it without any authorization, so PR pipelines can get binary dependencies from there.\r\n- [ ] Currently we re-register the E4S build group with CDash on each pipeline run, which requires an authorization token.  This registration is useful because it determines the set of packages associated with the build group, and any time spack changes, it could introduce a new dependency somewhere which should be tracked with the buildgroup.  Since the token can be used to do anything an admin can do on CDash (delete projects, etc), we need to decide how to handle this.\r\n- [ ] When we finish all the above tasks, we need to move all secrets from `gitlab.spack.io/spack/e4s` to `gitlab.spack.io/spack/spack` and then expose them only on protected branches, using our trigger jobs from spack/spack to pass the secrets along to spack/e4s.\r\n\r\nDAG pruning to reduce costs\r\n\r\n- [ ] only schedule sub-dags that changed\r\n\r\nSecurity hardening of gitlab.spack.io in preparation for having many users interact with the server to browse pipelines, etc.\r\n\r\n- [ ] Make sure user registration requires email confirmation",
    "performed_via_github_app": null
}