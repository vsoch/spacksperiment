{
    "url": "https://api.github.com/repos/spack/spack/issues/2550",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/2550/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/2550/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/2550/events",
    "html_url": "https://github.com/spack/spack/issues/2550",
    "id": 194745773,
    "node_id": "MDU6SXNzdWUxOTQ3NDU3NzM=",
    "number": 2550,
    "title": "External package support is generally broken",
    "user": {
        "login": "krafczyk",
        "id": 6449564,
        "node_id": "MDQ6VXNlcjY0NDk1NjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6449564?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/krafczyk",
        "html_url": "https://github.com/krafczyk",
        "followers_url": "https://api.github.com/users/krafczyk/followers",
        "following_url": "https://api.github.com/users/krafczyk/following{/other_user}",
        "gists_url": "https://api.github.com/users/krafczyk/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/krafczyk/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/krafczyk/subscriptions",
        "organizations_url": "https://api.github.com/users/krafczyk/orgs",
        "repos_url": "https://api.github.com/users/krafczyk/repos",
        "events_url": "https://api.github.com/users/krafczyk/events{/privacy}",
        "received_events_url": "https://api.github.com/users/krafczyk/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 455855856,
            "node_id": "MDU6TGFiZWw0NTU4NTU4NTY=",
            "url": "https://api.github.com/repos/spack/spack/labels/external-packages",
            "name": "external-packages",
            "color": "c5def5",
            "default": false,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
        "login": "alalazo",
        "id": 4199709,
        "node_id": "MDQ6VXNlcjQxOTk3MDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4199709?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/alalazo",
        "html_url": "https://github.com/alalazo",
        "followers_url": "https://api.github.com/users/alalazo/followers",
        "following_url": "https://api.github.com/users/alalazo/following{/other_user}",
        "gists_url": "https://api.github.com/users/alalazo/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/alalazo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/alalazo/subscriptions",
        "organizations_url": "https://api.github.com/users/alalazo/orgs",
        "repos_url": "https://api.github.com/users/alalazo/repos",
        "events_url": "https://api.github.com/users/alalazo/events{/privacy}",
        "received_events_url": "https://api.github.com/users/alalazo/received_events",
        "type": "User",
        "site_admin": false
    },
    "assignees": [
        {
            "login": "alalazo",
            "id": 4199709,
            "node_id": "MDQ6VXNlcjQxOTk3MDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4199709?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alalazo",
            "html_url": "https://github.com/alalazo",
            "followers_url": "https://api.github.com/users/alalazo/followers",
            "following_url": "https://api.github.com/users/alalazo/following{/other_user}",
            "gists_url": "https://api.github.com/users/alalazo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alalazo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alalazo/subscriptions",
            "organizations_url": "https://api.github.com/users/alalazo/orgs",
            "repos_url": "https://api.github.com/users/alalazo/repos",
            "events_url": "https://api.github.com/users/alalazo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alalazo/received_events",
            "type": "User",
            "site_admin": false
        }
    ],
    "milestone": null,
    "comments": 16,
    "created_at": "2016-12-10T05:15:14Z",
    "updated_at": "2019-05-28T03:14:14Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "External package support is currently working in only a minimal fashion.\r\n\r\nLet me illustrate this with an extensive example. I'll then follow up with a proposal for moving forward.\r\n\r\n**Extensive Example**\r\n\r\nRelated to my issue in #2191, I have several mpi installations on my university's computing cluster. These I've specified in my `~/.spack/packages.yaml` file like so (non mpi entries represent my preferred versions and variants for those packages):\r\n\r\n```\r\npackages:\r\n  hdf5:\r\n    version: [1.8.16]\r\n    variants: +mpi +szip\r\n  py-h5py:\r\n    variants: +mpi\r\n  python:\r\n    variants: +ucs4\r\n  py-cython:\r\n    version: [0.25.1]\r\n  openmpi:\r\n    modules:\r\n      openmpi@1.4%gcc: openmpi/1.4-gcc\r\n      openmpi@1.4%intel: openmpi/1.4-intel\r\n      openmpi@1.6.4%gcc@4.7.1: openmpi/1.6.4-gcc-4.7.1\r\n      openmpi@1.6.4%intel@13.1: openmpi/1.6.4-intel-13.1\r\n      openmpi@1.6.5%gcc@4.7.1: openmpi/1.6.5-gcc-4.7.1\r\n      openmpi@1.6.5%intel@14.0: openmpi/1.6.5-intel-14.0\r\n      openmpi@1.8.4%gcc@4.9.2: openmpi/1.8.4-gcc-4.9.2\r\n      openmpi@1.8.4%intel@15.0: openmpi/1.8.4-intel-15.0\r\n    buildable: False\r\n  mpich:\r\n    modules:\r\n      mpich@3.1.3%gcc@4.7.1: mpi/mpich/3.1.3-gcc-4.7.1\r\n    buildable: False\r\n  mvapich2:\r\n    modules:\r\n      mvapich2@1.6%gcc: mvapich2/1.6-gcc\r\n      mvapich2@1.6%gcc+debug: mvapich2/1.6-gccdebug\r\n      mvapich2@1.6%intel: mvapich2/1.6-intel\r\n      mvapich2@1.9b%intel@13.1: mvapich2/1.9b-intel-13.1\r\n      mvapich2@2.0b%gcc@4.7.1: mvapich2/2.0b-gcc-4.7.1\r\n      mvapich2@2.0b%intel@14.0: mvapich2/2.0b-intel-14.0\r\n      mvapich2@2.1rc1%gcc@4.9.2: mvapich2/2.1rc1-gcc-4.9.2\r\n      mvapich2@2.1rc1%intel@15.0: mvapich2/2.1rc1-intel-15.0\r\n    buildable: False\r\n  all:\r\n    compiler: [gcc@4.9.2]\r\n    providers:\r\n      mpi: [mvapich2@2.1rc1]\r\n```\r\n\r\nNow you'll notice at the end that I've specified that the only provider for mpi I want to allow for the moment is `mvapich2@2.1rc1`. However when I run `spack providers` I get the following:\r\n\r\n```\r\nspack providers mpi\r\n    intel-parallel-studio@cluster:+mpi  mpich@1:  mpich@3:  mvapich2@1.9  mvapich2@2.0:  openmpi@1.6.5  openmpi@1.7.5:  openmpi@2.0.0:\r\n\r\n```\r\n\r\nAfter looking at the builtin packages, it seems these are all the different builtin packages which provide mpi.\r\n\r\nWhat I would expect however is for the only entry to be `mvapich2@2.1rc1`.\r\n\r\nIf `spack providers` only displayed the results from the builtin repository that would be one thing. However it turns out that this really reflects what providers spack thinks are available. This means that unless you directly specify that a package should depend on one of these external packages spack will fail to realize that it shouldn't be building it!\r\n\r\nFor instance, I'm trying to get `py-yt` running on this cluster. `py-yt` depends on `py-h5py` which depends on `hdf5`. Now I want a specific version of hdf5 with a specific version of mpi which is already on the cluster so being as pedantic as possible I try to get around these problems like so:\r\n\r\n1. Install `hdf5` how I want it `hdf5@1.8.16+mpi+szip^mvapich2@2.1rc1`. This works.\r\n2. Get the hash of `hdf5`\r\n3. Install `py-h5py` depending on that specific hash of `hdf5` that I just built. `spack install py-h5py^/mzyuler^python@2.7.12`. This fails.\r\n\r\n(ideally based on my `~/.spack/packages.yaml` file this ought to be accomplished just how I expect with `spack install hdf5` only)\r\n\r\nspack realizes that mvapich2 is part of the dependency tree and ignores the fact that the package is listed as `buildable: False` in `~/.spack/packages.yaml` as well as that it exists as an external package.\r\n\r\n**Proposal for moving forward**\r\n\r\nI was poking around the concretizer and provider code to better understand how they work. It seems that packages have a 'namespace' which for packages in the builtin repository is `builtin`. providers for each namespace (`builtin` is the only namespace as far as I know) then providers get an index which goes here: `~/.spack/cache/providers`\r\n\r\nMy proposal is to add a namespace `external` which would contain all external packages mentioned in `~/.spack/packages.yaml`. These would then be treated as fully installed packages which can participate in the DAG.\r\n\r\nI expect that my understanding of `spack` is lacking. Thus my proposal probably needs some serious tweaks. Please help me hone this proposal into something sensible we can go about building and adding to `spack` to make dealing with external packages more manageable.",
    "performed_via_github_app": null
}