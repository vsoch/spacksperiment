{
    "url": "https://api.github.com/repos/spack/spack/issues/2873",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/2873/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/2873/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/2873/events",
    "html_url": "https://github.com/spack/spack/issues/2873",
    "id": 201908096,
    "node_id": "MDU6SXNzdWUyMDE5MDgwOTY=",
    "number": 2873,
    "title": "Losing Users: Perception that Spack is Too Complicated",
    "user": {
        "login": "citibeth",
        "id": 1924215,
        "node_id": "MDQ6VXNlcjE5MjQyMTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1924215?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/citibeth",
        "html_url": "https://github.com/citibeth",
        "followers_url": "https://api.github.com/users/citibeth/followers",
        "following_url": "https://api.github.com/users/citibeth/following{/other_user}",
        "gists_url": "https://api.github.com/users/citibeth/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/citibeth/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/citibeth/subscriptions",
        "organizations_url": "https://api.github.com/users/citibeth/orgs",
        "repos_url": "https://api.github.com/users/citibeth/repos",
        "events_url": "https://api.github.com/users/citibeth/events{/privacy}",
        "received_events_url": "https://api.github.com/users/citibeth/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 521903231,
            "node_id": "MDU6TGFiZWw1MjE5MDMyMzE=",
            "url": "https://api.github.com/repos/spack/spack/labels/story",
            "name": "story",
            "color": "d93f0b",
            "default": false,
            "description": null
        },
        {
            "id": 521903170,
            "node_id": "MDU6TGFiZWw1MjE5MDMxNzA=",
            "url": "https://api.github.com/repos/spack/spack/labels/user-experience",
            "name": "user-experience",
            "color": "bfdadc",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 50,
    "created_at": "2017-01-19T16:27:09Z",
    "updated_at": "2021-06-18T03:35:19Z",
    "closed_at": "2021-06-18T03:35:19Z",
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "@tgamblin @becker33 @adamjstewart @mathstuf @davydden @scheibelp @eschnett @alalazo \r\n\r\nWe were having a conversation yesterday about the Spack user experience --- specifically, whether the process of incrementally adding features, independent of focus on overall design, is beneficial in the long run.  Here's a funny video from Microsoft on that issue:\r\n\r\nhttps://www.youtube.com/watch?v=EUXnJraKM3k\r\n\r\nWell... just today I came across a user who is quite interested in Spack --- but after looking at it has come to believe that Spack is too complex (see below).  So he's thinking of doing a roll-your-own poor man's Spack himself.  This is exactly what I mean when I say we should think about Spack from the user's perspective.\r\n\r\nWhy does this person think Spack is over-complicated?  We have gone to great lengths to ensure that Spack works out-of-the-box.  That it auto-detects your compilers.  That you don't have to do extra bootstrap stuff before you're ready to build.\r\n\r\nBut that work has not translated for this user.  I can only guess as to the reason... maybe the problem is the way we're presenting things.  Spack might be looking increasingly like a \"look at this great feature\" kind of system.  Which, at least for this potential user, is off-putting.\r\n\r\nMaybe the problem is I forgot to share the `spack.io` website with this potential user (maybe content should be removed from the README.md file on the Spack GitHub site, redirecting people to `spack.io` instead).\r\n\r\nThis person is a developer.  Maybe we need to think through the \"Spack documentation experience\" from the developer (vs. sysadmin) point of view.\r\n\r\nSphinx is nice.  But maybe we need to split out the Tutotiral / Getting Started section into an even easier, even nicer presentation that occupies front-and-center.\r\n\r\nCleaning up what happens when you first run `spack --help` I think is also an important step.\r\n\r\nWhatever the problem is, I believe that somehow, we can do a better job of presenting essentially the same Spack that we have today, but in a simpler more streamlined way --- one that shows people that Spack is simple, easy, and can solve their problems.  If people have that \"wow\" moment, they will start using Spack.  Then, and only then, will they become motivated to learn about the complexity under the hood.  And then we can solve their problem with the full, more detailed Spack documentation.\r\n\r\n\r\n> ---------- Forwarded message ----------\r\n> From: ardi <ardillasdelmonte@gmail.com>\r\n> Date: Thu, Jan 19, 2017 at 8:57 AM\r\n> Subject: Re: [CMake] Managing a local installation of cmake-built open source packages\r\n> To: elizabeth.fischer@columbia.edu\r\n> Cc: CMake MailingList <cmake@cmake.org>\r\n> \r\n> \r\n> Thanks a lot, Elisabeth, Domen, Guillaume, and Konstantin,\r\n> \r\n> I believe spack is the closest to what I need. However, all these\r\n> solutions (hunter, conan, spack...) have perhaps their strongest focus\r\n> in packaging, dependencies, automatic downloads, etc... while I prefer\r\n> to do all such tasks myself. I prefer to not have packages, just\r\n> download the source in the original developer provided form, untar it,\r\n> and to even build it on my own, following the developer instructions.\r\n> In other words, I want to be as little intrusive as possible, keeping\r\n> the original distribution file as is. Once it's built, then it's the\r\n> install phase what is critical, because a previous version of the\r\n> package might need to be uninstalled, or there might even be files\r\n> with equal names across different packages, as Domen pointed out.\r\n> \r\n> As I said, I think spack is the closest. However, I feel it tries to\r\n> automate too much the build. Yes, it gives you a lot of customization\r\n> options, but I'm not sure the complexity is worth the effort.\r\n> \r\n> However, I think I can follow the spack design without using spack:\r\n> Install every project on a different prefix. Then just keep on the\r\n> environment CMAKE_INSTALL_PREFIX set to a colon separated list of all\r\n> prefixes of all installed projects, and that's it.\r\n> \r\n> Uninstalling is trivial: delete the installation directory.\r\n> Keeping several versions of the same package is trivial too: just set\r\n> the currently used version in CMAKE_INSTALL_PREFIX\r\n> Updating is trivial as well: Install new version to a new prefix, and\r\n> either keep or delete the installation directory of the previous\r\n> version, and update CMAKE_INSTALL_PREFIX accordingly.\r\n> \r\n> Of course spack does all this automatically for you, but it does a lot\r\n> more, and, as I said, I'm not sure the added complexity and automation\r\n> is worth the effort.\r\n> \r\n> I think that by using this approach, I could reconsider moving to\r\n> spack in the future (I'd likely have to install all packages from\r\n> scratch if I move to spack later, but my directory hierarchy will end\r\n> up being the same, so all the work I do now -writing code and\r\n> projects- would be reusable without modification).\r\n> \r\n> Thanks a lot for all your ideas!!\r\n> \r\n> \r\n> On Thu, Jan 19, 2017 at 12:25 AM, Elizabeth A. Fischer\r\n> <elizabeth.fischer@columbia.edu> wrote:\r\n> > Ardi,\r\n> >\r\n> > What you describe is pretty much what Spack does.  I would take a look at\r\n> > it, see if it meets your needs.  Chances are, at least some of the packages\r\n> > you need are already included in Spack:\r\n> >\r\n> > https://github.com/llnl/spack\r\n> >\r\n> > -- Elizabeth\r\n> >\r\n> > On Wed, Jan 18, 2017 at 12:39 PM, ardi <ardillasdelmonte@gmail.com> wrote:\r\n> >>\r\n> >> Hi,\r\n> >>\r\n> >> I want to install (on UNIX-like systems) a collection of open source\r\n> >> packages which use cmake as the build tool, but I need the\r\n> >> installation to be performed in a local directory (inside my home\r\n> >> directory), and I wish convenient updating to new versions of the\r\n> >> packages.\r\n> >>\r\n> >> I didn't arrive to a convincing solution, so any advice will be welcome.\r\n> >>\r\n> >> Here are my thoughts:\r\n> >>\r\n> >> The trivial solution is of course to directly install to a non-root\r\n> >> prefix when invoking cmake, but, however, this isn't well suited for\r\n> >> updating a previous installation of the packages (building and\r\n> >> installing a new version will only overwrite files that have the same\r\n> >> name, but it will keep old files that no longer exist in the new\r\n> >> version, cluttering the local installation directory with no longer\r\n> >> needed and mismatched files).\r\n> >>\r\n> >> A possibility would be to keep a copy of install_manifest.txt whenever\r\n> >> I install a package, and remembering to always run 'xargs rm <\r\n> >> install_manifest.txt' before installing a different version of a\r\n> >> previously installed package.\r\n> >>\r\n> >> But keeping the install_manifest.txt of each installed package (and\r\n> >> using it before updating a package) looks like a too-manual task,\r\n> >> candidate to some kind of automation.\r\n> >>\r\n> >> Another (perhaps wiser) possibility would be to use cpack for creating\r\n> >> either a RPM or DEB, and then use the corresponding package manager to\r\n> >> install the package. But this has problems too: most package managers\r\n> >> assume a / root installation directory. Also, I use several OSs: OSX,\r\n> >> Linux, and some BSDs, and I'm not sure that either the RPM nor the DEB\r\n> >> pkg managers will work flawlessly across all the OSs I use.\r\n> >>\r\n> >> What would you recommend here?\r\n> >>\r\n> >> Thanks a lot!\r\n",
    "performed_via_github_app": null
}