{
    "url": "https://api.github.com/repos/spack/spack/issues/17987",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/17987/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/17987/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/17987/events",
    "html_url": "https://github.com/spack/spack/issues/17987",
    "id": 676887704,
    "node_id": "MDU6SXNzdWU2NzY4ODc3MDQ=",
    "number": 17987,
    "title": "Problem with compiler selection Intel vs AMD; allow more specific targets in compilers.yaml",
    "user": {
        "login": "payerle",
        "id": 19287807,
        "node_id": "MDQ6VXNlcjE5Mjg3ODA3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19287807?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/payerle",
        "html_url": "https://github.com/payerle",
        "followers_url": "https://api.github.com/users/payerle/followers",
        "following_url": "https://api.github.com/users/payerle/following{/other_user}",
        "gists_url": "https://api.github.com/users/payerle/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/payerle/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/payerle/subscriptions",
        "organizations_url": "https://api.github.com/users/payerle/orgs",
        "repos_url": "https://api.github.com/users/payerle/repos",
        "events_url": "https://api.github.com/users/payerle/events{/privacy}",
        "received_events_url": "https://api.github.com/users/payerle/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 73908754,
            "node_id": "MDU6TGFiZWw3MzkwODc1NA==",
            "url": "https://api.github.com/repos/spack/spack/labels/bug",
            "name": "bug",
            "color": "fc2929",
            "default": true,
            "description": null
        },
        {
            "id": 446615268,
            "node_id": "MDU6TGFiZWw0NDY2MTUyNjg=",
            "url": "https://api.github.com/repos/spack/spack/labels/compilers",
            "name": "compilers",
            "color": "f9d0c4",
            "default": false,
            "description": null
        },
        {
            "id": 446615135,
            "node_id": "MDU6TGFiZWw0NDY2MTUxMzU=",
            "url": "https://api.github.com/repos/spack/spack/labels/configuration",
            "name": "configuration",
            "color": "bfd4f2",
            "default": false,
            "description": null
        },
        {
            "id": 1433532775,
            "node_id": "MDU6TGFiZWwxNDMzNTMyNzc1",
            "url": "https://api.github.com/repos/spack/spack/labels/triage",
            "name": "triage",
            "color": "ed9793",
            "default": false,
            "description": "The issue needs to be prioritized"
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-08-11T13:41:25Z",
    "updated_at": "2020-08-31T11:07:47Z",
    "closed_at": "2020-08-31T11:07:47Z",
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Spack does not appear to readily allow one to specify a different compiler to use for AMD vs Intel builds.  This is problematic because I am seeing cases wherein compiling a package on AMD using a gcc compiler built on Intel platform fails, but the same compilation (same spack command) succeeds if I replace the compiler in compilers.yaml with the same version of gcc built on AMD system.\r\n\r\nHowever, I am unable to have single compilers.yaml with both Intel and AMD built compilers and have the correct compiler selected based on the CPU microarchitecture.  If I include both AMD and Intel built gccs (same version) in compilers.yaml, they both have to have the 'target' field set to 'x86_64', and the first one occuring in compilers.yaml is used for both architectures.  If I try to set the 'target' field to something more specific (e.g. 'zen'), I get an error like\r\n==> Error: the \"target\" field in compilers.yaml accepts only target families [replace \"zen\" with \"x86_64\" in \"gcc@8.4.0\" specification]\r\nwhenever concretizing a spec.\r\n\r\nAlthough it would be nice if one only needed to match compilers to the target family, this does not appear to be the case, as described below:\r\n\r\nI have an Intel (mostly ivybridge) based cluster to which an AMD zen2 system was added, all running RHEL8. I built gcc@8.4.0 on x86_64 system using spack, added it to compilers.yaml, and \r\nsuccessfully used to build many packages (including pkg-config) on both x86_64 and ivybridge\r\nsystems.  When I tried to reproduce the software stack on the zen2 system, I quickly ran into issues.\r\nWhile trying to build pkg-config@0.29.2 +internal_glib %gcc@8.4.0\r\nusing the x86_64 (Intel) built compiler, it failed (the configuration of the internal glib failed with an error complaining that I needed to use a 64 bit compiler like gcc).\r\nHowever, I discovered if I built gcc@8.4.0 on the zen2 system (using the same spack configuration/variants/etc used to build on the Intel systems) and replaced the compiler in\r\ncompilers.yaml with the AMD built one, and the same spack command succeeded.\r\n\r\nFurther investigation revealed that some of the header files installed/used by the two different gcc\r\nbuilds were different.  In particular, during a configuration test for the internal glib in pkg-config to determine the sizeof the long data type, the differences in the \r\n$INSTALL_ROOT/gcc-8.4.0-$HASH/lib/gcc/x86_64-pc-linux-gnu/8.4.0/include-fixed/bits/statx.h\r\nheaders (around line 38, the stanza after the GCC PR 80005 comment) were causing the test code to fail to compile, resulting in errors further down in the configure script.\r\n\r\nWhile I believe the configure script has issues, the fact is that using the Intel built gcc on an AMD system potentially results in gcc having trouble processing its own header files, and I expect this will cause widespread issues in building a software stack on AMD.  I would like to force the use of an AMD built compiler on the AMD systems, but this cannot be readily done in compilers.yaml.  (I can do it using environments, but that is non-ideal/somewhat messy.)\r\n\r\n\r\n<!-- Please include the output of `spack debug report` -->\r\n\r\n<!-- If you have any relevant configuration detail (custom `packages.yaml` or `modules.yaml`, etc.) you can add that here as well. -->\r\n\r\n### Additional information\r\n\r\n<!-- These boxes can be checked by replacing [ ] with [x] or by clicking them after submitting the issue. -->\r\n- [x] I have run `spack debug report` and reported the version of Spack/Python/Platform\r\n- [x] I have searched the issues of this repo and believe this is not a duplicate\r\n- [x] I have run the failing commands in debug mode and reported the output\r\n\r\n<!-- We encourage you to try, as much as possible, to reduce your problem to the minimal example that still reproduces the issue. That would help us a lot in fixing it quickly and effectively!\r\n\r\nIf you want to ask a question about the tool (how to use it, what it can currently do, etc.), try the `#general` channel on our Slack first. We have a welcoming community and chances are you'll get your reply faster and without opening an issue.\r\n\r\nOther than that, thanks for taking the time to contribute to Spack! -->\r\n",
    "performed_via_github_app": null
}