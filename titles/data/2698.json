{
    "url": "https://api.github.com/repos/spack/spack/issues/2698",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/2698/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/2698/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/2698/events",
    "html_url": "https://github.com/spack/spack/pull/2698",
    "id": 198222759,
    "node_id": "MDExOlB1bGxSZXF1ZXN0OTk4MDAwMjM=",
    "number": 2698,
    "title": "Spackenv: Script to create environments based on `spack module loads`",
    "user": {
        "login": "citibeth",
        "id": 1924215,
        "node_id": "MDQ6VXNlcjE5MjQyMTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1924215?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/citibeth",
        "html_url": "https://github.com/citibeth",
        "followers_url": "https://api.github.com/users/citibeth/followers",
        "following_url": "https://api.github.com/users/citibeth/following{/other_user}",
        "gists_url": "https://api.github.com/users/citibeth/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/citibeth/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/citibeth/subscriptions",
        "organizations_url": "https://api.github.com/users/citibeth/orgs",
        "repos_url": "https://api.github.com/users/citibeth/repos",
        "events_url": "https://api.github.com/users/citibeth/events{/privacy}",
        "received_events_url": "https://api.github.com/users/citibeth/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 446620495,
            "node_id": "MDU6TGFiZWw0NDY2MjA0OTU=",
            "url": "https://api.github.com/repos/spack/spack/labels/WIP",
            "name": "WIP",
            "color": "ededed",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2016-12-31T07:35:29Z",
    "updated_at": "2017-11-21T06:20:14Z",
    "closed_at": "2017-11-21T06:20:14Z",
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
        "url": "https://api.github.com/repos/spack/spack/pulls/2698",
        "html_url": "https://github.com/spack/spack/pull/2698",
        "diff_url": "https://github.com/spack/spack/pull/2698.diff",
        "patch_url": "https://github.com/spack/spack/pull/2698.patch"
    },
    "body": "The Problem\r\n============\r\n\r\nI've been able to build my stuff with Spack, but was still having problems assembling a proper set of `spack module loads` commands to use it.  The reason is because I need to support multiple configurations / subsets of my overall system.  For example, they might be:\r\n\r\n1. Just the climate model\r\n2. Just the ice model and coupler\r\n3. Just the Python stuff needed for data processing\r\n4. Any combination of (1), (2) and (3)\r\n5. The kitchen sink\r\n6. Potentially develop or release versions of the above (where some packages in the develop version are set up by hand using `spack setup`).\r\n\r\nThis PR makes it easier to create *environment scripts* --- that is, files full of `module load` commands --- based on this variety of needs.  It is built as a separate Python executable program that calls Spack multiple times (to ensure robustness, so I don't hit bugs like #2666).\r\n\r\nOne serious problem up till now is that `spack load`, `spack module loads`, etc. do not have the benefit of concretization; they are resolved completely differently from `spack install` (although concretization is slow, so doing it in `spack load` would be a mixed blessing).  The problem is that once you've used a spec for `spack install`, there is no easy / foolproof / automatable way to subsequently issue a `spack load` command for that module.  If you have many similar installed versions in your Spack, that could be a real problem.  This PR gets around that issue by tracking the hash that Spack uses to install the original spec, and then issuing a `spack module loads` command for that hash.\r\n\r\n@tgamblin @eschnett  @mathstuf @adamjstewart @becker33 @hartzell \r\nComments welcome, this software is \"hot off the press.\"  I'm especially interested in design ideas at this point.  My guess is this script is a little \"far out,\" and will need some iteration on design.  I'm also hoping to get better / more robust file formats, but am not sure of what would be best.\r\n\r\nBrief Docs\r\n========\r\n\r\nThe user creates *environment files* (`.env`) in a `src` directory.  `spackenv` then turns them into *environment scripts* (no extension) in an `env` directory.  Users can then `source` those scripts in their Bash shell.\r\n\r\nHere is a sample environment file:\r\n```\r\nenvsrc/test.env\r\n----------------\r\n# `spack install` args : `spack module loads` args\r\n#\r\n# spack=spack --config ~/config-scopes/icebin-develop\r\n\r\n--only dependencies libpciaccess\r\nemacs : --dependencies\r\n```\r\nThis environment consists of emacs (and all its dependencies), plus the dependencies for libpciaccess (but not their dependencies).  Syntactically, it works as so:\r\n\r\n1. The `spack=` directive gives the Spack command that `spackenv` is to use.  This is to allow for environments to use different configurations (eg `packages.yaml` files; see #2686).\r\n\r\n2. Each line consists of two parts, separated by a colon.  The first part is command line arguments to be sent to `spack install`.  The second part (optional) is command line arguments to be sent to `spack module loads`.\r\n\r\n`spackenv` has two sub-commands: `spackenv install` and `spackenv loads`.\r\n\r\nspackenv install\r\n--------------------\r\n\r\n`spackenv install` runs `spack install` once per line in the `.env` file.  It creates a `.log` files with Spack's output, and tees it to STDOUT as well.  Here is the log for a typical `spackenv install` command; the contents of `~/env/test.log` is also displayed to STDOUT here:\r\n```\r\n$ spackenv --src ~/envsrc --env ~/env install test\r\n[+]  a6hzhtg  libpciaccess@0.13.4%gcc@4.9.3 arch=linux-centos7-x86_64\r\n[+]  q5ztpkl      ^libtool@2.4.6%gcc@4.9.3 arch=linux-centos7-x86_64\r\n[+]  kmufpwm          ^m4@1.4.17%gcc@4.9.3+sigsegv arch=linux-centos7-x86_64\r\n[+]  ytewamh              ^libsigsegv@2.10%gcc@4.9.3 arch=linux-centos7-x86_64\r\n[+]  zmirozy      ^pkg-config@0.29.1%gcc@4.9.3+internal_glib arch=linux-centos7-x86_64\r\n[+]  36ec63z      ^util-macros@1.19.0%gcc@4.9.3 arch=linux-centos7-x86_64\r\n\r\nSPACKENV BEGIN libpciaccess\r\n==> util-macros is already installed in /home2/rpfische/spack5/opt/spack/linux-centos7-x86_64/gcc-4.9.3/util-macros-1.19.0-36ec63zxfqtarj4wzuztzeckh6th53kp\r\nSPACKENV INSTALLED util-macros/36ec63zxfqtarj4wzuztzeckh6th53kp\r\n==> libtool is already installed in /home2/rpfische/spack5/opt/spack/linux-centos7-x86_64/gcc-4.9.3/libtool-2.4.6-q5ztpklzt3emeq3p7rqguoqyht5lac36\r\nSPACKENV INSTALLED libtool/q5ztpklzt3emeq3p7rqguoqyht5lac36\r\n==> pkg-config is already installed in /home2/rpfische/spack5/opt/spack/linux-centos7-x86_64/gcc-4.9.3/pkg-config-0.29.1-zmirozyvyf5jfalrz5vgge2uydgjtviq\r\nSPACKENV INSTALLED pkg-config/zmirozyvyf5jfalrz5vgge2uydgjtviq\r\n[+]  xmvbkdg  emacs@25.1%gcc@4.9.3~X toolkit=gtk arch=linux-centos7-x86_64\r\n[+]  h66uwdb      ^ncurses@6.0%gcc@4.9.3 arch=linux-centos7-x86_64\r\n\r\nSPACKENV BEGIN emacs\r\n==> emacs is already installed in /home2/rpfische/spack5/opt/spack/linux-centos7-x86_64/gcc-4.9.3/emacs-25.1-xmvbkdgpwvy4sedr2tl4a2yrx4togbiu\r\nSPACKENV INSTALLED emacs/xmvbkdgpwvy4sedr2tl4a2yrx4togbiu\r\n```\r\nThis is just typical Spack output.  The extra lines starting with `SPACKENV` are parsed later by `spackenv`.  Note that if stuff was already installed (for real or via `spack setup`), `spackenv install` won't build anything.\r\n\r\n`spackenv loads`\r\n-------------------\r\n\r\nThe script of `module load` commands is generated by `spackenv loads`.  Once `spackenv install` has run successfully, the user can run `spackenv loads`, as follows:\r\n```\r\n$ spackenv --src ~/envsrc --env ~/env loads test\r\nspack --config ~/config-scopes/icebin-develop module loads util-macros/36ec63zxfqtarj4wzuztzeckh6th53kp\r\nspack --config ~/config-scopes/icebin-develop module loads libtool/q5ztpklzt3emeq3p7rqguoqyht5lac36\r\nspack --config ~/config-scopes/icebin-develop module loads pkg-config/zmirozyvyf5jfalrz5vgge2uydgjtviq\r\nspack --config ~/config-scopes/icebin-develop module loads --dependencies emacs/xmvbkdgpwvy4sedr2tl4a2yrx4togbiu\r\n```\r\nHere, `spackenv` shows you what commands it's running.  It also produces the file `~/env/test`, which looks like:\r\n```\r\n$ cat ~/env/test\r\n# util-macros@1.19.0%gcc@4.9.3 arch=linux-centos7-x86_64\r\nmodule load util-macros-1.19.0-gcc-4.9.3-36ec63z\r\n# libtool@2.4.6%gcc@4.9.3 arch=linux-centos7-x86_64\r\nmodule load libtool-2.4.6-gcc-4.9.3-q5ztpkl\r\n# pkg-config@0.29.1%gcc@4.9.3+internal_glib arch=linux-centos7-x86_64\r\nmodule load pkg-config-0.29.1-gcc-4.9.3-zmirozy\r\n# ncurses@6.0%gcc@4.9.3 arch=linux-centos7-x86_64\r\nmodule load ncurses-6.0-gcc-4.9.3-h66uwdb\r\n# emacs@25.1%gcc@4.9.3~X toolkit=gtk arch=linux-centos7-x86_64\r\nmodule load emacs-25.1-gcc-4.9.3-xmvbkdg\r\n```\r\nThis file may now be used to load up the specified environment in a Bash shell.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n[This PR depends on #2664...]\r\n",
    "performed_via_github_app": null
}