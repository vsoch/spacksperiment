{
    "url": "https://api.github.com/repos/spack/spack/issues/8059",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/8059/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/8059/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/8059/events",
    "html_url": "https://github.com/spack/spack/issues/8059",
    "id": 321327728,
    "node_id": "MDU6SXNzdWUzMjEzMjc3Mjg=",
    "number": 8059,
    "title": "Error path in spec.py causes mainline path to use phantom provider",
    "user": {
        "login": "djfitzgerald",
        "id": 38731008,
        "node_id": "MDQ6VXNlcjM4NzMxMDA4",
        "avatar_url": "https://avatars.githubusercontent.com/u/38731008?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/djfitzgerald",
        "html_url": "https://github.com/djfitzgerald",
        "followers_url": "https://api.github.com/users/djfitzgerald/followers",
        "following_url": "https://api.github.com/users/djfitzgerald/following{/other_user}",
        "gists_url": "https://api.github.com/users/djfitzgerald/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/djfitzgerald/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/djfitzgerald/subscriptions",
        "organizations_url": "https://api.github.com/users/djfitzgerald/orgs",
        "repos_url": "https://api.github.com/users/djfitzgerald/repos",
        "events_url": "https://api.github.com/users/djfitzgerald/events{/privacy}",
        "received_events_url": "https://api.github.com/users/djfitzgerald/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 73908754,
            "node_id": "MDU6TGFiZWw3MzkwODc1NA==",
            "url": "https://api.github.com/repos/spack/spack/labels/bug",
            "name": "bug",
            "color": "fc2929",
            "default": true,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-05-08T20:04:12Z",
    "updated_at": "2018-05-08T20:26:28Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Issue #7901 exposes a bug in the way that `_expand_virtual_packages()` in `spack/lib/spack/spack/spec.py` handles exceptions raised by `copy.normalize(force=True)`.\r\n\r\nMy environment is a POWER9 node running RHEL 7.4, with a clean Spack installation and no external packages installed.  My `~/.spack/linux/packages.yaml` file contains the following:\r\n```\r\npackages:\r\n  spectrum-mpi:\r\n    paths: \r\n        spectrum-mpi@10.02.00 arch=linux-rhel7-ppc64le: /opt/ibm/spectrum_mpi\r\n    version: [10.02.00]\r\n    buildable: false\r\n  essl:\r\n    paths:\r\n        essl@6.1%xl_r arch=linux-rhel7-ppc64le: /opt/ibmmath/essl/6.1\r\n    version: [6.1]\r\n    buildable: false\r\n  all:\r\n    providers:\r\n      mpi: [spectrum-mpi]\r\n      blas: [essl]\r\n```\r\nThe `spectrum-mpi` and `essl` external packages were both installed via `spack install`.  The `essl` package provides `blas` but unlike most other `blas` providers does not also provide `lapack`.  \r\n\r\nWhen executing `spack spec petsc%xl_r^essl`, I get the following error message:\r\n```\r\n--> spack spec petsc%xl_r^essl\r\nInput spec\r\n--------------------------------\r\npetsc%xl_r\r\n    ^essl\r\n\r\nConcretized\r\n--------------------------------\r\n==> Error: Multiple providers found for 'blas': ['essl@6.1%xl_r@16.1 fflags=\"-qzerosize\" ~cuda~ilp64 threads=openmp arch=linux-rhel7-ppc64le', 'veclibfort@0.4.2%xl_r@16.1 fflags=\"-qzerosize\" +shared arch=linux-rhel7-ppc64le']\r\n```\r\nThis error message does not accurately describe the actual problem, that `essl` only provides `blas` but not `lapack` while `petsc` requires both virtual dependencies and Spack doesn't seem to be able to use `blas` from one package while taking `lapack` from another package (issue #7901 ).  Furthermore, the `lapack` package hasn't even been installed.\r\n\r\nExamining the Spack source code, I was able to determine the cause of this incorrect error message.  When executing `spack spec petsc%xl_r^essl`, control was eventually passed to the `concretize(self)` function in `spack/lib/spack/spack/spec.py`.  At the beginning of the function is this code block:\r\n\r\n```\r\n        changed = True\r\n        force = False\r\n\r\n        while changed:\r\n            pdb.set_trace()\r\n            changes = (self.normalize(force),\r\n                       self._expand_virtual_packages(),\r\n                       self._concretize_helper())\r\n            changed = any(changes)\r\n            force = True\r\n\r\n        for s in self.traverse():\r\n                . . . .\r\n```\r\n\r\nOn entry, `self` contains a variable that is set to the spec given to `spack spec` by the user, in this case `spack spec petsc%xl_r^essl`.\r\n\r\nKey to what's going on is that `while` loop.  On its first iteration, it creates a 3-tuple named `changes`.  Each component of this tuple is a boolean variable indicating whether the call to its corresponding function resulted in `self` changing.\r\n\r\n`self.normalize(force)` begins by normalizing `spack spec petsc%xl_r^essl` into `petsc%xl_r^bzip2^essl^lapack^ncurses^openssl^pkgconfig^python@2.6:2.8^readline^sqlite^zlib`and returning `True`.\r\n\r\nNext, `self._expand_virtual_packages()` is called to recursively process the virual packages in that now-normalized spec, replacing them with providers and normalizng it all again to include the provider's (possibly virtual) dependencies.\r\n\r\nWhen it goes to process `lapack`, its call to `spack.concretizer.choose_virtual_or_external(spec)` returns the following list of candidates from the repository: `[openblas, atlas, intel-mkl, intel-parallel-studio+mkl, netlib-lapack, veclibfort]`.  None of these are currently installed on the system.  `_expand_virtual_packages()` processes each of these candidates, substiuting them for `lapack` in a copy of the top-level spec and then calling `normalize()` to consoldate any duplicate providers or duplicate provider dependencies and merge their constraints.  But each of these candidates provide both `lapack` and `blas`, which is already being supplied by the installed `essl`.  So the call for `normalize()` will fail for each and every candidate.\r\n\r\nNow consider the following code from `_expand_virtual_packages()`:\r\n\r\n```\r\n                    # Try the replacements in order, skipping any that cause\r\n                    # satisfiability problems.\r\n                    for replacement in candidates:\r\n                        if replacement is spec:\r\n                            break\r\n\r\n                        # Replace spec with the candidate and normalize\r\n                        copy = self.copy()\r\n                        copy[spec.name]._dup(replacement, deps=False)\r\n\r\n                        try:\r\n                            # If there are duplicate providers or duplicate\r\n                            # provider deps, consolidate them and merge\r\n                            # constraints.\r\n                            copy.normalize(force=True)\r\n                            break\r\n                        except SpecError:\r\n                            # On error, we'll try the next replacement.\r\n                            continue\r\n\r\n```\r\n\r\nWhen the loop is on the last member of the replacement candidates list generated by `spack.concretizer.choose_virtual_or_external(spec)` and an exception is raised, we still hit the `continue` statement, even though there are no further replacements to consider.  The value of `replacement` remains the last replacement value checked (in this case, `veclibfort`) and gets substituted in for the spec being checked at the top-level spec.  We return to the `while` loop back up in `concretize()`, and call `self._concretize_helper()` to concretize the spec, `veclibfort` and all.  `changes = (True, True, True)` so `changed` becomes `True` and we find ourselves repeating the while loop.\r\n\r\nThe second time around in that loop, we find ourselves calling `self.normalize(force=True)`.  Except the value of `self` is a fully concretized spec containing `veclibfort`.  `self.normalze()` calls a similar path to the one we had earlier, that resulted in the `MultipleProviderError` exceptions but where `_expand_virtual_packages(self)` would catch and ignore it, `concretize()` propagates it back to its caller where it eventually gets displayed on the user's terminal:\r\n\r\n```\r\n==> Error: Multiple providers found for 'blas': ['essl@6.1%xl_r@16.1 fflags=\"-qzerosize\" ~cuda~ilp64 threads=openmp arch=linux-rhel7-ppc64le', 'veclibfort@0.4.2%xl_r@16.1 fflags=\"-qzerosize\" +shared arch=linux-rhel7-ppc64le']\r\n```",
    "performed_via_github_app": null
}