{
    "url": "https://api.github.com/repos/spack/spack/issues/3036",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/3036/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/3036/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/3036/events",
    "html_url": "https://github.com/spack/spack/issues/3036",
    "id": 205508630,
    "node_id": "MDU6SXNzdWUyMDU1MDg2MzA=",
    "number": 3036,
    "title": "openblas: segmentation fault with Intel 16.0.3",
    "user": {
        "login": "weijianwen",
        "id": 908249,
        "node_id": "MDQ6VXNlcjkwODI0OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/908249?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/weijianwen",
        "html_url": "https://github.com/weijianwen",
        "followers_url": "https://api.github.com/users/weijianwen/followers",
        "following_url": "https://api.github.com/users/weijianwen/following{/other_user}",
        "gists_url": "https://api.github.com/users/weijianwen/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/weijianwen/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/weijianwen/subscriptions",
        "organizations_url": "https://api.github.com/users/weijianwen/orgs",
        "repos_url": "https://api.github.com/users/weijianwen/repos",
        "events_url": "https://api.github.com/users/weijianwen/events{/privacy}",
        "received_events_url": "https://api.github.com/users/weijianwen/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 446616547,
            "node_id": "MDU6TGFiZWw0NDY2MTY1NDc=",
            "url": "https://api.github.com/repos/spack/spack/labels/build-error",
            "name": "build-error",
            "color": "ff3300",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 11,
    "created_at": "2017-02-06T07:48:11Z",
    "updated_at": "2019-12-05T17:19:19Z",
    "closed_at": "2019-12-05T17:19:19Z",
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Spack failed to patch openblas 0.2.15. The same error messages arise when I tried to patch it manually.\r\n\r\nThis patch is generated by git. I am not sure if incompatability between `diff` and `git diff` lead to this issue. Similar issue happen to OpenMPI 2.0.1. In #2962  , I replaced the original git-generated patch file with one generated locally with `diff`.\r\n\r\n```\r\n% spack install openblas@0.2.15 %intel@16.0.3\r\n==> Installing openblas\r\n==> Using cached archive: /tmp/rpm/spack_source_cache/openblas/openblas-0.2.15.tar.gz\r\n==> Already staged openblas-0.2.15-m6w5vfvkcstbmw6pcgwb6w6ovsljsuge in /home/rpm/spack/var/spack/stage/openblas-0.2.15-m6w5vfvkcstbmw6pcgwb6w6ovsljsuge\r\n==> Patching failed last time. Restaging.\r\n==> Staging archive: /home/rpm/spack/var/spack/stage/openblas-0.2.15-m6w5vfvkcstbmw6pcgwb6w6ovsljsuge/v0.2.15.tar.gz\r\n==> Applied patch openblas_icc.patch\r\n1 out of 1 hunk FAILED -- saving rejects to file Makefile.system.rej\r\n1 out of 2 hunks FAILED -- saving rejects to file getarch.c.rej\r\n==> Patch make.patch failed.\r\n==> Error: ProcessError: Command exited with status 1:\r\n    '/usr/bin/patch' '-s' '-p' '1' '-i' '/home/rpm/spack/var/spack/repos/builtin/packages/openblas/make.patch'\r\n/home/rpm/spack/lib/spack/spack/package.py:1020, in do_patch:\r\n     967      def do_patch(self):\r\n     968          \"\"\"Calls do_stage(), then applied patches to the expanded tarball if they\r\n     969             haven't been applied already.\"\"\"\r\n     970          if not self.spec.concrete:\r\n     971              raise ValueError(\"Can only patch concrete packages.\")\r\n     972\r\n     973          # Kick off the stage first.\r\n     974          self.do_stage()\r\n     975\r\n     976          # Package can add its own patch function.\r\n     977          has_patch_fun = hasattr(self, 'patch') and callable(self.patch)\r\n     978\r\n     979          # If there are no patches, note it.\r\n     980          if not self.patches and not has_patch_fun:\r\n     981              tty.msg(\"No patches needed for %s\" % self.name)\r\n     982              return\r\n     983\r\n     984          # Construct paths to special files in the archive dir used to\r\n     985          # keep track of whether patches were successfully applied.\r\n     986          archive_dir = self.stage.source_path\r\n     987          good_file = join_path(archive_dir, '.spack_patched')\r\n     988          no_patches_file = join_path(archive_dir, '.spack_no_patches')\r\n     989          bad_file = join_path(archive_dir, '.spack_patch_failed')\r\n     990\r\n     991          # If we encounter an archive that failed to patch, restage it\r\n     992          # so that we can apply all the patches again.\r\n     993          if os.path.isfile(bad_file):\r\n     994              tty.msg(\"Patching failed last time. Restaging.\")\r\n     995              self.stage.restage()\r\n     996                                                                                                   [22/156]\r\n     997          self.stage.chdir_to_source()\r\n     998\r\n     999          # If this file exists, then we already applied all the patches.\r\n     1000         if os.path.isfile(good_file):\r\n     1001             tty.msg(\"Already patched %s\" % self.name)\r\n     1002             return\r\n     1003         elif os.path.isfile(no_patches_file):\r\n     1004             tty.msg(\"No patches needed for %s\" % self.name)\r\n     1005             return\r\n     1006\r\n     1007         # Apply all the patches for specs that match this one\r\n     1008         patched = False\r\n     1009         for spec, patch_list in self.patches.items():\r\n     1010             if self.spec.satisfies(spec):\r\n     1011                 for patch in patch_list:\r\n     1012                     try:\r\n     1013                         patch.apply(self.stage)\r\n     1014                         tty.msg('Applied patch %s' % patch.path_or_url)\r\n     1015                         patched = True\r\n     1016                     except:\r\n     1017                         # Touch bad file if anything goes wrong.\r\n     1018                         tty.msg('Patch %s failed.' % patch.path_or_url)\r\n     1019                         touch(bad_file)\r\n  >> 1020                         raise\r\n     1021\r\n     1022         if has_patch_fun:\r\n     1023             try:\r\n     1024                 self.patch()\r\n     1025                 tty.msg(\"Ran patch() for %s\" % self.name)\r\n     1021\r\n     1022         if has_patch_fun:\r\n     1023             try:\r\n     1024                 self.patch()\r\n     1025                 tty.msg(\"Ran patch() for %s\" % self.name)\r\n     1026                 patched = True\r\n     1027             except:\r\n     1028                 tty.msg(\"patch() function failed for %s\" % self.name)\r\n     1029                 touch(bad_file)\r\n     1030                 raise\r\n     1031\r\n     1032         # Get rid of any old failed file -- patches have either succeeded\r\n     1033         # or are not needed.  This is mostly defensive -- it's needed\r\n     1034         # if the restage() method doesn't clean *everything* (e.g., for a repo)\r\n     1035         if os.path.isfile(bad_file):\r\n     1036             os.remove(bad_file)\r\n     1037\r\n     1038         # touch good or no patches file so that we skip next time.\r\n     1039         if patched:\r\n     1040             touch(good_file)\r\n     1041         else:\r\n     1042             touch(no_patches_file)\r\n```\r\n\r\n```\r\n$ tar xzvpf /tmp/rpm/spack_source_cache/openblas/openblas-0.2.15.tar.gz\r\n$ cd OpenBLAS-0.2.15\r\n$ patch -s -p 1 -i /home/rpm/spack/var/spack/repos/builtin/packages/openblas/make.patch\r\n1 out of 1 hunk FAILED -- saving rejects to file Makefile.system.rej\r\n1 out of 2 hunks FAILED -- saving rejects to file getarch.c.rej\r\n```\r\n\r\n```\r\n$ head -2 /home/rpm/spack/var/spack/repos/builtin/packages/openblas/make.patch\r\ndiff --git a/Makefile.system b/Makefile.system\r\nindex b89f60e..2dbdad0 100644\r\n```",
    "performed_via_github_app": null
}