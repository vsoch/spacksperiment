{
    "url": "https://api.github.com/repos/spack/spack/issues/8632",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/8632/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/8632/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/8632/events",
    "html_url": "https://github.com/spack/spack/issues/8632",
    "id": 337726122,
    "node_id": "MDU6SXNzdWUzMzc3MjYxMjI=",
    "number": 8632,
    "title": "setup_dependent_environment overwritten by module-defined external compiler",
    "user": {
        "login": "mgsternberg",
        "id": 31289496,
        "node_id": "MDQ6VXNlcjMxMjg5NDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/31289496?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mgsternberg",
        "html_url": "https://github.com/mgsternberg",
        "followers_url": "https://api.github.com/users/mgsternberg/followers",
        "following_url": "https://api.github.com/users/mgsternberg/following{/other_user}",
        "gists_url": "https://api.github.com/users/mgsternberg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mgsternberg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mgsternberg/subscriptions",
        "organizations_url": "https://api.github.com/users/mgsternberg/orgs",
        "repos_url": "https://api.github.com/users/mgsternberg/repos",
        "events_url": "https://api.github.com/users/mgsternberg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mgsternberg/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 446645732,
            "node_id": "MDU6TGFiZWw0NDY2NDU3MzI=",
            "url": "https://api.github.com/repos/spack/spack/labels/build-environment",
            "name": "build-environment",
            "color": "bfdadc",
            "default": false,
            "description": null
        },
        {
            "id": 446615268,
            "node_id": "MDU6TGFiZWw0NDY2MTUyNjg=",
            "url": "https://api.github.com/repos/spack/spack/labels/compilers",
            "name": "compilers",
            "color": "f9d0c4",
            "default": false,
            "description": null
        },
        {
            "id": 446632829,
            "node_id": "MDU6TGFiZWw0NDY2MzI4Mjk=",
            "url": "https://api.github.com/repos/spack/spack/labels/modules",
            "name": "modules",
            "color": "fef2c0",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 9,
    "created_at": "2018-07-03T02:44:26Z",
    "updated_at": "2018-09-06T00:28:40Z",
    "closed_at": "2018-09-06T00:28:40Z",
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "## Problem\r\n\r\nIn Spack, a compiler definition that uses a `module:` token can interfere with or nullify any environment variable defined by `setup_dependent_environment()` or `setup_dependent_package()` of a package upstream in the DAG.\r\n\r\n## Question\r\n\r\nHow does one get around this, with the fewest assumptions and least _a priori_ knowledge?\r\n\r\n* Can one defer calling the `setup_dependent_*` hooks until _after_ the compiler is loaded?\r\n\r\n  If I'm not mistaken, that's the canonical way of doing things outside of Spack. I can see why Spack would load compilers last, perhaps to largely (though not entirely) guarantee a consistent compiler environment?\r\n\r\n* Blacklist \"known\" variables for `module load` in the specific situation of loading a compiler module? \u2013\u00a0I think that could only cure specific symptoms.\r\n\r\n* Have the user modify the module that defines the compiler? \u2013\u00a0Ditto for symptoms-only, and I'd say that's impractical for many users.\r\n\r\n  On my own cluster, that's what I had done, if unrelated to Spack: I create modulefiles for `intel-parallel-studio` by a script from `psxevars.sh` but _excised_ any MPI variables and paths and spirits those away into a separate `impi` package. This avoided a hit from the main\u00a0example that follows:\r\n\r\n## Main Example: I_MPI_ROOT\r\n\r\nThe present issue crystallized from the root cause for the failure in issue #8410, which concerns `$I_MPI_ROOT`, defined by both `intel-parallel-studio` (any edition) and `intel-mpi`. \r\n\r\nConsider the scenario where a user runs:\r\n```\r\nspack install clientpkg %intel ^intel-mpi\r\n```\r\nand where the user has in `compilers.yaml`:\r\n``` yaml\r\n- compiler:\r\n    \u2026\r\n    spec:       intel@18.0.3\r\n    # Module provided externally or perhaps even internally by Spack:\r\n    modules:    [intel/18]\r\n    paths:\r\n        \u2026\r\n```\r\n\r\nThen, there are two failure modes:\r\n\r\n### Failure mode 1: MPI Runtime vs. MPI Development version\r\n\r\nWhen `intel-parallel-studio` is `@composer.*` or `@professional.*`, it includes an MPI runtime, and therefore sets `I_MPI_ROOT`. This value supersedes any specific value or the internal default\u00a0if unset for any prerequisite `^intel-mpi` version.\r\n\r\nWhen compiling a client package, `mpicc` etc. from `intel-mpi` will error out due to missing static libs only found under `$I_MPI_ROOT` of `intel-mpi`, but not that of `intel-parallel-studio`. Sadly, that information is buried in `config.log`. The user sees the rather more dramatic message:\r\n```\r\nconfigure: error: C compiler cannot create executables\r\n```\r\n\r\n### Failure mode 2: Silent version overshadowing\r\nWhen `intel-parallel-studio` is `@cluster.*`, a version mismatch occurs for MPI components: In the eyes of the user and Spack, the client package is compiled with `intel-mpi@foo`, whereas `mpicc` (which is from `intel-mpi@foo`) will take its libs etc. from `intel-parallel-studio`.\r\n\r\nDisconcertingly, this will occur _silently_.\r\n\r\nNow, a user would not typically need or use `^intel-mpi` when one has `%intel-parallel-studio@cluster.*`, but Spack will let you do it. It may not be clear to a new user that it's typically not needed, and it's bad for advanced users who specifically choose a different MPI version.\r\n\r\n## Other affected packages: MKL, \u2026\r\n\r\nThe same is true for the other `intel-foo` library-style packages, of which `intel-mkl` is most critical.\r\n\r\nThe MKL\u00a0_is_ provided by all studio versions, so failure mode 1. does not occur, but failure mode 2. might, especially when the user has no access to newer compilers but does for the MKL, which has been available under a \"simplified\" (no-cost) license since 2017.\r\n\r\n## Variable tracing\r\nHere's a more detailed tracing of the MPI variables for the case discussed in  #8410 :\r\n```\r\nspack --debug -v -v install -v -v hdf5@1.10.2+mpi ^intel-mpi\r\n```\r\n\r\nGives (formatted for readability):\r\n```\r\n==> Installing hdf5\r\n\r\n==> setup_package.setup_dependent_package:\r\n    spec 'intel-mpi@2018. ...' received .mpi* properties:\r\n    {\r\n\t'MPICC':   '.../intel-mpi/2018.3.222-intel-18.0.3/.../intel64/bin/mpiicc',\r\n\t'MPICXX':  '.../intel-mpi/2018.3.222-intel-18.0.3/.../intel64/bin/mpiicpc',\r\n\t'MPIF77':  '.../intel-mpi/2018.3.222-intel-18.0.3/.../intel64/bin/mpiifort',\r\n\t'MPIF90':  '.../intel-mpi/2018.3.222-intel-18.0.3/.../intel64/bin/mpiifort'\r\n\r\n\t'MPIFC':   '.../intel-mpi/2018.3.222-intel-18.0.3/.../intel64/bin/mpiifort',\r\n    }\r\n...\r\n==> setup_dependent_environment._setup_dependent_env_callback.mpi_setup_dependent_environment:\r\n    adding to spack_env:\r\n    {\r\n\t'MPICC':      '.../intel-mpi/2018.3.222-intel-18.0.3/.../intel64/bin/mpiicc',\r\n\t'MPICXX':     '.../intel-mpi/2018.3.222-intel-18.0.3/.../intel64/bin/mpiicpc',\r\n\t'MPIF77':     '.../intel-mpi/2018.3.222-intel-18.0.3/.../intel64/bin/mpiifort',\r\n\t'MPIF90':     '.../intel-mpi/2018.3.222-intel-18.0.3/.../intel64/bin/mpiifort',\r\n\r\n\t'I_MPI_CC':   '.../lib/spack/env/intel/icc',\r\n\t'I_MPI_CXX':  '.../lib/spack/env/intel/icpc',\r\n\t'I_MPI_F77':  '.../lib/spack/env/intel/ifort'\r\n\t'I_MPI_F90':  '.../lib/spack/env/intel/ifort',\r\n\t'I_MPI_FC':   '.../lib/spack/env/intel/ifort',\r\n\t'I_MPI_ROOT': '.../.../intel-mpi/2018.3.222-intel-18.0.3/Hipwooo/compilers_and_libraries_2018.3.222/linux/mpi',\r\n    }\r\n\r\n\r\n==> '/usr/bin/modulecmd' 'python' 'load' 'intel-parallel-studio/composer.2018.3/intel-18.0.3/Hnd7rbb'\r\n...\r\n```\r\n\r\n.. and fails with:\r\n```\r\n  >> 33    configure: error: in `/tmp/stern/spack-stage/spack-stage-MQP6Az/hdf5-1.10.2':\r\n  >> 34    configure: error: C compiler cannot create executables\r\n```\r\n\r\n\r\n```\r\n$ module show intel-parallel-studio/composer.2018.3/intel-18.0.3/Hnd7rbb | sed 's,[ \\t:]\\+/,\\n\\t/,g'\r\n```\r\n(formatted for readability):\r\n* MPI:\r\n  ```\r\n  prepend-path\tLD_LIBRARY_PATH\r\n\t.../intel-parallel-studio/composer.2018.3-intel-18.0.3/.../mpi/intel64/lib\r\n\t.../intel-parallel-studio/composer.2018.3-intel-18.0.3/.../mpi/mic/lib\r\n  prepend-path\tCLASSPATH\r\n\t.../intel-parallel-studio/composer.2018.3-intel-18.0.3/.../mpi/intel64/lib/mpi.jar\r\n  setenv\t\tI_MPI_ROOT\r\n\t.../intel-parallel-studio/composer.2018.3-intel-18.0.3/.../mpi\r\n  prepend-path\tMANPATH\r\n\t.../intel-parallel-studio/composer.2018.3-intel-18.0.3/.../mpi/man\r\n  prepend-path\tPATH\r\n\t.../intel-parallel-studio/composer.2018.3-intel-18.0.3/.../mpi/intel64/bin\r\n  ```\r\n* MKL:\r\n  ```\r\n  prepend-path\tCPATH\r\n\t.../intel-parallel-studio/composer.2018.3-intel-18.0.3/.../mkl/include\r\n  prepend-path\tLD_LIBRARY_PATH\r\n\t.../intel-parallel-studio/composer.2018.3-intel-18.0.3/.../mkl/lib/intel64_lin\r\n  prepend-path\tLIBRARY_PATH\r\n\t.../intel-parallel-studio/composer.2018.3-intel-18.0.3/.../mkl/lib/intel64_lin\r\n  setenv\t\tMKLROOT\r\n\t.../intel-parallel-studio/composer.2018.3-intel-18.0.3/.../mkl\r\n  prepend-path\tNLSPATH\r\n\t.../intel-parallel-studio/composer.2018.3-intel-18.0.3/.../mkl/lib/intel64_lin/locale/%l_%t/%N\r\n  prepend-path\tPKG_CONFIG_PATH\r\n\t  .../intel-parallel-studio/composer.2018.3-intel-18.0.3/.../mkl/bin/pkgconfig\r\n  ```\r\n* likewise for DAAL, IPP, etc.\r\n\r\n\r\n#### Location where `I_MPI_ROOT` is used\r\nThis occurs right on top of `mpiicc `:\r\n```\r\n$ grep -C1 I_MPI  /home/SHARE/soft/spack/spack-stern/opt/spack/linux-centos6-x86_64/\\\r\nintel-mpi/2018.3.222-intel-18.0.3/Hipwooo/compilers_and_libraries_2018.3.222/linux/mpi/intel64/bin/mpiicc \r\n```\r\nnamely,\r\n```\r\nprefix=.../intel-mpi/2018.3.222-intel-18.0.3/Hipwooo/compilers_and_libraries_2018.3.222/linux/mpi\r\n# The environment variable I_MPI_ROOT may be used to override installation folder path\r\nif [ -n \"$I_MPI_ROOT\" ] ; then\r\n    prefix=$I_MPI_ROOT;\r\nfi\r\n```\r\nThe lib missing  in  #8410 is specifically mentioned as well; it is available as static lib only, and is linked explicitly even for shared linkage:\r\n```\r\n...\r\n    I_MPI_OTHERLIBS=\" $libdir/libmpigi.a\"\r\n...\r\n    I_MPI_OTHERLIBS=\" -lmpigi\"\r\n...\r\n```",
    "performed_via_github_app": null
}