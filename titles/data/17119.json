{
    "url": "https://api.github.com/repos/spack/spack/issues/17119",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/17119/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/17119/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/17119/events",
    "html_url": "https://github.com/spack/spack/issues/17119",
    "id": 639903373,
    "node_id": "MDU6SXNzdWU2Mzk5MDMzNzM=",
    "number": 17119,
    "title": "Pipelines: Option to cache a cloned spack",
    "user": {
        "login": "scottwittenburg",
        "id": 6527504,
        "node_id": "MDQ6VXNlcjY1Mjc1MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6527504?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/scottwittenburg",
        "html_url": "https://github.com/scottwittenburg",
        "followers_url": "https://api.github.com/users/scottwittenburg/followers",
        "following_url": "https://api.github.com/users/scottwittenburg/following{/other_user}",
        "gists_url": "https://api.github.com/users/scottwittenburg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/scottwittenburg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/scottwittenburg/subscriptions",
        "organizations_url": "https://api.github.com/users/scottwittenburg/orgs",
        "repos_url": "https://api.github.com/users/scottwittenburg/repos",
        "events_url": "https://api.github.com/users/scottwittenburg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/scottwittenburg/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 73908756,
            "node_id": "MDU6TGFiZWw3MzkwODc1Ng==",
            "url": "https://api.github.com/repos/spack/spack/labels/feature",
            "name": "feature",
            "color": "84b6eb",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-06-16T19:00:02Z",
    "updated_at": "2020-06-19T01:46:28Z",
    "closed_at": "2020-06-19T01:46:28Z",
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Currently we allow one of two modes of operation:\r\n\r\n1. Assume spack command is already available in the runner environment, so we take no action.\r\n2. Allow user to provide `--spack-repo` and `--spack-ref` arguments to the `spack ci generate ...` command, which will cause all jobs to be generated with essentially the following `before_script`:\r\n\r\n```\r\ngit clone ${SPACK_REPO}\r\npushd ./spack && git checkout ${SPACK_REF} && popd\r\n. \"./spack/share/spack/setup-env.sh\"\r\n```\r\n\r\nand `after_script':\r\n\r\n```\r\nrm -rf ./spack\r\n```\r\n\r\nWe propose to support a third mode of operation, where if the runner supports it, we can cache the cloned spack so that it doesn't need to be cloned before every job.\r\n\r\n### Rationale\r\n\r\nThe spack project has a lot of history, which results in needed to write a lot of files every time it is cloned.  Because we need to support checking out an arbitrary SHA of spack, we can no longer use some of the shallow cloning and single branch cloning approaches we used at one time.  When every job needs to clone spack, it can overload a filesystem with file I/O activity.\r\n\r\n### Description\r\n\r\nOne assumption we have made until now is that within the environment repo, spack will be cloned directly at the root of the repository, and this feature will continue to rely on that assumption.  Implementation of the feature should require no change to how users invoke `spack ci generate ...`, but should only require us to implement some checks and perhaps extra steps within the generated build jobs:\r\n\r\n- Add a `cache` declaration to each job, specifying the spack directory as the path\r\n- Before the `clone` step in each job, check to make sure `./spack` doesn't already exist\r\n  - If `./spack` does already exist, change into the directory and:\r\n    1. Add `SPACK_REPO` remote if necessary (e.g. as `git remote add ci-spack ${SPACK_REPO}`)\r\n    2. `git fetch ci-spack`\r\n    3. git checkout ${SPACK_REF}\r\n  - If `./spack' does not already exist, clone and checkout as we currently do\r\n- In any case, remove the generated `after_script` that deletes spack.  \r\n\r\n~~There may be just enough new logic in the above steps, that it could make sense to add it as spack python instead of bash code.  If so, we can either add a `spack ci` subcommand (possible names: `clone`, 'getspack', ...) which we invoke from the `before_script`, or else we can fold the new logic into the rebuild jobs.~~\r\n\r\nOn further thought, since this is about how we get our hands on spack, I don't think we can assume we have a spack to help with that.  So maybe bash is our best option at the moment.\r\n\r\n### Caveats\r\n\r\nFor the caching of the cloned spack to work, there are some requirements on the runner.  This is an excerpt from the gitlab [documentation](https://docs.gitlab.com/12.9/ee/ci/caching/index.html#good-caching-practices) on caching:\r\n\r\n_From the perspective of the Runner, in order for cache to work effectively, one of the following must be true:_\r\n\r\n_Use a single Runner for all your jobs._\r\n_Use multiple Runners (in autoscale mode or not) that use distributed caching, where the cache is stored in S3 buckets (like shared Runners on GitLab.com)._\r\n_Use multiple Runners (not in autoscale mode) of the same architecture that share a common network-mounted directory (using NFS or something similar) where the cache will be stored._\r\n\r\nAnd since the gitlab documentation on caching also says the that cache directory needs to live within the project space, I assume that means the third bullet point above assumes that your project space is sitting on that network-mounted NFS.",
    "performed_via_github_app": null
}