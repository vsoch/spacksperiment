{
    "url": "https://api.github.com/repos/spack/spack/issues/2325",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/2325/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/2325/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/2325/events",
    "html_url": "https://github.com/spack/spack/pull/2325",
    "id": 188929331,
    "node_id": "MDExOlB1bGxSZXF1ZXN0OTM0NDg5MjU=",
    "number": 2325,
    "title": "Simplify the CMake build to make it more robust.",
    "user": {
        "login": "citibeth",
        "id": 1924215,
        "node_id": "MDQ6VXNlcjE5MjQyMTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1924215?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/citibeth",
        "html_url": "https://github.com/citibeth",
        "followers_url": "https://api.github.com/users/citibeth/followers",
        "following_url": "https://api.github.com/users/citibeth/following{/other_user}",
        "gists_url": "https://api.github.com/users/citibeth/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/citibeth/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/citibeth/subscriptions",
        "organizations_url": "https://api.github.com/users/citibeth/orgs",
        "repos_url": "https://api.github.com/users/citibeth/repos",
        "events_url": "https://api.github.com/users/citibeth/events{/privacy}",
        "received_events_url": "https://api.github.com/users/citibeth/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 73908754,
            "node_id": "MDU6TGFiZWw3MzkwODc1NA==",
            "url": "https://api.github.com/repos/spack/spack/labels/bug",
            "name": "bug",
            "color": "fc2929",
            "default": true,
            "description": null
        },
        {
            "id": 446630669,
            "node_id": "MDU6TGFiZWw0NDY2MzA2Njk=",
            "url": "https://api.github.com/repos/spack/spack/labels/dependencies",
            "name": "dependencies",
            "color": "c2e0c6",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2016-11-12T19:22:50Z",
    "updated_at": "2016-11-13T04:26:40Z",
    "closed_at": "2016-11-13T04:26:40Z",
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
        "url": "https://api.github.com/repos/spack/spack/pulls/2325",
        "html_url": "https://github.com/spack/spack/pull/2325",
        "diff_url": "https://github.com/spack/spack/pull/2325.diff",
        "patch_url": "https://github.com/spack/spack/pull/2325.patch"
    },
    "body": "The idea is to detangle circular dependencies involving CMake, so that CMake can install in as trouble-free a way as possible.  CMake authors already anticipated this issue, so they included all their dependencies in the source tarball.  Although Spack builds usually prefer to use its own stuff for dependencies, CMake is an exception to that rule, due to the circular dependency issue.  It will have zero effect because, unlike many packages, CMake is only ever used as a build dependency; nothing ever links to it.  Until we have proper handling of build dependencies in concretization, removing dpendencies from CMake will also avoid other unnecessary concretization conflicts.\r\n\r\nThis PR make the following changes:\r\n\r\n1. Set `+ownlibs` by default.\r\n2. Don't build the `ncurses` interface by default.  I did not even know this existed; and certainly Spack will never use it.\r\n\r\nThis package needs further review:\r\n\r\n1. I'm not convinced that `ownlibs` is sucessful at turning everything on or off.  See the result of `bootstrap --help` down below...\r\n\r\n2. Remind me why CMake needs OpenSSL?  Especially CMake from within Spack?  I believe that CMake increasingly has auto-fetch / auto-build features that Spack has no use for.  I've left `openssl` on for now, but we should consider turning it off too by default.\r\n\r\nIf users want a tricked-out CMake, they should built it explicitly.  The default CMake build should produce something that works for building Spack packages.\r\n\r\n```\r\n$ ./bootstrap --help\r\n\r\nUsage: ./bootstrap [<options>...] [-- <cmake-options>...]\r\nOptions: [defaults in brackets after descriptions]\r\nConfiguration:\r\n  --help                  print this message\r\n  --version               only print version information\r\n  --verbose               display more information\r\n  --parallel=n            bootstrap cmake in parallel, where n is\r\n                          number of nodes [1]\r\n  --enable-ccache         Enable ccache when building cmake\r\n  --init=FILE             load FILE as script to populate cache\r\n  --system-libs           use all system-installed third-party libraries\r\n                          (for use only by package maintainers)\r\n  --no-system-libs        use all cmake-provided third-party libraries\r\n                          (default)\r\n  --system-curl           use system-installed curl library\r\n  --no-system-curl        use cmake-provided curl library (default)\r\n  --system-expat          use system-installed expat library\r\n  --no-system-expat       use cmake-provided expat library (default)\r\n  --system-jsoncpp        use system-installed jsoncpp library\r\n  --no-system-jsoncpp     use cmake-provided jsoncpp library (default)\r\n  --system-zlib           use system-installed zlib library\r\n  --no-system-zlib        use cmake-provided zlib library (default)\r\n  --system-bzip2          use system-installed bzip2 library\r\n  --no-system-bzip2       use cmake-provided bzip2 library (default)\r\n  --system-liblzma        use system-installed liblzma library\r\n  --no-system-liblzma     use cmake-provided liblzma library (default)\r\n  --system-libarchive     use system-installed libarchive library\r\n  --no-system-libarchive  use cmake-provided libarchive library (default)\r\n\r\n  --qt-gui                build the Qt-based GUI (requires Qt >= 4.2)\r\n  --no-qt-gui             do not build the Qt-based GUI (default)\r\n  --qt-qmake=<qmake>      use <qmake> as the qmake executable to find Qt\r\n\r\n  --server                enable the server mode (default if supported)\r\n  --no-server             disable the server mode\r\n\r\n  --sphinx-man            build man pages with Sphinx\r\n  --sphinx-html           build html help with Sphinx\r\n  --sphinx-qthelp         build qch help with Sphinx\r\n  --sphinx-build=<sb>     use <sb> as the sphinx-build executable\r\n  --sphinx-flags=<flags>  pass <flags> to sphinx-build executable\r\n\r\nDirectory and file names:\r\n  --prefix=PREFIX         install files in tree rooted at PREFIX\r\n                          [/usr/local]\r\n  --bindir=DIR            install binaries in PREFIX/DIR\r\n                          [bin]\r\n  --datadir=DIR           install data files in PREFIX/DIR\r\n                          [share/cmake-3.7]\r\n  --docdir=DIR            install documentation files in PREFIX/DIR\r\n                          [doc/cmake-3.7]\r\n  --mandir=DIR            install man pages files in PREFIX/DIR/manN\r\n                          [man]\r\n  --xdgdatadir=DIR        install XDG specific files in PREFIX/DIR\r\n                          [share]\r\n```\r\n",
    "performed_via_github_app": null
}