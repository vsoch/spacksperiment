{
    "url": "https://api.github.com/repos/spack/spack/issues/17164",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/17164/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/17164/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/17164/events",
    "html_url": "https://github.com/spack/spack/issues/17164",
    "id": 641476499,
    "node_id": "MDU6SXNzdWU2NDE0NzY0OTk=",
    "number": 17164,
    "title": "Pipelines: Allow users to provide their own scripts",
    "user": {
        "login": "scottwittenburg",
        "id": 6527504,
        "node_id": "MDQ6VXNlcjY1Mjc1MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6527504?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/scottwittenburg",
        "html_url": "https://github.com/scottwittenburg",
        "followers_url": "https://api.github.com/users/scottwittenburg/followers",
        "following_url": "https://api.github.com/users/scottwittenburg/following{/other_user}",
        "gists_url": "https://api.github.com/users/scottwittenburg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/scottwittenburg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/scottwittenburg/subscriptions",
        "organizations_url": "https://api.github.com/users/scottwittenburg/orgs",
        "repos_url": "https://api.github.com/users/scottwittenburg/repos",
        "events_url": "https://api.github.com/users/scottwittenburg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/scottwittenburg/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 73908756,
            "node_id": "MDU6TGFiZWw3MzkwODc1Ng==",
            "url": "https://api.github.com/repos/spack/spack/labels/feature",
            "name": "feature",
            "color": "84b6eb",
            "default": false,
            "description": null
        },
        {
            "id": 1491156024,
            "node_id": "MDU6TGFiZWwxNDkxMTU2MDI0",
            "url": "https://api.github.com/repos/spack/spack/labels/pipelines",
            "name": "pipelines",
            "color": "b22353",
            "default": false,
            "description": "Issues related to spack's pipeline features"
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 15,
    "created_at": "2020-06-18T18:53:32Z",
    "updated_at": "2020-10-07T15:21:45Z",
    "closed_at": "2020-10-07T15:21:45Z",
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Many users attempting to leverage the `spack ci` command and auto-generated pipelines have asked for ways to customize the generated build jobs.  This proposal aims to satisfy that goal, and to solve the issue #17119 aimed to solve (unsuccessfully).  Therefore this proposal supersedes #17119.\r\n\r\nAt a high level, the proposal is for `spack ci generate` to stop generating any `before_script` or `after_script`, and only generate a `script` if the user didn't provide one.  Users will be able to provide their own versions of these fields via the `gitlab-ci` section in the `spack.yaml`.  If users want to supply their own `script`, they just need to be sure it arranges to be sitting at the root of the environment repository when it runs, and that at some point it calls `spack ci rebuild`.  If users do not supply their own `script`, then the following will be generated for them:\r\n\r\n```\r\n    script:\r\n        - spack ci rebuild\r\n```\r\n\r\n### Rationale\r\n\r\nThe `spack ci` command only provided `before_script` and `after_script` for one purpose, to assist users in obtaining the version of spack they desired their ci rebuild jobs to use.  Due to the dynamic nature of pipeline generation, this required users to: \r\n\r\n1. provide CI environment variables identifying the spack repository and version (branch, tag, SHA), \r\n1. use those variables to clone spack, e.g. in the `before_script` of the pipeline generation job,\r\n1. pass those variables along to `spack ci generate` using the `--spack-repo` and `--spack-ref` command line arguments\r\n\r\nat which point, spack would then generate jobs with a `before_script` which fixed the location of the cloned spack at the root of the environment repository.  To make this concrete, here's an example pipeline generation job which depends on a custom spack version.  The variables `SPACK_REPO` and `SPACK_REF` could be provided by the user via the CI variables interface in gitlab, or passed in via an upstream pipeline trigger, etc:\r\n\r\n```yaml\r\ngenerate-pipeline:\r\n  stage: generate\r\n  before_script:\r\n    - git clone ${SPACK_REPO} --branch ${SPACK_REF}\r\n    - . \"./spack/share/spack/setup-env.sh\"\r\n  script:\r\n    - spack -d ci generate\r\n      --spack-repo ${SPACK_REPO}\r\n      --spack-ref ${SPACK_REF}\r\n      --output-file \"${CI_PROJECT_DIR}/jobs_scratch_dir/pipeline.yml\"\r\n  after_script:\r\n    - rm -rf \"./spack\"\r\n```\r\n\r\nHaving this logic and responsibility spread across two locations has caused both confusion and problems for users attempting to deploy auto-generated pipelines at their sites.  Also, it has always felt a little unsavory to be locked into this somewhat opaque and inflexibly generated `before_script` and `after_script`.\r\n\r\nA specific problem this has caused is at sites where a custom version of spack is needed to run pipelines, but forcing every generated build job to begin by cloning that same version of spack (a large project with a lot of history) simply overwhelms the filesystem (see #17119).  In this scenario, it would be desirable to clone spack once at the beginning of the pipeline (pipeline generation would be a good place for this) and then have all the jobs re-use that cloned spack.  Giving users compete control over scripts in both generation and build jobs supports this goal.\r\n\r\nObviously cloning spack once at the beginning of the pipeline isn't feasible when the runners are kubernetes executor runners and do not have access to a shared file system, and in that case, some other approach to getting access to the right version of spack is required (i.e. every build job must begin with cloning the same version of spack).  User-provided scripts in generation and build jobs supports this use case as well.\r\n\r\n### Description\r\n\r\nHere we provide just a single concrete example of how you could set up a build pipeline with user-provided scripts.  In this example, the spack environment repo contains three files, `.gitlab-ci.yml`, `spack.yaml`, and `checkFirstClone.sh`, a shell script for cloning and activating spack.\r\n\r\nThe `spack.yaml` describes the environment to build, as usual.  But now the `gitlab-ci` section contains extra fields specifying the `before_script`, and `script` to be used.\r\n\r\n```yaml\r\nstages: [generate, build]\r\n\r\ngenerate-pipeline:\r\n  stage: generate\r\n  before_script:\r\n    - ./checkFirstClone.sh\r\n  script:\r\n    - spack -d ci generate\r\n      --output-file \"${CI_PROJECT_DIR}/jobs_scratch_dir/pipeline.yml\"\r\n  artifacts:\r\n    paths:\r\n      - \"${CI_PROJECT_DIR}/jobs_scratch_dir/pipeline.yml\"\r\n  tags: [\"my-runner-tag\"]\r\n\r\nbuild-jobs:\r\n  stage: build\r\n  trigger:\r\n    include:\r\n      - artifact: \"jobs_scratch_dir/pipeline.yml\"\r\n        job: generate-pipeline\r\n    strategy: depend\r\n```\r\n\r\nNot much new above, but note that `--spack-repo` and `spack-ref` are no longer passed to the `spack ci generate` command.  The `checkFirstClone.sh` shell script looks like this:\r\n\r\n```bash\r\n#!/bin/bash\r\n\r\nif [ -d \"./spack\" ]; then\r\n  # There's already a spack directory here\r\n  echo \"fast path\"\r\n  pushd ./spack\r\n  git fetch ${SPACK_REPO} ${SPACK_REF}\r\n  git checkout FETCH_HEAD\r\n  popd\r\nelse\r\n  echo \"taking the long route\"\r\n  git clone ${SPACK_REPO}\r\n  pushd ./spack\r\n  git checkout ${SPACK_REF}\r\n  popd\r\nfi\r\n\r\n. \"./spack/share/spack/setup-env.sh\"\r\n\r\nspack --version\r\n```\r\n\r\nObviously some checks for the needed environment variables with appropriate error messages could be nicer in that script, but they've been omitted here for the sake of brevity.  Then the spack environment could be defined as follows:\r\n\r\n```yaml\r\nspack:\r\n  specs:\r\n    - zlib%gcc@7.3.0 arch=linux-ubuntu18.04-x86_64\r\n    - bzip2%gcc@7.3.0 arch=linux-ubuntu18.04-x86_64\r\n  gitlab-ci:\r\n    mappings:\r\n      - match: ['os=ubuntu18.04']\r\n        runner-attributes:\r\n          tags: [\"my-runner-tag\"]\r\n          variables:\r\n            SPACK_REPO: $env:SPACK_REPO\r\n            SPACK_REF: $env:SPACK_REF\r\n          before_script:\r\n            - ./checkFirstClone.sh\r\n          script:\r\n            - spack -d ci rebuild\r\n```\r\n\r\nOnce again, for the sake of clarity, some useful/required fields have been left out of the environment in order to focus on what's important to this discussion.  Recall from the existing implementation that the each `match` specifies its own `runner-attributes`, and now those attributes can include `before_script`, `script`, and (not shown here) `after_script`.  In the above case, the `before_script` simply invokes the same shell script we used in the generation job, and the `script` is customized to pass the `-d` flag to spack to turn on debug output (previously achieved with the `enable-debug-messages` field, which can now be removed from the schema).\r\n\r\n### Additional information\r\n\r\nOne other thing to note is that this proposal includes a small change to the way `variables` are handled in the `gitlab-ci` section.  Previously any `variables` provided here were written verbatim into each job.  With this proposal, we would additionally allow the syntax above (`VAR_NAME: $env:VAR_VALUE`) to cause spack to interpolate `VAR_VALUE` from the environment at pipeline generation time.  This feature can be useful to propagate variables that are provided by, e.g. trigger jobs, which variables wouldn't otherwise be known in the rebuild jobs.\r\n\r\n#17129 is a WIP implementation of this proposal.\r\n\r\nAlso, for interested folks, I can point you to a project on [gitlab.spack.io](https://gitlab.spack.io) where you can see a live example making use of the user-defined pipeline scripts PR mentioned above.\r\n",
    "performed_via_github_app": null
}