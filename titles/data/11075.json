{
    "url": "https://api.github.com/repos/spack/spack/issues/11075",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/11075/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/11075/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/11075/events",
    "html_url": "https://github.com/spack/spack/pull/11075",
    "id": 427818417,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjY2MzI5MTM0",
    "number": 11075,
    "title": "[WIP] Incomplete implementation of compiler wrapper insertion control",
    "user": {
        "login": "chissg",
        "id": 2372949,
        "node_id": "MDQ6VXNlcjIzNzI5NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2372949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chissg",
        "html_url": "https://github.com/chissg",
        "followers_url": "https://api.github.com/users/chissg/followers",
        "following_url": "https://api.github.com/users/chissg/following{/other_user}",
        "gists_url": "https://api.github.com/users/chissg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/chissg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chissg/subscriptions",
        "organizations_url": "https://api.github.com/users/chissg/orgs",
        "repos_url": "https://api.github.com/users/chissg/repos",
        "events_url": "https://api.github.com/users/chissg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/chissg/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 7,
    "created_at": "2019-04-01T17:11:18Z",
    "updated_at": "2019-04-10T18:44:47Z",
    "closed_at": "2019-04-10T18:44:47Z",
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
        "url": "https://api.github.com/repos/spack/spack/pulls/11075",
        "html_url": "https://github.com/spack/spack/pull/11075",
        "diff_url": "https://github.com/spack/spack/pull/11075.diff",
        "patch_url": "https://github.com/spack/spack/pull/11075.patch"
    },
    "body": "Issue #10850 is an instance of where legitimate actions taken in an external package's build system can be subverted or broken by Spack's feature of prepending flags (specifically `-I` here for include directories of dependencies) in the compiler wrapper.\r\n\r\nThis PR attempts to sketch out a non-disruptive scheme to allow recipes, on a global default or per-dependency basis, to control which if any of the three usually-prepended entities (referred to in the code as `incdir`, `libdir`, and `rpath` are actually prepended in the compiler wrapper used to build the recipe.\r\n\r\nIn brief:\r\n* A recipe can use a new directive (`default_wrapper_item`) to define the default behavior of the wrapper with respect to the prepending of flag options.\r\n* Any `dependes_on` statement can specify a `wrapper_items` flag to do the same thing for specific dependencies.\r\n* The `wrapper_items` settings are stored in `Dependency` objects.\r\n* The implementation of `build_environment.set_build_environment_variables()` herein is currently *wrong*, as my analysis of the code was unable to trace how the new attribute of `Dependency` might properly be transferred into the data structures available via the `Package` object or its `DependencySpec` tree.\r\n\r\nAny insight into this would be greatly appreciated. I am not tied to anything particularly related to this (beginnings of) a solution, although it is pretty certain that some way needs to be found of controlling the compiler wrapper flag insertion in order to facilitate the resolution of #10850.\r\n",
    "performed_via_github_app": null
}