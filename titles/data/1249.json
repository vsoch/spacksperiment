{
    "url": "https://api.github.com/repos/spack/spack/issues/1249",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/1249/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/1249/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/1249/events",
    "html_url": "https://github.com/spack/spack/issues/1249",
    "id": 165539051,
    "node_id": "MDU6SXNzdWUxNjU1MzkwNTE=",
    "number": 1249,
    "title": "Delegate to other package managers",
    "user": {
        "login": "alalazo",
        "id": 4199709,
        "node_id": "MDQ6VXNlcjQxOTk3MDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4199709?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/alalazo",
        "html_url": "https://github.com/alalazo",
        "followers_url": "https://api.github.com/users/alalazo/followers",
        "following_url": "https://api.github.com/users/alalazo/following{/other_user}",
        "gists_url": "https://api.github.com/users/alalazo/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/alalazo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/alalazo/subscriptions",
        "organizations_url": "https://api.github.com/users/alalazo/orgs",
        "repos_url": "https://api.github.com/users/alalazo/repos",
        "events_url": "https://api.github.com/users/alalazo/events{/privacy}",
        "received_events_url": "https://api.github.com/users/alalazo/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 446634397,
            "node_id": "MDU6TGFiZWw0NDY2MzQzOTc=",
            "url": "https://api.github.com/repos/spack/spack/labels/discussion",
            "name": "discussion",
            "color": "a87f5a",
            "default": false,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 15,
    "created_at": "2016-07-14T11:26:04Z",
    "updated_at": "2020-04-28T05:06:18Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "Many extensions for a given language follow a well defined structure. For instance : \n\n``` python\nclass RMunsell(Package):\n    homepage = \"https://cran.r-project.org/web/packages/munsell/index.html\"\n    url      = \"https://cran.r-project.org/src/contrib/munsell_0.4.3.tar.gz\"\n    list_url = \"https://cran.r-project.org/src/contrib/Archive/munsell\"\n\n    version('0.4.3', 'ebd205323dc37c948f499ee08be9c476')\n\n    extends('R')\n\n    depends_on('r-colorspace')\n\n    def install(self, spec, prefix):\n        R('CMD', 'INSTALL', '--library={0}'.format(self.module.r_lib_dir),\n          self.stage.source_path)\n```\n\nChanging class name,  url, version and list of dependencies we may obtain another package :\n\n``` python\nclass RMime(Package):\n    homepage = \"https://github.com/yihui/mime\"\n    url      = \"https://cran.r-project.org/src/contrib/mime_0.4.tar.gz\"\n    list_url = \"https://cran.r-project.org/src/contrib/Archive/mime\"\n\n    version('0.4', '789cb33e41db2206c6fc7c3e9fbc2c02')\n\n    extends('R')\n\n    def install(self, spec, prefix):\n        R('CMD', 'INSTALL', '--library={0}'.format(self.module.r_lib_dir),\n          self.stage.source_path)\n```\n\nSo I was wondering : why not having a package factory used at install time that generates / updates those kind of things for us ? \n\nThe (still vague) idea I have in mind is basically : \n1. if a package exists explicitly in any registered repo (like `builtin`), use it\n2. if not and it matches an existing naming scheme (for instance `r-*` or `py-*`)\n   - try to generate automatically the corresponding `package.py`\n   - save it in a separate repository for autogenerated packages.py (`py-builtin` or something similar)\n   - register the repository (if not there before) giving it the least precedence\n\nThis proposal requires of course further analysis, and it certainly demands the extendee package manager to be queriable, but I was wondering at a high level what other people thinks about it.\n\nIf I didn't miss obvious points it seems to me that an approach like this would give two major benefits : \n- once in place for a language, it will give automatic access to most of its packages\n- it will reduce the lines of code to be maintained in `var\\spack\\repos\\builtin` by a fair amount (as only the packages that really need a customization would reside there, e.g. `py-numpy` and similar)\n",
    "performed_via_github_app": null
}