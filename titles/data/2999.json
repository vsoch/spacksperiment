{
    "url": "https://api.github.com/repos/spack/spack/issues/2999",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/2999/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/2999/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/2999/events",
    "html_url": "https://github.com/spack/spack/pull/2999",
    "id": 204769736,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTA0MjY2NzY0",
    "number": 2999,
    "title": "Features/compiler config consistency",
    "user": {
        "login": "scheibelp",
        "id": 1659704,
        "node_id": "MDQ6VXNlcjE2NTk3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1659704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/scheibelp",
        "html_url": "https://github.com/scheibelp",
        "followers_url": "https://api.github.com/users/scheibelp/followers",
        "following_url": "https://api.github.com/users/scheibelp/following{/other_user}",
        "gists_url": "https://api.github.com/users/scheibelp/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/scheibelp/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/scheibelp/subscriptions",
        "organizations_url": "https://api.github.com/users/scheibelp/orgs",
        "repos_url": "https://api.github.com/users/scheibelp/repos",
        "events_url": "https://api.github.com/users/scheibelp/events{/privacy}",
        "received_events_url": "https://api.github.com/users/scheibelp/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 7,
    "created_at": "2017-02-02T02:54:03Z",
    "updated_at": "2017-03-10T21:58:48Z",
    "closed_at": "2017-03-10T21:58:48Z",
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
        "url": "https://api.github.com/repos/spack/spack/pulls/2999",
        "html_url": "https://github.com/spack/spack/pull/2999",
        "diff_url": "https://github.com/spack/spack/pull/2999.diff",
        "patch_url": "https://github.com/spack/spack/pull/2999.patch"
    },
    "body": "Trying to address #2164 \r\n\r\n(EDIT) This PR makes the following changes:\r\n\r\n* ensure that \"spack config edit X\" will by default edit [user]/[platform]/X.yaml\r\n  * this is important for compilers in particular, primarily to be consistent with \"spack compiler find\" default\r\n* ensure that \"spack compiler find\" will not generate a \"duplicate\" compiler entry: if a compiler with the same spec is defined at any scope it is not added\r\n  * this is important because concretizing compilers is independent of scope\r\n\r\nTODOs (now complete):\r\n\r\n- [x] \"spack config edit\" should only default to platform-specific config files for compilers\r\n- [x] There should be a check at spack startup that ensures each compiler spec occurs only once across all scopes (EDIT: instead this PR modifies the error message printed during concretization)\r\n\r\nOriginal PR message:\r\n\r\nSo far I have:\r\n\r\n* ensure that \"spack config edit X\" will by default edit [user]/[platform]/X.yaml\r\n  * this is important for compilers in particular, primarily to be consistent with \"spack compiler find\" default\r\n* ensure that \"spack compiler find\" will not generate a \"duplicate\" compiler entry: if a compiler with the same spec is defined at any scope it is not added\r\n  * this is important because concretizing compilers is independent of scope\r\n\t\r\nHowever:\r\n\r\n* a user can still manually edit [user]/compilers.yaml after \"spack compiler find\" updates [user]/[platform]/compilers.yaml, perhaps with the expectation that the instance they edited will take precedence. I can think of two general approaches to handle this case:\r\n  * perhaps there should be a \"spack compiler check\" command to make sure no spec is repeated multiple times. Or more likely the check should occur at spack startup\r\n  * (this seems harder) perhaps user-created and system-generated compilers should be able to coexist, and the user-created instance should be used in that case\r\n* a user will be dumped into [user]/[platform]/modules.yaml by default for \"spack config edit modules\", and platform-specific module file generation may be confusing\r\n  * IMO default editing should only be platform-specific for compilers",
    "performed_via_github_app": null
}