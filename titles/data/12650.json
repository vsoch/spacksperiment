{
    "url": "https://api.github.com/repos/spack/spack/issues/12650",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/12650/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/12650/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/12650/events",
    "html_url": "https://github.com/spack/spack/issues/12650",
    "id": 487151590,
    "node_id": "MDU6SXNzdWU0ODcxNTE1OTA=",
    "number": 12650,
    "title": "external packages: spack finds wrong prefix for cuda from module on Cori",
    "user": {
        "login": "mwkrentel",
        "id": 3969036,
        "node_id": "MDQ6VXNlcjM5NjkwMzY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3969036?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mwkrentel",
        "html_url": "https://github.com/mwkrentel",
        "followers_url": "https://api.github.com/users/mwkrentel/followers",
        "following_url": "https://api.github.com/users/mwkrentel/following{/other_user}",
        "gists_url": "https://api.github.com/users/mwkrentel/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mwkrentel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mwkrentel/subscriptions",
        "organizations_url": "https://api.github.com/users/mwkrentel/orgs",
        "repos_url": "https://api.github.com/users/mwkrentel/repos",
        "events_url": "https://api.github.com/users/mwkrentel/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mwkrentel/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 73908754,
            "node_id": "MDU6TGFiZWw3MzkwODc1NA==",
            "url": "https://api.github.com/repos/spack/spack/labels/bug",
            "name": "bug",
            "color": "fc2929",
            "default": true,
            "description": null
        },
        {
            "id": 512483297,
            "node_id": "MDU6TGFiZWw1MTI0ODMyOTc=",
            "url": "https://api.github.com/repos/spack/spack/labels/impact-low",
            "name": "impact-low",
            "color": "fef2c0",
            "default": false,
            "description": ""
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": {
        "login": "becker33",
        "id": 13971568,
        "node_id": "MDQ6VXNlcjEzOTcxNTY4",
        "avatar_url": "https://avatars.githubusercontent.com/u/13971568?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/becker33",
        "html_url": "https://github.com/becker33",
        "followers_url": "https://api.github.com/users/becker33/followers",
        "following_url": "https://api.github.com/users/becker33/following{/other_user}",
        "gists_url": "https://api.github.com/users/becker33/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/becker33/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/becker33/subscriptions",
        "organizations_url": "https://api.github.com/users/becker33/orgs",
        "repos_url": "https://api.github.com/users/becker33/repos",
        "events_url": "https://api.github.com/users/becker33/events{/privacy}",
        "received_events_url": "https://api.github.com/users/becker33/received_events",
        "type": "User",
        "site_admin": false
    },
    "assignees": [
        {
            "login": "becker33",
            "id": 13971568,
            "node_id": "MDQ6VXNlcjEzOTcxNTY4",
            "avatar_url": "https://avatars.githubusercontent.com/u/13971568?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/becker33",
            "html_url": "https://github.com/becker33",
            "followers_url": "https://api.github.com/users/becker33/followers",
            "following_url": "https://api.github.com/users/becker33/following{/other_user}",
            "gists_url": "https://api.github.com/users/becker33/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/becker33/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/becker33/subscriptions",
            "organizations_url": "https://api.github.com/users/becker33/orgs",
            "repos_url": "https://api.github.com/users/becker33/repos",
            "events_url": "https://api.github.com/users/becker33/events{/privacy}",
            "received_events_url": "https://api.github.com/users/becker33/received_events",
            "type": "User",
            "site_admin": false
        }
    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2019-08-29T20:05:14Z",
    "updated_at": "2019-09-11T17:51:45Z",
    "closed_at": "2019-09-11T17:51:45Z",
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "I'm seeing a problem where spack finds the wrong prefix for a cuda\r\nmodule.  IMO, this has to be either a bug with the module entry or\r\nelse a bug in how spack reads the module, and I'm asking for a ruling.\r\n\r\nThis is on cori at NERSC, a Cray machine with GPUs on some compute\r\nnodes.  I created a dummy package that just adds a few dependencies\r\nand has a trivial install() method that prints the `spec[...].prefix`\r\nfor the packages.\r\n\r\n```\r\nclass Mypack(Package):\r\n    ...\r\n    depends_on('cmake')\r\n    depends_on('cuda')\r\n\r\n    def install(self, spec, prefix):\r\n        print 'cmake =  {0}'.format(spec['cmake'].prefix)\r\n        print 'cuda =   {0}'.format(spec['cuda'].prefix)\r\n\t...\r\n```\r\n\r\nI added `modules:` entries in `packages.yaml` for cmake, cuda, etc.\r\n\r\n```\r\ncmake:\r\n  modules:\r\n    cmake@3.14.4:  cmake/3.14.4\r\n\r\ncuda:\r\n  modules:\r\n    cuda@10.1.168:  cuda/10.1.168\r\n```\r\n\r\nMost of the prefixes make sense, but the cuda prefix is `/usr` which\r\nis not correct.\r\n\r\n```\r\ncmake =  /global/common/sw/cray/cnl7/haswell/cmake/3.14.4/gcc/8.2.0/2hef55n\r\ncuda =   /usr\r\njdk =    /global/common/cori_cle7/software/jdk/1.8.0_202\r\npapi =   /opt/cray/pe/papi/5.7.0.1\r\n```\r\n\r\nI'm expecting `spec['cuda'].prefix` to be `/usr/common/software/cuda/10.1.168`,\r\nnot `/usr`.\r\n\r\nCori uses TCL modules and the cuda module has:\r\n\r\n```\r\n$ module show cuda/10.1.168\r\n-------------------------------------------------------------------\r\n/usr/common/software/modulefiles/cuda/10.1.168:\r\n\r\nconflict         cuda \r\nmodule-whatis    CUDA is a parallel computing platform and programming model developed by NVIDIA\r\n                 for general computing on graphical processing unit (GPU). \r\nsetenv           CUDA_VERSION 10.1.168 \r\nsetenv           CUDNN_VERSION 7.6.2 \r\nsetenv           CUDA_ROOT /usr/common/software/cuda/10.1.168 \r\nsetenv           CUDA_HOME /usr/common/software/cuda/10.1.168 \r\nsetenv           CUDA_PATH /usr/common/software/cuda/10.1.168 \r\nprepend-path     LD_LIBRARY_PATH /usr/lib64 \r\nprepend-path     LD_LIBRARY_PATH /usr/common/software/cuda/10.1.168/lib64 \r\nprepend-path     PATH /usr/common/software/cuda/10.1.168/bin \r\nprepend-path     PATH /usr/common/software/cuda/10.1.168/NsightCompute-2019.3.1.2 \r\nprepend-path     PATH /usr/common/software/cuda/10.1.168/NsightSystems-linux-public-2019.3.6.30-e2e891f/Host-x86_64/ \r\nprepend-path     PATH /usr/common/software/cuda/10.1.168/NsightSystems-linux-public-2019.3.6.30-e2e891f/Target-x86_64/x86_64 \r\nprepend-path     MANPATH /usr/common/software/cuda/10.1.168/doc/man \r\nprepend-path     CMAKE_PREFIX_PATH /usr/common/software/cuda/10.1.168 \r\n-------------------------------------------------------------------\r\n```\r\n\r\nIt's not TCL modules in general.  The other modules on cori are TCL\r\nand they seem to work.\r\n\r\nIt's not just this one cuda module.  There are 5 cuda modules on cori,\r\nolder and newer.  The others also report /usr.\r\n\r\nIt's not cuda in general.  I tried other cuda modules on other\r\nsystems, including summit at ORNL, and they work.  But those are LMOD\r\nmodules.\r\n\r\nIt seems to be just cuda on cori at NERSC.  At least, I haven't found\r\nanother pattern.\r\n\r\nCori has separate FE/BE arch types.  Same problem for either arch.\r\n\r\nI'm not blocked.  I can change `modules:` to `paths:` and get the\r\nright prefix.  But this is supposed to work, right?\r\n\r\nThis is with a recent spack clone: 02bb1d5ec618 on Aug 27.\r\n\r\nAnyway, I'm seeking a ruling if this a problem with the module entry\r\nor in how spack reads the module.  But let's try not to have each side\r\nblame the other.  :-)\r\n\r\nping @mamelara who seems to be in the intersection of spack and NERSC.\r\n",
    "performed_via_github_app": null
}