{
    "url": "https://api.github.com/repos/spack/spack/issues/4135",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/4135/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/4135/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/4135/events",
    "html_url": "https://github.com/spack/spack/issues/4135",
    "id": 226580154,
    "node_id": "MDU6SXNzdWUyMjY1ODAxNTQ=",
    "number": 4135,
    "title": "spec.satisfies needs to be refactored (behaves wrongly inside packages)",
    "user": {
        "login": "alalazo",
        "id": 4199709,
        "node_id": "MDQ6VXNlcjQxOTk3MDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4199709?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/alalazo",
        "html_url": "https://github.com/alalazo",
        "followers_url": "https://api.github.com/users/alalazo/followers",
        "following_url": "https://api.github.com/users/alalazo/following{/other_user}",
        "gists_url": "https://api.github.com/users/alalazo/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/alalazo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/alalazo/subscriptions",
        "organizations_url": "https://api.github.com/users/alalazo/orgs",
        "repos_url": "https://api.github.com/users/alalazo/repos",
        "events_url": "https://api.github.com/users/alalazo/events{/privacy}",
        "received_events_url": "https://api.github.com/users/alalazo/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 73908754,
            "node_id": "MDU6TGFiZWw3MzkwODc1NA==",
            "url": "https://api.github.com/repos/spack/spack/labels/bug",
            "name": "bug",
            "color": "fc2929",
            "default": true,
            "description": null
        },
        {
            "id": 446634397,
            "node_id": "MDU6TGFiZWw0NDY2MzQzOTc=",
            "url": "https://api.github.com/repos/spack/spack/labels/discussion",
            "name": "discussion",
            "color": "a87f5a",
            "default": false,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 17,
    "created_at": "2017-05-05T13:52:38Z",
    "updated_at": "2020-03-11T18:33:46Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "This may be the root of some weird behaviors seen around, given that currently this pattern is used in more than 40 packages. Short story: ~never use this inside packages:~  this line behaves wrongly in packages:\r\n```python\r\nspec.satisfies('^foo')  # or similar checks\r\n```\r\nwhile this behaves correctly:\r\n```python\r\n'^foo' in spec\r\n```\r\n\r\nThe point is that the first call is meant to be used inside the concretizer and has a weaker semantic on enforcing the constraint. The second call has a stronger semantic, and is equivalent to calling:\r\n```\r\nfor s in self.traverse():\r\n    if s.satisfies('^foo', strict=True):\r\n        return True\r\n```\r\nwhere:\r\n1. we recurse on the spec\r\n2. we activate the `strict=True` parameter which enforces the strong semantic\r\n\r\nIn other words (@tgamblin :tm: ) the first call means that `spec` **could satisfy** `^foo` eventually. The second that `spec` can satisfy `^foo` right now.\r\n\r\n@scheibelp @becker33 @tgamblin Can you confirm that this could be a potential issue for packages?\r\n",
    "performed_via_github_app": null
}