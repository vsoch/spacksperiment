{
    "url": "https://api.github.com/repos/spack/spack/issues/14448",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/14448/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/14448/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/14448/events",
    "html_url": "https://github.com/spack/spack/issues/14448",
    "id": 547517681,
    "node_id": "MDU6SXNzdWU1NDc1MTc2ODE=",
    "number": 14448,
    "title": "Semantics for Variant Merging",
    "user": {
        "login": "citibeth",
        "id": 1924215,
        "node_id": "MDQ6VXNlcjE5MjQyMTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1924215?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/citibeth",
        "html_url": "https://github.com/citibeth",
        "followers_url": "https://api.github.com/users/citibeth/followers",
        "following_url": "https://api.github.com/users/citibeth/following{/other_user}",
        "gists_url": "https://api.github.com/users/citibeth/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/citibeth/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/citibeth/subscriptions",
        "organizations_url": "https://api.github.com/users/citibeth/orgs",
        "repos_url": "https://api.github.com/users/citibeth/repos",
        "events_url": "https://api.github.com/users/citibeth/events{/privacy}",
        "received_events_url": "https://api.github.com/users/citibeth/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 446634397,
            "node_id": "MDU6TGFiZWw0NDY2MzQzOTc=",
            "url": "https://api.github.com/repos/spack/spack/labels/discussion",
            "name": "discussion",
            "color": "a87f5a",
            "default": false,
            "description": null
        },
        {
            "id": 73908756,
            "node_id": "MDU6TGFiZWw3MzkwODc1Ng==",
            "url": "https://api.github.com/repos/spack/spack/labels/feature",
            "name": "feature",
            "color": "84b6eb",
            "default": false,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-01-09T14:36:58Z",
    "updated_at": "2020-01-09T14:36:58Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "@tgamblin @scheibelp @alalazo \r\n\r\nThis is in response to #10466, but I though it could use its own Issue:\r\n\r\n> I would ask for unit tests, but before doing this I think we should agree on how something like:\r\n> \r\n> ```yaml\r\n> packages:\r\n>   all:\r\n>     variants: ['~shared']\r\n>   opencv:\r\n>     variants: ['+shared']\r\n> ```\r\n> \r\n> is supposed to behave, which as far as I understand is the motivation behind your fixme?\r\n\r\nThe Problem\r\n=========\r\n\r\nI think the root problem here stems from conflicting/vague views of what on/off variants are supposed to be/mean.  There are two ways they are currently used in Spack recipes:\r\n\r\n1. The most common is as a feature to be turned on/off (I'll call this a \"feature on/off variant\").  This usage is widespread; for example, in `python/package.py`:\r\n   ```\r\n   variant('tk', default=False, description='Provide support for Tkinter')\r\n   ```\r\n   Feature variants are often used to avoid bringing in dependencies for features that are not needed.  This is true for `python+tk`, as one can see later in the recipe:\r\n   ```\r\n   depends_on(\"tk\", when=\"+tk\")\r\n   ```\r\n\r\n2. Sometimes on/off variants are also currently used to select between mutually exclusive alternatives (I'll call this an \"alternative on/off variant\").  For example, the package `symengine` apparently needs a multi-precision library, and it can use either `boost` or `gmp` for that purpose.  It does so as follows:\r\n   ```\r\n   variant('boostmp',      default=False,\r\n            description='Compile with Boost multi-precision integer library')\r\n\r\n    depends_on('boost',    when='+boostmp')\r\n    depends_on('gmp',      when='~boostmp')\r\n    depends_on('mpc',      when='+mpc~boostmp')\r\n    depends_on('mpfr',     when='+mpfr~boostmp')\r\n   ````\r\n\r\nIMHO, usage (1) is correct and usage (2) is incorrect.  Spack didn't previously have multi-valued variants, but now it does.  Usage (2) should be recoded to use them; for example, in this way:\r\n\r\n```\r\n   variant('mplib',      default='gmp',\r\n            values=('boost', 'gmp'), multi=False,\r\n            description='Multi-precision integer library to use')\r\n\r\n    depends_on('boost',    when='mplib=boost')\r\n    depends_on('gmp',      when='mplib=gmp')\r\n    depends_on('mpc',      when='+mpc mplib=gmp')\r\n    depends_on('mpfr',     when='+mpfr mplib=gmp')\r\n```\r\n\r\nRamifications\r\n==========\r\n\r\nThe mixture of feature on/off and alternative on/off variants causes us problems.\r\n\r\nConflicting Concretizations\r\n----------------------------\r\n\r\nAny place a tilde is used in a `depends_on()` statement (eg: `depends_on('package~xyz',...)`, it has the potential to make specs unconcretizable for no good reason.  For example, the `scotch` package has the `metis` variant, which looks to be a classic feature-type variant, and appropriate for implementation as an on/off variant:\r\n```\r\n    variant('metis', default=True,\r\n            description='Build metis and parmetis wrapper libraries')\r\n```\r\n\r\nHowever, the `foam-extend` package has this:\r\n```\r\n    depends_on('scotch~metis',     when='~ptscotch+scotch')\r\n    depends_on('scotch~metis+mpi', when='+ptscotch')\r\n```\r\n\r\nI'm left wondering... *how does building an extra wrapper library in `scotch` break `foam-extent`*?  That would seem implausible, but not entirely impossible.  However, the `depends_on` statements as they are above *can certainly* cause concretization problems (and they have in the past; sorry, I can't seem to dig up the Issue).  For example, if something higher up in the DAG depends on `foam-extent+ptscotch` and on `scotch+metis`.  Or if the user just decided for some other reason they needed the `metis` wrapper library.  If building Metis wrapper does NOT break `foam-extend`, then the correct code should be:\r\n```\r\n    depends_on('scotch',     when='~ptscotch+scotch')\r\n    depends_on('scotch+mpi', when='+ptscotch')\r\n```\r\n\r\nThe problem is, I can't know for sure whether building the Metis library breaks `foam-extend`.  Maybe it does, maybe it doesn't.  Multiply this by dozens of similar cases in the Spack recipe base, and it's a problem that is not easily disentangled.  I'm sure there is at least one erroneous `depends_on('package~variant')` construct in Spack.\r\n\r\nHow to Merge Variant Lists\r\n---------------------------\r\n\r\nThis muddle on on/off variants also causes us problems in this PR.  We can't figure out the correct semantics for variant merging because the semantics *need to be different for feature-type vs. alternative-type on/off variants*.\r\n\r\n1. For feature-type variants, it's pretty clear.  All `+` values for a variant should be merged together.  No need to worry about precedent.  And there is really no reason to ever use `~` for a feature-type variant in `spack.yaml`.\r\n\r\n2. For alternative-type variants, there needs needs to be some kind of precedence.  Specific packages (eg `opencv`) should have precedence over the `all` directive.  And precedence rules should also be followed for merging YAML files.\r\n\r\nRecommendations\r\n==============\r\n\r\n1. I believe we can come up with the correct semantics for merging variants by thinking through what we already have.  The key here is, I think we only need precedence rules for the use of `~` in variant lists (and also multi-valued variants).  Variant lists composed entirely of `+` can simply be merged together by union.  This should \"do the right thing\" for on/off feature-type variants, while also addressing the needs of on/off alternative-type variants.\r\n\r\n1. In theory, on/off variants should not be used to implement alternative-type variants.  Multi-valued variants with `multi=False` are a better way to implement that functionality. Therefore... \r\n\r\n   1. If/when the needs of feature-type vs. alternative-type variants conflict in Spack, I recommend we proceed in a way that supports feature-type on/off variants, even at the expense of alternative-type on/off variants.\r\n\r\n   1. Package authors should be encouraged to use (or convert to) the use of multi-valued variants where appropriate, and stop using on/off variants for that purpose.\r\n\r\n   1. Package vetters should be on the lookout for this common problem when reviewing PRs.\r\n\r\n1. The most common alternative-type variant that is \"wrongly\" implemented using an on/off variant is `shared`.  I recommend we convert it to `link_type=('shared','static','pic')` Spack-wide.  Not only would this fix persistent (but minor) problems we have with the link-type issue; it would also give Spacks multi-valued variant capability more visibility, encouraging others to use it.\r\n\r\nMisc\r\n====\r\n\r\nIn August 2019, I briefly figured I could fix the use of tildes in `depends_on()` by removing `depends_on('zzz~xxx')` constructs; see #14447.  I was wrong, it's a difficult problem.  This is where I learned how pervasively on/off variants are used for alternatives, throughout Spack.\r\n",
    "performed_via_github_app": null
}