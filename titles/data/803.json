{
    "url": "https://api.github.com/repos/spack/spack/issues/803",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/803/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/803/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/803/events",
    "html_url": "https://github.com/spack/spack/pull/803",
    "id": 149611304,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NjcxMDY3MzA=",
    "number": 803,
    "title": "Cheap support for Cray compiler wrappers",
    "user": {
        "login": "robertdfrench",
        "id": 18403,
        "node_id": "MDQ6VXNlcjE4NDAz",
        "avatar_url": "https://avatars.githubusercontent.com/u/18403?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robertdfrench",
        "html_url": "https://github.com/robertdfrench",
        "followers_url": "https://api.github.com/users/robertdfrench/followers",
        "following_url": "https://api.github.com/users/robertdfrench/following{/other_user}",
        "gists_url": "https://api.github.com/users/robertdfrench/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/robertdfrench/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/robertdfrench/subscriptions",
        "organizations_url": "https://api.github.com/users/robertdfrench/orgs",
        "repos_url": "https://api.github.com/users/robertdfrench/repos",
        "events_url": "https://api.github.com/users/robertdfrench/events{/privacy}",
        "received_events_url": "https://api.github.com/users/robertdfrench/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2016-04-19T23:27:51Z",
    "updated_at": "2016-04-21T21:32:24Z",
    "closed_at": "2016-04-21T21:32:24Z",
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "pull_request": {
        "url": "https://api.github.com/repos/spack/spack/pulls/803",
        "html_url": "https://github.com/spack/spack/pull/803",
        "diff_url": "https://github.com/spack/spack/pull/803.diff",
        "patch_url": "https://github.com/spack/spack/pull/803.patch"
    },
    "body": "Bare-bones support for Cray's compiler wrappers. Correctly detects and invokes modern PGI, Intel, and GNU compilers by manipulating environment modules.\n- New `CrayWrapper` class provides most of the magic\n- Create new compiler classes `CraypeGcc`, `CraypeIntel`, `CraypePgi` by inheriting from `Gcc`,`Intel`, `Pgi` respectively and mixing in `CrayWrapper`\n- `spack.build_environment` publishes an optional \"prelude\" of shell statements for Spack's compiler wrapper to execute before invoking the intended compiler (in this case, the Cray wrapper)\n  -  this is used as a hook to manipulate the shell environment so that the Cray wrapper will correctly invoke the right version of intel, pgi, what have you\n- Non-Cray-wrapped compilers and Non-Cray machines are unaffected\n### Motivation\n\nRunning `spack compiler add` on a Cray system will only detect a few compilers, because Cray hides them in non-standard places:\n\n```\nfrenchrd@titan-ext3:~/Projects/spack> ./bin/spack compilers\n==> Available compilers\n-- gcc ----------------------------------------------------------\ngcc@4.7  gcc@4.3.4  gcc@4.3\n\n-- pgi ----------------------------------------------------------\npgi@14.10-0\n```\n\nWe can of course add the correct compilers by hand, or even change out environment modules and run `spack compiler add` again, but this suffers on two counts:\n- If we add the path to the Cray compiler wrapper, it will become ambiguous at install-time which real compiler we originally intended to use (in fact, this will depend on the user's current environment, which would undermine the guarantees Spack makes about what compiler was actually used)\n- If we add the path to the _actual_ compiler, we miss out on all of the Cray Magic provided by the compiler wrapper.\n### Proposed Changes\n\nAt the OLCF, we treat (for example) pgcc 15.10 as a wholly separate compiler from the Cray-wrapped pgcc 15.10. Binaries produced from these two compilers are not expected to be compatible, nor are there many reasonable use cases for mixing their output. Working under the assumption that this attitude holds for other folks, this PR treats introduces three new compiler families `craype-pgi`, `craype-intel`, and `craype-gcc` whose representation in Spack is distinct from `pgi`, `intel`, or `gcc`.\n#### CrayWrapper Mix-in\n\nTaking `craype-pgi` as an example, we create a new subclass of `spack.compilers.pgi.Pgi` which also mixes in `spack.cray_wrapper.CrayWrapper`. The CrayWrapper mixin provides some additional attributes which: \n- identify f90, f77, C, and C++ symlinks\n- determine which Cray \"Programming Environment\" to load\n- determine which additional Cray-specific environment modules must be loaded for each compiler version\n  - Why the Cray modules don't handle this already, I cannot say\n#### Compiler Prelude\n\nThe `spack.build_environment` module exports several environment variables to the Spack compiler wrapper, which are then used to determine the correct _real_ compiler to invoke. Since we are introducing an additional layer of compiler-indirection, we need to have the Spack wrapper communicate to the Cray wrapper which real compiler it (the Cray wrapper) should invoke. This PR introduces a `.prelude` attribute on compiler objects, which defaults to None. Compiler classes which mixin the CrayWrapper class receive a property which will use information from the compiler and its spec to construct a set of Environment Module commands which will configure the Cray wrapper to behave as we intend.\n#### Dumb compiler-finder script\n\nHonestly, I just gave up on this one. Figuring out a generic way to find compiler modules and figure out what their dependencies are is beyond me. I hard-coded what I know to work for each (non-ancient) version of PGI, Intel, and Gnu. These settings work on OLCF systems, and if Cray's environment is consistent they will work elsewhere. If not, that will be a big problem for this PR. If you have compiler versions that we don't, please add them!\n### Results\n\nTo address our lack of compilers, we run `./bin/find_compilers_on_cray_machine`\n\n```\nfrenchrd@titan-ext3:~/Projects/spack> ./bin/spack compilers\n==> Available compilers\n-- gcc ----------------------------------------------------------\ngcc@5.1.0  gcc@4.9.3  gcc@4.9.2  gcc@4.9.1  gcc@4.9.0  gcc@4.8.2  gcc@4.8.1  gcc@4.7  gcc@4.3.4  gcc@4.3\n\n-- craype-gcc ---------------------------------------------------\ncraype-gcc@5.1.0  craype-gcc@4.9.3  craype-gcc@4.9.2  craype-gcc@4.9.1  craype-gcc@4.9.0  craype-gcc@4.8.2  craype-gcc@4.8.1\n\n-- intel --------------------------------------------------------\nintel@15.0.2  intel@14.0.2\n\n-- pgi ----------------------------------------------------------\npgi@15.10-0  pgi@15.7-0  pgi@15.3-0  pgi@14.10-0  pgi@14.7-0  pgi@14.4-0  pgi@14.2-0  pgi@14.1-0\n\n-- craype-pgi ---------------------------------------------------\ncraype-pgi@15.10-0  craype-pgi@15.7-0  craype-pgi@15.3-0  craype-pgi@14.10-0  craype-pgi@14.7-0  craype-pgi@14.4-0  craype-pgi@14.2-0  craype-pgi@14.1-0\n\n-- craype-intel -------------------------------------------------\ncraype-intel@15.0.2  craype-intel@14.0.2\n```\n\nSo many compilers!\n### Caveats\n- Automatic compiler detection is **hard**. `bin/find_compilers_on_cray_machine` contains explicit configuration for several modern versions of Cray-gcc, Cray-intel, and Cray-pgi. \n  - _This script may not be portable_. It works well on OLCF systems, but I would be grateful for feedback from other Cray centers. \n- To prevent total vocabulary confusion, the actual Cray Compiler (CCE) has been excluded from this PR. No one wants to discuss the Spack Compiler Wrapper calling the Cray Compiler Wrapper calling the Cray Compiler.\n- This is not as bold or feature-rich as newarch branch. It is just a proposal to hold us Cray-folks over until we have something better.\n\n@mpbelhorn and @adamsimpson provided strong to medium-strong technical guidance for this PR. \n",
    "performed_via_github_app": null
}