{
    "url": "https://api.github.com/repos/spack/spack/issues/14345",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/14345/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/14345/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/14345/events",
    "html_url": "https://github.com/spack/spack/issues/14345",
    "id": 544596447,
    "node_id": "MDU6SXNzdWU1NDQ1OTY0NDc=",
    "number": 14345,
    "title": "RFE: more explicit relationship/reference between specs & modules",
    "user": {
        "login": "mkiernan",
        "id": 24193619,
        "node_id": "MDQ6VXNlcjI0MTkzNjE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/24193619?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mkiernan",
        "html_url": "https://github.com/mkiernan",
        "followers_url": "https://api.github.com/users/mkiernan/followers",
        "following_url": "https://api.github.com/users/mkiernan/following{/other_user}",
        "gists_url": "https://api.github.com/users/mkiernan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mkiernan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mkiernan/subscriptions",
        "organizations_url": "https://api.github.com/users/mkiernan/orgs",
        "repos_url": "https://api.github.com/users/mkiernan/repos",
        "events_url": "https://api.github.com/users/mkiernan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mkiernan/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 73908756,
            "node_id": "MDU6TGFiZWw3MzkwODc1Ng==",
            "url": "https://api.github.com/repos/spack/spack/labels/feature",
            "name": "feature",
            "color": "84b6eb",
            "default": false,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-01-02T14:18:01Z",
    "updated_at": "2020-01-02T14:44:01Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "It's often not immediately obvious which modulefile to load to meet a given target spec (or vice-versa, when looking at a user submisssion script, whether they are using the \"right\" modulefiles to meet a given spec). What's needed in my view is a more user-friendly direct link between the two rather than an indirect link via the spec/module hash using multiple commands. \r\n\r\n### Rationale\r\n\r\nWhen having multiple versions of the same code compiled with multiple mpi flavours and libraries, it can be tricky to determine which module you need to load to get the spec you want. I can imagine this might also be difficult to communicate to end users. An example with osu-micro-benchmarks compiled with four mpi versions; in spack find I will just see 3 x osu-micro-benchmarks@5.6.1%gcc - so all three look exactly the same:\r\n![image](https://user-images.githubusercontent.com/24193619/71670871-a4f07d80-2d71-11ea-83d2-67371bb961c5.png)\r\n\r\n To determine which version is which is which in order to find the specific version I'm looking for with a specific mpi a more detailed spack find is needed: \r\n![image](https://user-images.githubusercontent.com/24193619/71666803-d0b83700-2d62-11ea-9165-b080a8d55ce8.png)\r\n\r\nThen to map that to the correct module file to load, I need to match the hashes from above to the hashes in the module name: \r\n![image](https://user-images.githubusercontent.com/24193619/71666875-1412a580-2d63-11ea-920c-3a992b910b85.png)\r\n\r\nAnother method is to use spack module tcl loads, but this also doesn't show which mpi is which either, and again they all look the same: \r\n![image](https://user-images.githubusercontent.com/24193619/71666918-3c9a9f80-2d63-11ea-82f0-aa2a6f0d4485.png)\r\n\r\nYou can filter more specifically:\r\n![image](https://user-images.githubusercontent.com/24193619/71666979-77043c80-2d63-11ea-9967-6df38333242e.png)\r\n\r\nor:\r\n![image](https://user-images.githubusercontent.com/24193619/71670802-6d81d100-2d71-11ea-9b98-f06e7a4b109e.png)\r\n\r\nIt's all fine for me, but I'm not sure these are methods I can communicate to end users. \r\n\r\nIn addition, it should be obvious when looking at a user job submission script which spec they are running (or at least if I look at the modulefile he is referencing I should immediately see which spec they are running, rather than having to trace it via the hash). \r\n\r\n### Description\r\n\r\nSome suggestions: \r\n\r\n1. - could the spack find output be customized with an option to show the namespace divided not just as arch / compiler, but arch / compiler /mpi (or other)?\r\n2. - could spack find be extended with an additional option to show the associated modulefiles directly ? (so alongside each spec you can see it's modulefile(s)) - ideally also with an option for the user to cut/paste them directly as module load statements. \r\n3. - could the modulefile contain the full spack spec dumped into a comment in the header in the actual modulefile also ?  (so by looking at the modulefile you can see the spec that generated it)\r\n4. - could the mpi version be included in the comment generated with spack module tcl loads \r\n5. - or do we just recommend running spack load in job submission scripts instead of module load ?  (I've seen some comments that this is \"too slow\" and thus not recommended?). In some ways this feels more precise. \r\n6. - or are hierarchical module namespaces the way to go here ?\r\n\r\nI guess the correct answer depends on - how exactly (and with which tools) do we expect end users to locate and select the correct module files ? \r\n",
    "performed_via_github_app": null
}