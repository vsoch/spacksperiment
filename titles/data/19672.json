{
    "url": "https://api.github.com/repos/spack/spack/issues/19672",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/19672/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/19672/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/19672/events",
    "html_url": "https://github.com/spack/spack/pull/19672",
    "id": 734357394,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NTEzOTM1Mjk4",
    "number": 19672,
    "title": "bugfix: don't recompute full_hash or build_hash",
    "user": {
        "login": "tgamblin",
        "id": 299842,
        "node_id": "MDQ6VXNlcjI5OTg0Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/299842?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tgamblin",
        "html_url": "https://github.com/tgamblin",
        "followers_url": "https://api.github.com/users/tgamblin/followers",
        "following_url": "https://api.github.com/users/tgamblin/following{/other_user}",
        "gists_url": "https://api.github.com/users/tgamblin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tgamblin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tgamblin/subscriptions",
        "organizations_url": "https://api.github.com/users/tgamblin/orgs",
        "repos_url": "https://api.github.com/users/tgamblin/repos",
        "events_url": "https://api.github.com/users/tgamblin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tgamblin/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 759411369,
            "node_id": "MDU6TGFiZWw3NTk0MTEzNjk=",
            "url": "https://api.github.com/repos/spack/spack/labels/buildcache",
            "name": "buildcache",
            "color": "bf354c",
            "default": false,
            "description": null
        },
        {
            "id": 446626162,
            "node_id": "MDU6TGFiZWw0NDY2MjYxNjI=",
            "url": "https://api.github.com/repos/spack/spack/labels/hashes",
            "name": "hashes",
            "color": "9a69b7",
            "default": false,
            "description": null
        },
        {
            "id": 446630556,
            "node_id": "MDU6TGFiZWw0NDY2MzA1NTY=",
            "url": "https://api.github.com/repos/spack/spack/labels/specs",
            "name": "specs",
            "color": "b60205",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-11-02T09:50:37Z",
    "updated_at": "2020-11-02T22:18:17Z",
    "closed_at": "2020-11-02T21:21:13Z",
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
        "url": "https://api.github.com/repos/spack/spack/pulls/19672",
        "html_url": "https://github.com/spack/spack/pull/19672",
        "diff_url": "https://github.com/spack/spack/pull/19672.diff",
        "patch_url": "https://github.com/spack/spack/pull/19672.patch"
    },
    "body": "Fixes #19649.\r\n\r\nThere was an error introduced in #19209 where `full_hash()` and `build_hash()` are called on older specs that we've read in from the DB.\r\n\r\nSince we evaluate hashes lazily, `node_dict_with_hashes()` has no way of knowing whether the spec just never had a `full_hash` or a `build_hash` or whether they need to be lazily computed. When we just had `dag_hash`, this wasn't an issue since it was always computed when concrete specs were stored -- it would always be there for specs read in from files.\r\n\r\nTo get around this ambiguity and to fix the issue, this makes two changes:\r\n\r\n- [x] Always compute `dag_hash`, `build_hash`, and `full_hash` after concretization, so we know if one is present, then all should be, if they are avaialble.\r\n\r\n- [x] Only store `full_hash` and `build_hash` if they are present. If not, don't bother recomputing.\r\n\r\nThis *may* make concretization slightly slower. If it does we could look at some other way to store whether full_hash and build_hash can be computed (e.g. we coudl store a `bool` on the `Spec` at concretize time), or we could look at other options like using JSON for these hashes to speed them up.  I think this solution is simpler for now.",
    "performed_via_github_app": null
}