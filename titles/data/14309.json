{
    "url": "https://api.github.com/repos/spack/spack/issues/14309",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/14309/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/14309/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/14309/events",
    "html_url": "https://github.com/spack/spack/pull/14309",
    "id": 543085113,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzU3NDA4MTc1",
    "number": 14309,
    "title": "Refactor how global state is handled in test fixtures",
    "user": {
        "login": "tgamblin",
        "id": 299842,
        "node_id": "MDQ6VXNlcjI5OTg0Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/299842?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tgamblin",
        "html_url": "https://github.com/tgamblin",
        "followers_url": "https://api.github.com/users/tgamblin/followers",
        "following_url": "https://api.github.com/users/tgamblin/following{/other_user}",
        "gists_url": "https://api.github.com/users/tgamblin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tgamblin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tgamblin/subscriptions",
        "organizations_url": "https://api.github.com/users/tgamblin/orgs",
        "repos_url": "https://api.github.com/users/tgamblin/repos",
        "events_url": "https://api.github.com/users/tgamblin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tgamblin/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 471995122,
            "node_id": "MDU6TGFiZWw0NzE5OTUxMjI=",
            "url": "https://api.github.com/repos/spack/spack/labels/commands",
            "name": "commands",
            "color": "006b75",
            "default": false,
            "description": null
        },
        {
            "id": 460427403,
            "node_id": "MDU6TGFiZWw0NjA0Mjc0MDM=",
            "url": "https://api.github.com/repos/spack/spack/labels/performance",
            "name": "performance",
            "color": "c2e0c6",
            "default": false,
            "description": null
        },
        {
            "id": 456121338,
            "node_id": "MDU6TGFiZWw0NTYxMjEzMzg=",
            "url": "https://api.github.com/repos/spack/spack/labels/refactoring",
            "name": "refactoring",
            "color": "f28f2a",
            "default": false,
            "description": null
        },
        {
            "id": 456341797,
            "node_id": "MDU6TGFiZWw0NTYzNDE3OTc=",
            "url": "https://api.github.com/repos/spack/spack/labels/tests",
            "name": "tests",
            "color": "b60205",
            "default": false,
            "description": "General test capability(ies)"
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-12-28T07:20:35Z",
    "updated_at": "2019-12-31T01:29:19Z",
    "closed_at": "2019-12-30T21:01:32Z",
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
        "url": "https://api.github.com/repos/spack/spack/pulls/14309",
        "html_url": "https://github.com/spack/spack/pull/14309",
        "diff_url": "https://github.com/spack/spack/pull/14309.diff",
        "patch_url": "https://github.com/spack/spack/pull/14309.patch"
    },
    "body": "This was originally just about making `spack.cmd.common.arguments` more lazy to shave some time off Spack startup.  I attempted to refactor that module so that it would not construct so many `Args` objects at module scope.  That is now done lazily instead.\r\n\r\n### The small problem\r\nWhen doing that, a weird issue arose.  This test was failing:\r\n\r\n```python\r\n@pytest.mark.parametrize('arguments,expected', [\r\n    ([], spack.config.get('config:dirty')),  # default from config file\r\n    (['--clean'], False),\r\n    (['--dirty'], True),\r\n])\r\ndef test_install_dirty_flag(parser, arguments, expected):\r\n    args = parser.parse_args(arguments)\r\n    assert args.dirty == expected\r\n```\r\n\r\nIt turns out it failed because `Args` are now fetched lazily:\r\n\r\n```python\r\n@arg\r\ndef dirty():\r\n    return Args(\r\n        '--dirty',\r\n        action='store_true',\r\n        default=spack.config.get('config:dirty'),\r\n        dest='dirty',\r\n        help=\"preserve user environment in spack's build environment (danger!)\"\r\n    )\r\n```\r\n\r\nAnd `spack.config.get('config:dirty')` is now called at module scope for the decorator on `test_install_dirty`, but `dirty()` is called at test setup time to create the `Args`.  This is because the `config` fixture sets up a mock config scope using `test/data/config.yaml`, which set `dirty` to `True` by default.  That was probably an accident, as it's different from Spack's global default of `False`, so I've changed it back to `False`.\r\n\r\n### The bigger problem\r\n\r\nOk, so what's the big deal?  The real issue here is that `test_install_dirty_flag` **doesn't use the `config` fixture**.  That's a problem.  Why is the mock configuration live if the fixture is not used!?\r\n\r\nIt turns out we have a lot of confusing global state in the tests.  Fixtures like `config`, `database`, and `store` are module-scoped, but they'ree frequently used as arguments to test functions.  These fixtures swap out globals on setup and restore them on teardown.  As function arguments, they do the right set-up, but they leave the global changes in place for the whole module the function lives in.  This meant that if you use `config` once, other functions in the same module would inadvertently inherit the mock Spack configuration, as it would only be torn down once all tests in the module were complete.  Worse, this is order dependent, so the tests could fail depending on which ones you run.\r\n\r\nThe reason we added these fixtures was to avoid the cost of constructing things like mock databases.  That's good, and it makes the tests fast.  The problem is that we're tightly coupling the **construction** of expensive things with their **use**.  If we module-scoped the `database` fixture, the database *also* had to be **in use** for as long as it existed, as the same test would set `spack.store` to the mock store.\r\n\r\n### Refactoring global state\r\n\r\nI've done a lot of refactoring here to *decouple* these things.  There is now a session-scoped `mock_configuration` fixture that sets up the filesystem with mock configurations, and the `config` fixture that enables the mock configuration by setting the `spack.config.config` global is function-scoped.  In general, we should module- or session-scope the **state** required for these global objects, but we should always function-scope the actual activation.  That way, the mock database is only \"live\" for the tests that say they want to use it.  We don't get confusing behavior where teardown is delayed until the module is done.\r\n\r\nI think this will generally make it easier to work with tests.  You can compare this to the way a lot of the builtin `pytest` fixtures work -- things like `tmpdir` are function-scoped (the directory is only live for one function) but `tmpdir_factory` is session-scoped and can be used by module- or session-scoped fixtures.  Things that should only be constructed once are still session- or module-scoped to avoid construction costs, but their *usage* is function-scoped.\r\n\r\n### Other stuff\r\n\r\n@scheibelp @becker33 @alalazo @tldahlgren: you should all take a look at this and see what you think.  Feedback would be much appreciated.\r\n\r\nIn addition to all that refactoring, I also did a few other things:\r\n- [x] Do the refactoring described above\r\n- [x] FIx a number of tests that did not properly inject the fixtures they needed (this was revealed by the refactoring)\r\n- [x] Fix bugs in `cmd/env.py` tests (they did not tear down config scopes properly)\r\n- [x] Move caching in `PackagePrefs` from the class level to the instance level.  Caching is now done per concretization instead of per Spack invocation, which means we no longer have to clear the `PackagePrefs` caches all over the place -- it just handles itself.   I think this will also reduce confusion when writing tests.\r\n- [x] Refactor `spack.cmd.common.arguments` to construct `Args` lazily",
    "performed_via_github_app": null
}