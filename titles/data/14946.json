{
    "url": "https://api.github.com/repos/spack/spack/issues/14946",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/14946/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/14946/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/14946/events",
    "html_url": "https://github.com/spack/spack/issues/14946",
    "id": 565186144,
    "node_id": "MDU6SXNzdWU1NjUxODYxNDQ=",
    "number": 14946,
    "title": "How can you tell spack that a build is being done for an older OS?",
    "user": {
        "login": "cesss",
        "id": 15330020,
        "node_id": "MDQ6VXNlcjE1MzMwMDIw",
        "avatar_url": "https://avatars.githubusercontent.com/u/15330020?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cesss",
        "html_url": "https://github.com/cesss",
        "followers_url": "https://api.github.com/users/cesss/followers",
        "following_url": "https://api.github.com/users/cesss/following{/other_user}",
        "gists_url": "https://api.github.com/users/cesss/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/cesss/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/cesss/subscriptions",
        "organizations_url": "https://api.github.com/users/cesss/orgs",
        "repos_url": "https://api.github.com/users/cesss/repos",
        "events_url": "https://api.github.com/users/cesss/events{/privacy}",
        "received_events_url": "https://api.github.com/users/cesss/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 446623896,
            "node_id": "MDU6TGFiZWw0NDY2MjM4OTY=",
            "url": "https://api.github.com/repos/spack/spack/labels/platform-support",
            "name": "platform-support",
            "color": "bfdadc",
            "default": false,
            "description": null
        },
        {
            "id": 73908758,
            "node_id": "MDU6TGFiZWw3MzkwODc1OA==",
            "url": "https://api.github.com/repos/spack/spack/labels/question",
            "name": "question",
            "color": "cc317c",
            "default": true,
            "description": null
        },
        {
            "id": 446630556,
            "node_id": "MDU6TGFiZWw0NDY2MzA1NTY=",
            "url": "https://api.github.com/repos/spack/spack/labels/specs",
            "name": "specs",
            "color": "b60205",
            "default": false,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-02-14T08:50:43Z",
    "updated_at": "2020-09-30T19:16:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I need to build packages for MacOS 10.12 (`sierra`) but sometimes they will be built in newer MacOS releases (with exactly the same compilers -custom built-, same SDK, same flags, same everything, generating exactly identical binaries --yep, I verified that).\r\n\r\nNow, if `spack` detects `highsierra`, it generates `highsierra` packages when installing. But I want to tell `spack` that even if the current OS is `highsierra`, the build results are actually `sierra`. How can I do that?\r\n\r\nI tried to specify the `os=sierra` flag when invoking `spack install` for a package, but, first of all, it didn't work (it says something like the specs are too different and that it's not possible to generate `sierra` installs), and second, it wouldn't be efficient for me having to use a flag for every install... I'd like to set this parameter globally for all my installs.\r\n\r\nI suppose this is related to cross-compiling features. But I wasn't able to find detailed documentation for cross-compiling in `spack` (yes, it's mentioned as a feature, and there are some slides on the concept, but didn't find a tutorial or documents explaining it).\r\n\r\nAs a related topic, I'd like to build **mingw-w64** with `spack`. There's no package yet for it, but I assume it could be similar to the existing `gcc` package. I've never built **mingw-w64** on my own (well, I've built it but using scripts from others), however I hope to understand all the steps from the port at Macports. If I'm able to generate a package for **mingw-w64**, how can I tell `spack` that the build results when using it are going to be `windows`? As I told, this seems similar to my question above about MacOS, with the difference that the builds using **mingw-w64** won't be able to be run natively on the host OS (well, I'll run them through a virtual machine, of course, but not natively).\r\n\r\nOf course, if you happen to have a preliminary **mingw-w64** package for `spack` for your internal use, it would be of great help if you could share it \ud83d\ude03 ",
    "performed_via_github_app": null
}