{
    "url": "https://api.github.com/repos/spack/spack/issues/14260",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/14260/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/14260/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/14260/events",
    "html_url": "https://github.com/spack/spack/issues/14260",
    "id": 541256167,
    "node_id": "MDU6SXNzdWU1NDEyNTYxNjc=",
    "number": 14260,
    "title": "gcc prioritises system /lib64 libs over spack env /lib by default",
    "user": {
        "login": "Sinan81",
        "id": 2924561,
        "node_id": "MDQ6VXNlcjI5MjQ1NjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2924561?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sinan81",
        "html_url": "https://github.com/Sinan81",
        "followers_url": "https://api.github.com/users/Sinan81/followers",
        "following_url": "https://api.github.com/users/Sinan81/following{/other_user}",
        "gists_url": "https://api.github.com/users/Sinan81/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Sinan81/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Sinan81/subscriptions",
        "organizations_url": "https://api.github.com/users/Sinan81/orgs",
        "repos_url": "https://api.github.com/users/Sinan81/repos",
        "events_url": "https://api.github.com/users/Sinan81/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Sinan81/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 446616547,
            "node_id": "MDU6TGFiZWw0NDY2MTY1NDc=",
            "url": "https://api.github.com/repos/spack/spack/labels/build-error",
            "name": "build-error",
            "color": "ff3300",
            "default": false,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-12-21T00:31:18Z",
    "updated_at": "2019-12-21T01:10:48Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "I am trying remove some hard coded library paths from Makefiles in a custom software project, and use LIBRARY_PATH instead. When I do so, g++ picks up boost libs located under /lib64 first, breaking the build. Wondering if others have nay experience  with this, and what the most elegant quick fix would be\r\n\r\nAfter activating spack environment, we look at how g++ searches for libs:\r\n```\r\n[sbulut@ws-067 ]$ g++ -print-search-dirs | sed 's/:/\\n/g'                                                                                                                                                    \r\n...\r\nlibraries\r\n...\r\n/disk/myspackenv/.spack-env/view/lib/../lib64/\r\n...\r\n/lib/../lib64/\r\n/usr/lib/../lib64/\r\n...\r\n/disk/myspackenv/.spack-env/view/lib/\r\n```\r\nSince on Centos7, boost is installed under /lib64, system boost libs are prioritized over spack env libs, almost all of which installed under `/disk/myspackenv/.../lib`. hence this breaks my custom the software build. \r\n\r\nI found the following discussions relevant: \r\n- https://github.com/spack/spack/issues/2617\r\n- https://stackoverflow.com/questions/12419363/why-does-g-look-in-library-path-lib64-and-where-is-this-documented\r\n\r\nIn order to solve this problem, I am thinking about the following quick fixes:\r\n- symlink everything under `/myspackenv/.../lib` to `/myspackenv/.../lib64` (disadvantage: this symlinking is a manual process, and works against automated reproduceability of a spack env)\r\n- create extra lib symlinks and add these to LIBRARY_PATH (haven't tried this yet)\r\n```\r\nln -s /myspackenv/.../lib /myspackenv/.../libfix/lib\r\nln -s /myspackenv/.../lib /myspackenv/.../libfix/lib64\r\nexport LIBRARY_PATH=/myspackenv/.../libfix/lib:$LIBRARY_PATH\r\n```\r\nI am wondering if one can add custom paths to be exported in a given spack env so that I won't have to do the above export line every time I activate the spack env.\r\n\r\nAlso, can there be a permanent solution for this?",
    "performed_via_github_app": null
}