{
    "url": "https://api.github.com/repos/spack/spack/issues/21307",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/21307/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/21307/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/21307/events",
    "html_url": "https://github.com/spack/spack/issues/21307",
    "id": 794679714,
    "node_id": "MDU6SXNzdWU3OTQ2Nzk3MTQ=",
    "number": 21307,
    "title": "at-spi2-atk@2.34.2 / at-spi2-core@2.36.0:An error is reported when a self-test meson test is performed on the debian/ubuntu/suse/openeuler.",
    "user": {
        "login": "Tom-python0121",
        "id": 77763324,
        "node_id": "MDQ6VXNlcjc3NzYzMzI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/77763324?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Tom-python0121",
        "html_url": "https://github.com/Tom-python0121",
        "followers_url": "https://api.github.com/users/Tom-python0121/followers",
        "following_url": "https://api.github.com/users/Tom-python0121/following{/other_user}",
        "gists_url": "https://api.github.com/users/Tom-python0121/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Tom-python0121/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Tom-python0121/subscriptions",
        "organizations_url": "https://api.github.com/users/Tom-python0121/orgs",
        "repos_url": "https://api.github.com/users/Tom-python0121/repos",
        "events_url": "https://api.github.com/users/Tom-python0121/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Tom-python0121/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 73908754,
            "node_id": "MDU6TGFiZWw3MzkwODc1NA==",
            "url": "https://api.github.com/repos/spack/spack/labels/bug",
            "name": "bug",
            "color": "fc2929",
            "default": true,
            "description": null
        },
        {
            "id": 1433532775,
            "node_id": "MDU6TGFiZWwxNDMzNTMyNzc1",
            "url": "https://api.github.com/repos/spack/spack/labels/triage",
            "name": "triage",
            "color": "ed9793",
            "default": false,
            "description": "The issue needs to be prioritized"
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2021-01-27T01:07:14Z",
    "updated_at": "2021-01-27T01:59:29Z",
    "closed_at": "2021-01-27T01:57:58Z",
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "The problem is caused by at-spi2-atk@2.34.2.\r\n1/2 droute-test OK 0.07s\r\n2/2 atk-test FAIL 0.17s (killed by signal 5 SIGTRAP)\r\nCommand at at-spi2-core@2.36.0: ${at-spi2-core_bin_dir}/libexec/at-spi-bus-launcher & at-spi2-core_bin_dir=$(spack location -i  at-spi2-core@2.36.0)\r\nKey log: GLib-GIO-CRITICAL **: 20:23:59.348: g_settings_schema_source_lookup: assertion 'source! = NULL' failed\r\n(process:24530): GLib-GIO-CRITICAL **: 20:23:59.348: g_settings_schema_source_lookup: assertion 'source! = NULL' failed.\r\nWe locate the (at-spi2-core@2.36.0) **_../spack-src/bus/at-spi-bus-launcher.c_** source code file by using the test-suite.log file Failed to launch bus: Failed to connect to session bus. The 750 lines and 954 lines are related to the source code problem. Who knows the source code analysis problem at-spi2-core@2.36.0?\r\nspack-src/bus/at-spi-bus-launcher.c\uff1a\r\n\u2026\u2026\r\nstatic void\r\non_name_lost (GDBusConnection *connection,\r\n              const gchar     *name,\r\n              gpointer         user_data)\r\n{\r\n  A11yBusLauncher *app = user_data;\r\n  if (app->session_bus == NULL\r\n      && connection == NULL\r\n      && app->a11y_launch_error_message == NULL)\r\n    app->a11y_launch_error_message = g_strdup (\"Failed to connect to session bus\");\r\n  g_main_loop_quit (app->loop);\r\n}\r\n\u2026\u2026\r\nint\r\nmain (int    argc,\r\n      char **argv)\r\n{\r\n  gboolean a11y_set = FALSE;\r\n  gboolean screen_reader_set = FALSE;\r\n  gint i;\r\n\r\n  _global_app = g_slice_new0 (A11yBusLauncher);\r\n  _global_app->loop = g_main_loop_new (NULL, FALSE);\r\n\r\n  for (i = 1; i < argc; i++)\r\n    {\r\n      if (!strcmp (argv[i], \"--launch-immediately\"))\r\n        _global_app->launch_immediately = TRUE;\r\n      else if (sscanf (argv[i], \"--a11y=%d\", &_global_app->a11y_enabled) == 1)\r\n        a11y_set = TRUE;\r\n      else if (sscanf (argv[i], \"--screen-reader=%d\",\r\n                       &_global_app->screen_reader_enabled) == 1)\r\n        screen_reader_set = TRUE;\r\n    else\r\n      g_error (\"usage: %s [--launch-immediately] [--a11y=0|1] [--screen-reader=0|1]\", argv[0]);\r\n    }\r\n\r\n  _global_app->interface_schema = get_schema (\"org.gnome.desktop.interface\");\r\n  _global_app->a11y_schema = get_schema (\"org.gnome.desktop.a11y.applications\");\r\n\r\n  if (!a11y_set)\r\n    {\r\n      _global_app->a11y_enabled = _global_app->interface_schema\r\n                                  ? g_settings_get_boolean (_global_app->interface_schema, \"toolkit-accessibility\")\r\n                                  : _global_app->launch_immediately;\r\n    }\r\n\r\n  if (!screen_reader_set)\r\n    {\r\n      _global_app->screen_reader_enabled = _global_app->a11y_schema\r\n                                  ? g_settings_get_boolean (_global_app->a11y_schema, \"screen-reader-enabled\")\r\n                                  : FALSE;\r\n    }\r\n\r\n  if (_global_app->interface_schema)\r\n    g_signal_connect (_global_app->interface_schema,\r\n                      \"changed::toolkit-accessibility\",\r\n                      G_CALLBACK (gsettings_key_changed), _global_app);\r\n\r\n  if (_global_app->a11y_schema)\r\n    g_signal_connect (_global_app->a11y_schema,\r\n                      \"changed::screen-reader-enabled\",\r\n                      G_CALLBACK (gsettings_key_changed), _global_app);\r\n\r\n  init_sigterm_handling (_global_app);\r\n\r\n  introspection_data = g_dbus_node_info_new_for_xml (introspection_xml, NULL);\r\n  g_assert (introspection_data != NULL);\r\n\r\n  _global_app->name_owner_id =\r\n    g_bus_own_name (G_BUS_TYPE_SESSION,\r\n                    \"org.a11y.Bus\",\r\n                    G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT,\r\n                    on_bus_acquired,\r\n                    on_name_acquired,\r\n                    on_name_lost,\r\n                    _global_app,\r\n                    NULL);\r\n\r\n  g_main_loop_run (_global_app->loop);\r\n\r\n  if (_global_app->a11y_bus_pid > 0)\r\n    kill (_global_app->a11y_bus_pid, SIGTERM);\r\n\r\n  /* Clear the X property if our bus is gone; in the case where e.g. \r\n   * GDM is launching a login on an X server it was using before,\r\n   * we don't want early login processes to pick up the stale address.\r\n   */\r\n#ifdef HAVE_X11\r\n  if (_global_app->x11_prop_set)\r\n    {\r\n      Display *display = XOpenDisplay (NULL);\r\n      if (display)\r\n        {\r\n          Atom bus_address_atom = XInternAtom (display, \"AT_SPI_BUS\", False);\r\n          XDeleteProperty (display,\r\n                           XDefaultRootWindow (display),\r\n                           bus_address_atom);\r\n\r\n          XFlush (display);\r\n          XCloseDisplay (display);\r\n        }\r\n    }\r\n#endif\r\n\r\n  if (_global_app->a11y_launch_error_message)\r\n    {\r\n      g_printerr (\"**Failed to launch bus**: %s\", _global_app->a11y_launch_error_message);\r\n      return 1;\r\n    }\r\n  return 0;\r\n}",
    "performed_via_github_app": null
}