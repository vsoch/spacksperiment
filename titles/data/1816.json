{
    "url": "https://api.github.com/repos/spack/spack/issues/1816",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/1816/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/1816/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/1816/events",
    "html_url": "https://github.com/spack/spack/pull/1816",
    "id": 178406163,
    "node_id": "MDExOlB1bGxSZXF1ZXN0ODYyMDI3MjU=",
    "number": 1816,
    "title": "boost: fix a bug which broke it on macOS with clang+gfortran",
    "user": {
        "login": "davydden",
        "id": 8023934,
        "node_id": "MDQ6VXNlcjgwMjM5MzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8023934?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davydden",
        "html_url": "https://github.com/davydden",
        "followers_url": "https://api.github.com/users/davydden/followers",
        "following_url": "https://api.github.com/users/davydden/following{/other_user}",
        "gists_url": "https://api.github.com/users/davydden/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/davydden/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/davydden/subscriptions",
        "organizations_url": "https://api.github.com/users/davydden/orgs",
        "repos_url": "https://api.github.com/users/davydden/repos",
        "events_url": "https://api.github.com/users/davydden/events{/privacy}",
        "received_events_url": "https://api.github.com/users/davydden/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 73908754,
            "node_id": "MDU6TGFiZWw3MzkwODc1NA==",
            "url": "https://api.github.com/repos/spack/spack/labels/bug",
            "name": "bug",
            "color": "fc2929",
            "default": true,
            "description": null
        },
        {
            "id": 446615268,
            "node_id": "MDU6TGFiZWw0NDY2MTUyNjg=",
            "url": "https://api.github.com/repos/spack/spack/labels/compilers",
            "name": "compilers",
            "color": "f9d0c4",
            "default": false,
            "description": null
        },
        {
            "id": 446619526,
            "node_id": "MDU6TGFiZWw0NDY2MTk1MjY=",
            "url": "https://api.github.com/repos/spack/spack/labels/new-package",
            "name": "new-package",
            "color": "444444",
            "default": false,
            "description": null
        },
        {
            "id": 446620033,
            "node_id": "MDU6TGFiZWw0NDY2MjAwMzM=",
            "url": "https://api.github.com/repos/spack/spack/labels/ready",
            "name": "ready",
            "color": "0e8a16",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 23,
    "created_at": "2016-09-21T17:02:10Z",
    "updated_at": "2017-05-28T21:00:46Z",
    "closed_at": "2016-09-22T20:47:22Z",
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
        "url": "https://api.github.com/repos/spack/spack/pulls/1816",
        "html_url": "https://github.com/spack/spack/pull/1816",
        "diff_url": "https://github.com/spack/spack/pull/1816.diff",
        "patch_url": "https://github.com/spack/spack/pull/1816.patch"
    },
    "body": "fix a bug introduced in https://github.com/LLNL/spack/pull/1621 which made boost broken on macOS with clang+gfortran.\n\nPrior to this PR boost used gcc\n\n```\n$ otool -L ~/spack/opt/spack/darwin-sierra-x86_64/clang-8.0.0-apple/boost-1.61.0-q23jffr3h2hg5hmpfyv6ual75r7ucwqz/lib/libboost_python-mt.dylib\n/Users/davydden/spack/opt/spack/darwin-sierra-x86_64/clang-8.0.0-apple/boost-1.61.0-q23jffr3h2hg5hmpfyv6ual75r7ucwqz/lib/libboost_python-mt.dylib:\n    /Users/davydden/spack/opt/spack/darwin-sierra-x86_64/clang-8.0.0-apple/boost-1.61.0-q23jffr3h2hg5hmpfyv6ual75r7ucwqz/lib/libboost_python-mt.dylib (compatibility version 0.0.0, current version 0.0.0)\n    /Users/davydden/spack/opt/spack/darwin-sierra-x86_64/clang-8.0.0-apple/gcc-6.2.0-thrupxvh7uemrmwdmo372dxk4vxgh2bt/lib64/libstdc++.6.dylib (compatibility version 7.0.0, current version 7.22.0)\n    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1238.0.0)\n    /Users/davydden/spack/opt/spack/darwin-sierra-x86_64/clang-8.0.0-apple/gcc-6.2.0-thrupxvh7uemrmwdmo372dxk4vxgh2bt/lib64/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0)\n```\n\neven with\n\n```\ncompilers:\n- compiler:\n    modules: []\n    operating_system: sierra\n    paths:\n      cc: /usr/bin/clang\n      cxx: /usr/bin/clang++\n      f77: /Users/davydden/spack/opt/spack/darwin-sierra-x86_64/clang-8.0.0-apple/gcc-6.2.0-thrupxvh7uemrmwdmo372dxk4vxgh2bt/bin/gfortran\n      fc: /Users/davydden/spack/opt/spack/darwin-sierra-x86_64/clang-8.0.0-apple/gcc-6.2.0-thrupxvh7uemrmwdmo372dxk4vxgh2bt/bin/gfortran\n    spec: clang@8.0.0-apple\n```\n\nThis PR fixes it back to \n\n```\n$ otool -L ~/spack/opt/spack/darwin-sierra-x86_64/clang-8.0.0-apple/boost-1.60.0-fqoy5kmitv5o2fomtopkmcn36upcpxdg/lib/libboost_python-mt.dylib\n/Users/davydden/spack/opt/spack/darwin-sierra-x86_64/clang-8.0.0-apple/boost-1.60.0-fqoy5kmitv5o2fomtopkmcn36upcpxdg/lib/libboost_python-mt.dylib:\n    /Users/davydden/spack/opt/spack/darwin-sierra-x86_64/clang-8.0.0-apple/boost-1.60.0-fqoy5kmitv5o2fomtopkmcn36upcpxdg/lib/libboost_python-mt.dylib (compatibility version 0.0.0, current version 0.0.0)\n    /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 307.4.0)\n    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1238.0.0)\n```\n\nand more importantly resolves cryptic linking errors like \n\n```\nUndefined symbols for architecture x86_64:\n  \"boost::python::objects::function_object(boost::python::objects::py_function const&, std::__1::pair<boost::python::detail::keyword const*, boost::python::detail::keyword const*> const&)\", referenced from:\n      void boost::python::detail::def_init_aux<boost::python::class_<dealii::python::CellAccessorWrapper, boost::python::detail::not_specified, boost::python::detail::not_specified, boost::python::detail::not_specified>, boost::python::default_call_policies, boost::mpl::vector3<dealii::python::TriangulationWrapper&, int const, int const>, boost::mpl::size<boost::mpl::vector3<dealii::python::TriangulationWrapper&, int const, int const> > >(boost::python::class_<dealii::python::CellAccessorWrapper, boost::python::detail::not_specified, boost::python::detail::not_specified, boost::python::detail::not_specified>&, boost::mpl::vector3<dealii::python::TriangulationWrapper&, int const, int const> const&, boost::mpl::size<boost::mpl::vector3<dealii::python::TriangulationWrapper&, int const, int const> >, boost::python::default_call_policies const&, char const*, std::__1::pair<boost::python::detail::keyword const*, boost::python::detail::keyword const*> const&) in export_cell_accessor.cc.o\n      void boost::python::class_<dealii::python::CellAccessorWrapper, boost::python::detail::not_specified, boost::python::detail::not_specified, boost::python::detail::not_specified>::def_impl<dealii::python::CellAccessorWrapper, dealii::python::PointWrapper (dealii::python::CellAccessorWrapper::*)() const, boost::python::detail::def_helper<char [69], boost::python::detail::keywords<1ul>, boost::python::detail::not_specified, boost::python::detail::not_specified> >(dealii::python::CellAccessorWrapper*, char const*, dealii::python::PointWrapper (dealii::python::CellAccessorWrapper::*)() const, boost::python::detail::def_helper<char [69], boost::python::detail::keywords<1ul>, boost::python::detail::not_specified, boost::python::detail::not_specified> const&, ...) in export_cell_accessor.cc.o\n      void boost::python::class_<dealii::python::CellAccessorWrapper, boost::python::detail::not_specified, boost::python::detail::not_specified, boost::python::detail::not_specified>::def_impl<dealii::python::CellAccessorWrapper, void (dealii::python::CellAccessorWrapper::*)(int, dealii::python::PointWrapper&), boost::python::detail::def_helper<char [69], boost::python::detail::keywords<3ul>, boost::python::detail::not_specified, boost::python::detail::not_specified> >(dealii::python::CellAccessorWrapper*, char const*, void (dealii::python::CellAccessorWrapper::*)(int, dealii::python::PointWrapper&), boost::python::detail::def_helper<char [69], boost::python::detail::keywords<3ul>, boost::python::detail::not_specified, boost::python::detail::not_specified> const&, ...) in export_cell_accessor.cc.o\n      void boost::python::class_<dealii::python::CellAccessorWrapper, boost::python::detail::not_specified, boost::python::detail::not_specified, boost::python::detail::not_specified>::def_impl<dealii::python::CellAccessorWrapper, dealii::python::PointWrapper (dealii::python::CellAccessorWrapper::*)(int) const, boost::python::detail::def_helper<char [69], boost::python::detail::keywords<2ul>, boost::python::detail::not_specified, boost::python::detail::not_specified> >(dealii::python::CellAccessorWrapper*, char const*, dealii::python::PointWrapper (dealii::python::CellAccessorWrapper::*)(int) const, boost::python::detail::def_helper<char [69], boost::python::detail::keywords<2ul>, boost::python::detail::not_specified, boost::python::detail::not_specified> const&, ...) in export_cell_accessor.cc.o\n      void boost::python::detail::def_init_aux<boost::python::class_<dealii::python::PointWrapper, boost::python::detail::not_specified, boost::python::detail::not_specified, boost::python::detail::not_specified>, boost::python::default_call_policies, boost::mpl::vector1<boost::python::list>, boost::mpl::size<boost::mpl::vector1<boost::python::list> > >(boost::python::class_<dealii::python::PointWrapper, boost::python::detail::not_specified, boost::python::detail::not_specified, boost::python::detail::not_specified>&, boost::mpl::vector1<boost::python::list> const&, boost::mpl::size<boost::mpl::vector1<boost::python::list> >, boost::python::default_call_policies const&, char const*, std::__1::pair<boost::python::detail::keyword const*, boost::python::detail::keyword const*> const&) in export_point.cc.o\n      void boost::python::detail::def_init_aux<boost::python::class_<dealii::python::TriangulationWrapper, boost::python::detail::not_specified, boost::python::detail::not_specified, boost::python::detail::not_specified>, boost::python::default_call_policies, boost::mpl::vector1<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>, boost::mpl::size<boost::mpl::vector1<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&> > >(boost::python::class_<dealii::python::TriangulationWrapper, boost::python::detail::not_specified, boost::python::detail::not_specified, boost::python::detail::not_specified>&, boost::mpl::vector1<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&> const&, boost::mpl::size<boost::mpl::vector1<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&> >, boost::python::default_call_policies const&, char const*, std::__1::pair<boost::python::detail::keyword const*, boost::python::detail::keyword const*> const&) in export_triangulation.cc.o\n      void boost::python::detail::def_init_aux<boost::python::class_<dealii::python::TriangulationWrapper, boost::python::detail::not_specified, boost::python::detail::not_specified, boost::python::detail::not_specified>, boost::python::default_call_policies, boost::mpl::vector2<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>, boost::mpl::size<boost::mpl::vector2<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&> > >(boost::python::class_<dealii::python::TriangulationWrapper, boost::python::detail::not_specified, boost::python::detail::not_specified, boost::python::detail::not_specified>&, boost::mpl::vector2<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&> const&, boost::mpl::size<boost::mpl::vector2<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&> >, boost::python::default_call_policies const&, char const*, std::__1::pair<boost::python::detail::keyword const*, boost::python::detail::keyword const*> const&) in export_triangulation.cc.o\n      ...\n  \"boost::python::objects::register_dynamic_id_aux(boost::python::type_info, std::__1::pair<void*, boost::python::type_info> (*)(void*))\", referenced from:\n      dealii::python::export_cell_accessor() in export_cell_accessor.cc.o\n      dealii::python::export_point() in export_point.cc.o\n      dealii::python::export_triangulation() in export_triangulation.cc.o\n  \"boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::text_iarchive_impl(std::__1::basic_istream<char, std::__1::char_traits<char> >&, unsigned int)\", referenced from:\n      dealii::python::TriangulationWrapper::load(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) in triangulation_wrapper.cc.o\n  \"boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)\", referenced from:\n      boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::save_override(boost::archive::class_name_type const&) in triangulation_wrapper.cc.o\n  \"boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::text_oarchive_impl(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, unsigned int)\", referenced from:\n      dealii::python::TriangulationWrapper::save(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in triangulation_wrapper.cc.o\n  \"boost::archive::basic_text_iprimitive<std::__1::basic_istream<char, std::__1::char_traits<char> > >::~basic_text_iprimitive()\", referenced from:\n      dealii::python::TriangulationWrapper::load(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) in triangulation_wrapper.cc.o\n      boost::archive::text_iarchive::~text_iarchive() in triangulation_wrapper.cc.o\n      boost::archive::text_iarchive::~text_iarchive() in triangulation_wrapper.cc.o\n  \"boost::archive::basic_text_oprimitive<std::__1::basic_ostream<char, std::__1::char_traits<char> > >::~basic_text_oprimitive()\", referenced from:\n      dealii::python::TriangulationWrapper::save(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in triangulation_wrapper.cc.o\n      boost::archive::text_oarchive::~text_oarchive() in triangulation_wrapper.cc.o\n      boost::archive::text_oarchive::~text_oarchive() in triangulation_wrapper.cc.o\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n```\n\nSee https://github.com/dealii/dealii/issues/3057.\n\n@KineticTheory please check if it still works with Intel compilers. Otherwise we need to find a way to keep both cases working.\n\nTODO:\n- [x] check that `spack install dealii@develop~oce` builds fine without those linking errors.\n",
    "performed_via_github_app": null
}