{
    "url": "https://api.github.com/repos/spack/spack/issues/21618",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/21618/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/21618/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/21618/events",
    "html_url": "https://github.com/spack/spack/pull/21618",
    "id": 806223384,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NTcxNjg1OTE2",
    "number": 21618,
    "title": "specs: use lazy lexicographic comparison instead of key_ordering",
    "user": {
        "login": "tgamblin",
        "id": 299842,
        "node_id": "MDQ6VXNlcjI5OTg0Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/299842?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tgamblin",
        "html_url": "https://github.com/tgamblin",
        "followers_url": "https://api.github.com/users/tgamblin/followers",
        "following_url": "https://api.github.com/users/tgamblin/following{/other_user}",
        "gists_url": "https://api.github.com/users/tgamblin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tgamblin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tgamblin/subscriptions",
        "organizations_url": "https://api.github.com/users/tgamblin/orgs",
        "repos_url": "https://api.github.com/users/tgamblin/repos",
        "events_url": "https://api.github.com/users/tgamblin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tgamblin/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 1474769306,
            "node_id": "MDU6TGFiZWwxNDc0NzY5MzA2",
            "url": "https://api.github.com/repos/spack/spack/labels/e4s",
            "name": "e4s",
            "color": "5224ad",
            "default": false,
            "description": ""
        },
        {
            "id": 460427403,
            "node_id": "MDU6TGFiZWw0NjA0Mjc0MDM=",
            "url": "https://api.github.com/repos/spack/spack/labels/performance",
            "name": "performance",
            "color": "c2e0c6",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2021-02-11T09:40:18Z",
    "updated_at": "2021-04-01T03:48:12Z",
    "closed_at": "2021-03-31T21:39:24Z",
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
        "url": "https://api.github.com/repos/spack/spack/pulls/21618",
        "html_url": "https://github.com/spack/spack/pull/21618",
        "diff_url": "https://github.com/spack/spack/pull/21618.diff",
        "patch_url": "https://github.com/spack/spack/pull/21618.patch"
    },
    "body": "We have been using the `@llnl.util.lang.key_ordering` decorator for specs and most of their components. This leverages the fact that in Python, tuple comparison is lexicographic. It allows you to implement a `_cmp_key` method on your class, and have `__eq__`, `__lt__`, etc. implemented automatically using that key. For example, you might use tuple keys to implement comparison, e.g.:\r\n\r\n```python\r\nclass Widget:\r\n    # author implements this\r\n    def _cmp_key(self):\r\n        return (\r\n            self.a,\r\n            self.b,\r\n            (self.c, self.d),\r\n            self.e\r\n        )\r\n\r\n    # operators are generated by @key_ordering\r\n    def __eq__(self, other):\r\n        return self._cmp_key() == other._cmp_key()\r\n\r\n    def __lt__(self):\r\n        return self._cmp_key() < other._cmp_key()\r\n\r\n    # etc.\r\n```\r\n\r\nThe issue there for simple comparators is that we have to build the tuples *and* we have to generate all the values in them up front. When implementing comparisons for large data structures, this can be costly.\r\n\r\nThis PR replaces `@key_ordering` with a new decorator, `@lazy_lexicographic_ordering`. Lazy lexicographic comparison maps the tuple comparison shown above to generator functions. Instead of comparing based on pre-constructed tuple keys, users of this decorator can compare using elements from a generator. So, you'd write:\r\n\r\n```python\r\n@lazy_lexicographic_ordering\r\nclass Widget:\r\n    def _cmp_iter(self):\r\n        yield a\r\n        yield b\r\n        def cd_fun():\r\n            yield c\r\n            yield d\r\n        yield cd_fun\r\n        yield e\r\n\r\n    # operators are added by decorator (but are a bit more complex)\r\n```\r\n\r\nThere are no tuples that have to be pre-constructed, and the generator does not have to complete. Instead of tuples, we simply make functions that lazily yield what would've been in the tuple. If a yielded value is a `callable`, the comparison functions will call it and recursively compare it. The comparator just walks the data structure like you'd expect it to.\r\n\r\nThe ``@lazy_lexicographic_ordering`` decorator handles the details of implementing comparison operators, and the ``Widget`` implementor only has to worry about writing ``_cmp_iter``, and making sure the elements in it are also comparable.\r\n\r\nUsing this PR shaves another 1.5 sec off the runtime of `spack buildcache list`, and it also speeds up Spec comparison by about 30%. The runtime improvement comes mostly from two things:\r\n\r\n1. lazily stopping the comparison as soon as possible (e.g., many specs just have different names, which is the firs thing the lazy generators return)\r\n2. avoiding the use of `hash()`  in `_cmp_iter()` (it was used in `_cmp_key()` before)",
    "performed_via_github_app": null
}