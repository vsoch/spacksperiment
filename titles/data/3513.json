{
    "url": "https://api.github.com/repos/spack/spack/issues/3513",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/3513/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/3513/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/3513/events",
    "html_url": "https://github.com/spack/spack/issues/3513",
    "id": 215945972,
    "node_id": "MDU6SXNzdWUyMTU5NDU5NzI=",
    "number": 3513,
    "title": "Separate Hashes for Install Directories vs. Modules",
    "user": {
        "login": "citibeth",
        "id": 1924215,
        "node_id": "MDQ6VXNlcjE5MjQyMTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1924215?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/citibeth",
        "html_url": "https://github.com/citibeth",
        "followers_url": "https://api.github.com/users/citibeth/followers",
        "following_url": "https://api.github.com/users/citibeth/following{/other_user}",
        "gists_url": "https://api.github.com/users/citibeth/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/citibeth/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/citibeth/subscriptions",
        "organizations_url": "https://api.github.com/users/citibeth/orgs",
        "repos_url": "https://api.github.com/users/citibeth/repos",
        "events_url": "https://api.github.com/users/citibeth/events{/privacy}",
        "received_events_url": "https://api.github.com/users/citibeth/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 446634397,
            "node_id": "MDU6TGFiZWw0NDY2MzQzOTc=",
            "url": "https://api.github.com/repos/spack/spack/labels/discussion",
            "name": "discussion",
            "color": "a87f5a",
            "default": false,
            "description": null
        },
        {
            "id": 446626162,
            "node_id": "MDU6TGFiZWw0NDY2MjYxNjI=",
            "url": "https://api.github.com/repos/spack/spack/labels/hashes",
            "name": "hashes",
            "color": "9a69b7",
            "default": false,
            "description": null
        },
        {
            "id": 446632829,
            "node_id": "MDU6TGFiZWw0NDY2MzI4Mjk=",
            "url": "https://api.github.com/repos/spack/spack/labels/modules",
            "name": "modules",
            "color": "fef2c0",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": {
        "login": "alalazo",
        "id": 4199709,
        "node_id": "MDQ6VXNlcjQxOTk3MDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4199709?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/alalazo",
        "html_url": "https://github.com/alalazo",
        "followers_url": "https://api.github.com/users/alalazo/followers",
        "following_url": "https://api.github.com/users/alalazo/following{/other_user}",
        "gists_url": "https://api.github.com/users/alalazo/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/alalazo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/alalazo/subscriptions",
        "organizations_url": "https://api.github.com/users/alalazo/orgs",
        "repos_url": "https://api.github.com/users/alalazo/repos",
        "events_url": "https://api.github.com/users/alalazo/events{/privacy}",
        "received_events_url": "https://api.github.com/users/alalazo/received_events",
        "type": "User",
        "site_admin": false
    },
    "assignees": [
        {
            "login": "alalazo",
            "id": 4199709,
            "node_id": "MDQ6VXNlcjQxOTk3MDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4199709?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alalazo",
            "html_url": "https://github.com/alalazo",
            "followers_url": "https://api.github.com/users/alalazo/followers",
            "following_url": "https://api.github.com/users/alalazo/following{/other_user}",
            "gists_url": "https://api.github.com/users/alalazo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alalazo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alalazo/subscriptions",
            "organizations_url": "https://api.github.com/users/alalazo/orgs",
            "repos_url": "https://api.github.com/users/alalazo/repos",
            "events_url": "https://api.github.com/users/alalazo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alalazo/received_events",
            "type": "User",
            "site_admin": false
        }
    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2017-03-22T03:55:32Z",
    "updated_at": "2019-12-09T13:36:36Z",
    "closed_at": "2019-12-09T13:36:36Z",
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "@tgamblin @healther @adamjstewart \r\n\r\nSpack currently creates *install directories* and *modules*, both based on a fully concretized spec (FCS).  Install directories and modules are identified by hash; and the same hash algorithm is currently used to generate the hash used to identify both types of objects.  Using the same hash for both seems intuitively correct.  However, recent discussion on #3501 suggests that it might actually be incorrect; and that Spack might benefit from decoupling of the hash used to identify install directories vs. modules.\r\n\r\nHashes are useful for efficiently labelling two things as \"same\" or \"possibly different.\"  If two install directories have the same hash, then we can surmise that *their contents are the same*.  Similarly, if a FCS-A hashes to hash-A, and Spack finds an install directory labelled with hash-A, then Spack can (and does) surmise that building FCS-A would result in a directory that is \"the same\" as the install directory it just found; and so it does not need to re-build.  Note that our notion of \"the same\" has been left fuzzy; we care about functional equivalence, not byte-for-byte equivalence of every file in the install directory.\r\n\r\nHashes are not always perfect.  It is OK if FCS-A and FCS-B hash to something different, even if their install directories are the same.  That will result in unnecessary builds and annoyed users, but won't break anything.   However, the converse is *not* OK.  If FCS-A and FCS-B hash to the same thing, then their install directories *must* be the same.  (This is why packaging systems like `pip` cause problems for Spack; they modify their install directory after Spack is done installing them).\r\n\r\nNow suppose fully concretized spec X involves a run dependency Y.  Should Y be included in the hash for X?  Looking at the install directory... If we accept for now that run dependencies do not affect the contents of the install directory, then clearly Y should not be included in the hash.  BUT looking at modules... run dependencies *do* materially affect the contents of the generated module.  Therefore, run dependencies *do* need to be included in the hash used to label the module.\r\n\r\n*Conclusion*:  **To be fully correct, the hash algorithm used for modules and install directories need to be different.**  This of course might be user-unfriendly: it is convenient for them to be the same.  But it seems that the simplest, \"purest\" system would have the two use different hashes.  Maybe there's some clever way to hide this from the user.  Or maybe the algorithm laid out in #3501 can be seen more simply with this understanding.\r\n\r\nUnfortunately, it doesn't stop there.  Once we start removing some dependencies from the install-dir or module hash, we will want to keep others.  For example... build dependencies should be hashed (eg if they're a compiler), except when they shouldn't be (for example, if Bison is used, and the parser generated by any Bison version is functionally equivalent; or if the dependency is doxygen and we just don't want docs to affect the hash).  Similarly, run dependencies shouldn't be hashed for install directories... except when they should be; maybe a full path to a run dependency snuck in there somehow.\r\n\r\nTo really get it right, it seems we will need to give users control over whether individual dependencies are/are not hashed, for each hash algorithm.  Sure, we can have defaults based on the deptype.  But those defaults will need to be overridden 5% of the time.\r\n\r\nIn the meantime.... without distinct hashes for modules vs. install directories, and without fine-grained control over what goes in the hash... Spack errs on the side of caution.  It puts everything in the hash, and now and then annoys users with unnecessary rebuilds.\r\n",
    "performed_via_github_app": null
}