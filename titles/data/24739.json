{
    "url": "https://api.github.com/repos/spack/spack/issues/24739",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/24739/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/24739/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/24739/events",
    "html_url": "https://github.com/spack/spack/pull/24739",
    "id": 938327848,
    "node_id": "MDExOlB1bGxSZXF1ZXN0Njg0NzM2MDYy",
    "number": 24739,
    "title": "Fix incorrect full hashes in binary index",
    "user": {
        "login": "scottwittenburg",
        "id": 6527504,
        "node_id": "MDQ6VXNlcjY1Mjc1MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6527504?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/scottwittenburg",
        "html_url": "https://github.com/scottwittenburg",
        "followers_url": "https://api.github.com/users/scottwittenburg/followers",
        "following_url": "https://api.github.com/users/scottwittenburg/following{/other_user}",
        "gists_url": "https://api.github.com/users/scottwittenburg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/scottwittenburg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/scottwittenburg/subscriptions",
        "organizations_url": "https://api.github.com/users/scottwittenburg/orgs",
        "repos_url": "https://api.github.com/users/scottwittenburg/repos",
        "events_url": "https://api.github.com/users/scottwittenburg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/scottwittenburg/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2021-07-06T23:11:11Z",
    "updated_at": "2021-07-09T18:18:16Z",
    "closed_at": "2021-07-09T18:18:15Z",
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "pull_request": {
        "url": "https://api.github.com/repos/spack/spack/pulls/24739",
        "html_url": "https://github.com/spack/spack/pull/24739",
        "diff_url": "https://github.com/spack/spack/pull/24739.diff",
        "patch_url": "https://github.com/spack/spack/pull/24739.patch"
    },
    "body": "The process of updating the index of a binary mirror involves iterating over the spec.yaml files in the mirror and adding each one to a temporary database, then writing out the database using db._write_to_file().  There has been an issue observed when updating the index of binary mirrors which was only reproducible with a large mirror with a lot of versions of the various specs in the environment.  The issue resulted in the regenerated index having full hash values on specs not matching the full hashes in the individual spec.yaml files from which the index was built.\r\n\r\nDebugging the problem indicated that a spec could be added to the db as a dependency of something else (possibly an old or out of date spec.yaml), and then when it's again encountered directly (not as a dependency, but because we read its spec.yaml and added it explicitly), the database code would find the dag hash already present and not overwrite it.\r\n\r\nThis change relaxes the guard against re-adding specs to the db so that if the dag hash is already in the db, but the full hash in the install record doesn't match that of the spec we're adding, then we still add the spec to the db, overwriting the existing record.  The previous less-relaxed guard is still used before calling _add() recursively, so we should only ever overwrite an install record when `db._add()`-ing a spec directly, never when `db._add()`-ing it as a dependency of something else.",
    "performed_via_github_app": null
}