{
    "url": "https://api.github.com/repos/spack/spack/issues/3158",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/3158/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/3158/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/3158/events",
    "html_url": "https://github.com/spack/spack/issues/3158",
    "id": 208135864,
    "node_id": "MDU6SXNzdWUyMDgxMzU4NjQ=",
    "number": 3158,
    "title": "download of archived patches is broken on macOS",
    "user": {
        "login": "davydden",
        "id": 8023934,
        "node_id": "MDQ6VXNlcjgwMjM5MzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8023934?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davydden",
        "html_url": "https://github.com/davydden",
        "followers_url": "https://api.github.com/users/davydden/followers",
        "following_url": "https://api.github.com/users/davydden/following{/other_user}",
        "gists_url": "https://api.github.com/users/davydden/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/davydden/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/davydden/subscriptions",
        "organizations_url": "https://api.github.com/users/davydden/orgs",
        "repos_url": "https://api.github.com/users/davydden/repos",
        "events_url": "https://api.github.com/users/davydden/events{/privacy}",
        "received_events_url": "https://api.github.com/users/davydden/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 73908754,
            "node_id": "MDU6TGFiZWw3MzkwODc1NA==",
            "url": "https://api.github.com/repos/spack/spack/labels/bug",
            "name": "bug",
            "color": "fc2929",
            "default": true,
            "description": null
        },
        {
            "id": 446643530,
            "node_id": "MDU6TGFiZWw0NDY2NDM1MzA=",
            "url": "https://api.github.com/repos/spack/spack/labels/fetching",
            "name": "fetching",
            "color": "fbca04",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2017-02-16T14:26:08Z",
    "updated_at": "2017-02-16T14:56:03Z",
    "closed_at": "2017-02-16T14:55:55Z",
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "subj\r\n```\r\n$ spack install nwchem\r\n==> Installing nwchem\r\n==> netlib-scalapack is already installed in /Users/davydden/spack/opt/spack/darwin-sierra-x86_64/clang-8.0.0-apple/netlib-scalapack-2.0.2-gu4tjf4bjvtia3ohzjqbickedmywqslk\r\n==> python is already installed in /Users/davydden/spack/opt/spack/darwin-sierra-x86_64/clang-8.0.0-apple/python-2.7.13-7woofgampo4qcmwrv624fzpe6afpsd4c\r\n==> openmpi is already installed in /Users/davydden/spack/opt/spack/darwin-sierra-x86_64/clang-8.0.0-apple/openmpi-2.0.2-oos4cxprn2bislzhc3rbc3lo4dadginw\r\n==> openblas is already installed in /Users/davydden/spack/opt/spack/darwin-sierra-x86_64/clang-8.0.0-apple/openblas-0.2.19-xg7etkjyo7xjnvuojsdc2xoixesxoerh\r\n==> Using cached archive: /Users/davydden/spack/var/spack/cache/nwchem/nwchem-6.6.tar.gz\r\n==> Staging archive: /Users/davydden/spack/var/spack/stage/nwchem-6.6-dgqpkgxfjzir7czxru2gxo4heww7nxnq/Nwchem-6.6.revision27746-src.2015-10-20.tar.gz\r\n==> Created stage in /Users/davydden/spack/var/spack/stage/nwchem-6.6-dgqpkgxfjzir7czxru2gxo4heww7nxnq\r\n==> Using cached archive: /Users/davydden/spack/var/spack/cache/nwchem/Tddft_mxvec20.patch.gz\r\n==> Staging archive: /Users/davydden/spack/var/spack/stage/spack-stage-graY2T/Tddft_mxvec20.patch.gz\r\ngunzip: /Users/davydden/spack/var/spack/stage/spack-stage-graY2T/Tddft_mxvec20.patch.gz is not a regular file\r\n==> Patch http://www.nwchem-sw.org/images/Tddft_mxvec20.patch.gz failed.\r\n==> Error: ProcessError: Command exited with status 1:\r\n    '/usr/bin/gunzip' '/Users/davydden/spack/var/spack/stage/spack-stage-graY2T/Tddft_mxvec20.patch.gz'\r\n/Users/davydden/spack/lib/spack/spack/package.py:1020, in do_patch:\r\n     967      def do_patch(self):\r\n     968          \"\"\"Calls do_stage(), then applied patches to the expanded tarball if they\r\n     969             haven't been applied already.\"\"\"\r\n     970          if not self.spec.concrete:\r\n     971              raise ValueError(\"Can only patch concrete packages.\")\r\n     972\r\n     973          # Kick off the stage first.\r\n     974          self.do_stage()\r\n     975\r\n     976          # Package can add its own patch function.\r\n     977          has_patch_fun = hasattr(self, 'patch') and callable(self.patch)\r\n     978\r\n     979          # If there are no patches, note it.\r\n     980          if not self.patches and not has_patch_fun:\r\n     981              tty.msg(\"No patches needed for %s\" % self.name)\r\n     982              return\r\n     983\r\n     984          # Construct paths to special files in the archive dir used to\r\n     985          # keep track of whether patches were successfully applied.\r\n     986          archive_dir = self.stage.source_path\r\n     987          good_file = join_path(archive_dir, '.spack_patched')\r\n     988          no_patches_file = join_path(archive_dir, '.spack_no_patches')\r\n     989          bad_file = join_path(archive_dir, '.spack_patch_failed')\r\n     990\r\n     991          # If we encounter an archive that failed to patch, restage it\r\n     992          # so that we can apply all the patches again.\r\n     993          if os.path.isfile(bad_file):\r\n     994              tty.msg(\"Patching failed last time. Restaging.\")\r\n     995              self.stage.restage()\r\n     996\r\n     997          self.stage.chdir_to_source()\r\n     998\r\n     999          # If this file exists, then we already applied all the patches.\r\n     1000         if os.path.isfile(good_file):\r\n     1001             tty.msg(\"Already patched %s\" % self.name)\r\n     1002             return\r\n     1003         elif os.path.isfile(no_patches_file):\r\n     1004             tty.msg(\"No patches needed for %s\" % self.name)\r\n     1005             return\r\n     1006\r\n     1007         # Apply all the patches for specs that match this one\r\n     1008         patched = False\r\n     1009         for spec, patch_list in self.patches.items():\r\n     1010             if self.spec.satisfies(spec):\r\n     1011                 for patch in patch_list:\r\n     1012                     try:\r\n     1013                         patch.apply(self.stage)\r\n     1014                         tty.msg('Applied patch %s' % patch.path_or_url)\r\n     1015                         patched = True\r\n     1016                     except:\r\n     1017                         # Touch bad file if anything goes wrong.\r\n     1018                         tty.msg('Patch %s failed.' % patch.path_or_url)\r\n     1019                         touch(bad_file)\r\n  >> 1020                         raise\r\n     1021\r\n     1022         if has_patch_fun:\r\n     1023             try:\r\n     1024                 self.patch()\r\n     1025                 tty.msg(\"Ran patch() for %s\" % self.name)\r\n     1026                 patched = True\r\n     1027             except:\r\n     1028                 tty.msg(\"patch() function failed for %s\" % self.name)\r\n     1029                 touch(bad_file)\r\n     1030                 raise\r\n     1031\r\n     1032         # Get rid of any old failed file -- patches have either succeeded\r\n     1033         # or are not needed.  This is mostly defensive -- it's needed\r\n     1034         # if the restage() method doesn't clean *everything* (e.g., for a repo)\r\n     1035         if os.path.isfile(bad_file):\r\n     1036             os.remove(bad_file)\r\n     1037\r\n     1038         # touch good or no patches file so that we skip next time.\r\n     1039         if patched:\r\n     1040             touch(good_file)\r\n     1041         else:\r\n     1042             touch(no_patches_file)\r\n```\r\n\r\np.s. I do have a trivial `config.yaml`, if it matters:\r\n```\r\nconfig:\r\n  build_stage:\r\n    - $spack/var/spack/stage\r\n```",
    "performed_via_github_app": null
}