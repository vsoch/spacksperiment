{
    "url": "https://api.github.com/repos/spack/spack/issues/2168",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/2168/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/2168/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/2168/events",
    "html_url": "https://github.com/spack/spack/pull/2168",
    "id": 186055780,
    "node_id": "MDExOlB1bGxSZXF1ZXN0OTE0NzY3MDc=",
    "number": 2168,
    "title": "Simplified directory layout trees with symlinks",
    "user": {
        "login": "scheibelp",
        "id": 1659704,
        "node_id": "MDQ6VXNlcjE2NTk3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1659704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/scheibelp",
        "html_url": "https://github.com/scheibelp",
        "followers_url": "https://api.github.com/users/scheibelp/followers",
        "following_url": "https://api.github.com/users/scheibelp/following{/other_user}",
        "gists_url": "https://api.github.com/users/scheibelp/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/scheibelp/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/scheibelp/subscriptions",
        "organizations_url": "https://api.github.com/users/scheibelp/orgs",
        "repos_url": "https://api.github.com/users/scheibelp/repos",
        "events_url": "https://api.github.com/users/scheibelp/events{/privacy}",
        "received_events_url": "https://api.github.com/users/scheibelp/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 446620495,
            "node_id": "MDU6TGFiZWw0NDY2MjA0OTU=",
            "url": "https://api.github.com/repos/spack/spack/labels/WIP",
            "name": "WIP",
            "color": "ededed",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2016-10-29T03:04:16Z",
    "updated_at": "2019-04-24T02:10:48Z",
    "closed_at": "2019-04-24T02:10:47Z",
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
        "url": "https://api.github.com/repos/spack/spack/pulls/2168",
        "html_url": "https://github.com/spack/spack/pull/2168",
        "diff_url": "https://github.com/spack/spack/pull/2168.diff",
        "patch_url": "https://github.com/spack/spack/pull/2168.patch"
    },
    "body": "Directed at: @mamelara @mplegendre (views)\nPossibly also of interest to: @alalazo (create simplified module names)\n\nI'm curious if folks have \"can it do x?\" questions (I don't expect folks to read the whole thing, although the high-level description is likely useful).\n\nHigh level:\n\nCreate simplified directory structure which allows a user to navigate a set of installed packages. This does not alter the existing installation paths but rather provides a view. More generally: define projections of packages to simplified names for other purposes, for example simplified module file names.\n\nA user first creates a collection of packages, called a \"tree\"; the must also define a projection of packages to simplified names. Given a projection, a set of symlinks can be created for a tree. This includes logic to detect collisions between simplified names. The projection configuration includes features which help avoid collisions.\n\n```\nspack tree create tree1\nspack tree add tree1 mpi\n(edit projections.yaml)\nspack tree --root=/usr/spackview/ --projection=p1 set tree1\nspack tree project tree1\n(creates symlinks under /usr/spackview/)\n```\n\nThe result could look something like:\n\n```\n/usr/spackview/\n    bzip2-1.0.6 (symlink to full spack prefix)\n    python-2.7.12\n    ...\n```\n\nFunctionality also allows for creating hierarchies (based on compiler, dependency, etc.)\n\nMore details below:\n1. spec.format syntax is now case-insensitive\n2. This also provides functionality to create symlinks to specific files in a package.\n### spec.format updates\n\nThis includes updates to spec.format so you can specify format strings that are more usable across different packages. For example:\n\n```\n\"${PACKAGE}-${VERSION}${DEP:mpi:-${PACKAGE}-${VERSION}${?:+psm:-psm}}${?:%gcc@4.4.7::-gnu-${COMPILERVER}}\"\n```\n\nBreaking it down:\n\n```\n${PACKAGE}-${VERSION}\n```\n\nMeans the same thing as before\n\n```\n${DEP:mpi:-${PACKAGE}-${VERSION}${?:+psm:-psm}}\n```\n\nThis includes the MPI implementation and version where applicable (and also differentiates builds with and without +psm). For packages which do not depend on MPI this will evaluate to an empty string.\n\n```\n${?:%gcc@4.4.7::-gnu-${COMPILERVER}}\n```\n\nThis is a 4-tuple, separated by ':'. This prints nothing if the compiler is gcc version 4.4.7 and otherwise prints something like e.g. gnu-4.8.5\n### Alternative projection syntax\n\nThis includes a yaml format for projecting specs to strings and is specifically oriented towards generating paths. This is an alternative to the updated spec.format syntax and is intended to be easier to use in more complex cases. For example:\n\n```\nall:\n  components:\n  - this:\"${PACKAGE}-${VERSION}\"\n  - dep: mpi\n```\n\nA package \"foo\" that doesn't depend on mpi would project to (for example) \"foo-3.5\". The \"dep\" component is recursive, so if \"foo\" did depend on mpi it would project to \"foo-3.5-openmpi-1.10.1\".\n\nTo get something like the spec.format example above the components section would appear as follows:\n\n```\nall:\n  components:\n  - this:\"${PACKAGE}-${VERSION}\"\n  - dep: mpi\n  - \"once:compiler:this?:%gcc@4.4.7::gnu-${compilerver}\"\nmpi\n  extra_components:\n  - this?:+psm:psm\n```\n\nOne of the intended benefits of component-based specifications is that one can consider package-specific variants on a per-package basis.\n\nOne can also create a hierarchy like:\n\n```\nall:\n  components:\n  -dep: mpi\n  - /\n  -this:\"${PACKAGE}-${VERSION}\"\n```\n\nThis will create a projection like:\n\n```\n/usr/spackview/\n    openmpi-1.10.2/foo-3.5\n```\n\nAs it is, this projection will actually fail if it includes mpi and a package which depends on it, since the package prefix contains the mpi prefix. To avoid that conflict, component syntax provides the \"top-level-basedir\" property.\n\n```\nall:\n  components:\n  - dep: mpi\n  - /\n  - this:\"${PACKAGE}-${VERSION}\"\nmpi:\n  top-level-basedir: mpi\n```\n\nWhich will create a hierarchy like:\n\n```\n/usr/spackview/\n    mpi/openmpi-1.10.2\n    openmpi-1.10.2/foo-3.5\n```\n",
    "performed_via_github_app": null
}