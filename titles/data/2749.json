{
    "url": "https://api.github.com/repos/spack/spack/issues/2749",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/2749/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/2749/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/2749/events",
    "html_url": "https://github.com/spack/spack/issues/2749",
    "id": 198994472,
    "node_id": "MDU6SXNzdWUxOTg5OTQ0NzI=",
    "number": 2749,
    "title": "Auto-Generation of Python Packages from PyPI and Anaconda",
    "user": {
        "login": "citibeth",
        "id": 1924215,
        "node_id": "MDQ6VXNlcjE5MjQyMTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1924215?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/citibeth",
        "html_url": "https://github.com/citibeth",
        "followers_url": "https://api.github.com/users/citibeth/followers",
        "following_url": "https://api.github.com/users/citibeth/following{/other_user}",
        "gists_url": "https://api.github.com/users/citibeth/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/citibeth/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/citibeth/subscriptions",
        "organizations_url": "https://api.github.com/users/citibeth/orgs",
        "repos_url": "https://api.github.com/users/citibeth/repos",
        "events_url": "https://api.github.com/users/citibeth/events{/privacy}",
        "received_events_url": "https://api.github.com/users/citibeth/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 446634397,
            "node_id": "MDU6TGFiZWw0NDY2MzQzOTc=",
            "url": "https://api.github.com/repos/spack/spack/labels/discussion",
            "name": "discussion",
            "color": "a87f5a",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2017-01-05T16:16:28Z",
    "updated_at": "2017-01-05T16:37:22Z",
    "closed_at": "2017-01-05T16:37:02Z",
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "@adamjstewart \r\n\r\nThe purpose of this issue is to explore an alternative to #2718 that goes beyond simple determination of PyPI URLs, and more toward automatic generation of Spack recipes based scraping the contents of the PyPI and Anaconda databases.\r\n\r\n(Please ignore obvious formatting issues for now; eg. proper construction of Spack classnames, version specs in `depends_on()`, etc.  Those are all fixable).\r\n\r\nPyPI\r\n-----\r\n\r\nEnclosed is a script providing basic auto-conversion from PyPI to Spack.  You can try it out, for example, with:\r\n```\r\npython pypi-to-spack.py pandas | less\r\n```\r\nYou can also try it out on other projects: `basemap`, `scipy`, `numpy`, etc.  I've learned the following lessons from experience with this script:\r\n\r\n1. Not all packages provide a PyPI URL at all; some are downloaded from non-PyPI sites (see `basemap`).  For those that don't provide such a PyPI URL, there is no PyPI-provided hash; we would have to download it ourselves.\r\n2. Not all packages provide a real usable URL for every version (see `numpy`), even if real useable URLs exist.\r\n3. Usually, all but the last PyPI version is \"hidden.\"  Things look a lot cleaner if you don't show hidden versions.\r\n4. Packages are frequently nearly bereft of dependencies (see `basemap`).  Even when dependencies are provided, they are often provided sporadically; frequently not even for the latest version!  And even on versions where they're provided, dependencies are often incomplete compared to what we have in Spack (see `pandas`).\r\n5. PyPI has 96,000 recipes, most of them junk.  We should not attempt to convert all of them; but rather, we should use PyPI as a source to mine Spack recipes for things we want.  Best of all, we can recursively \r\n\r\n[pypi-to-spack.py.txt](https://github.com/LLNL/spack/files/687694/pypi-to-spack.py.txt)\r\n6. If the PyPI URL works, there is no need for #2718, the full messy URL can be placed, automatically, in the generated `package.py` file.  (And if it doesn't work, there is no PyPI URL to be had; so there isn't a problem)\r\n\r\nAnaconda\r\n-----------\r\n\r\nAnaconda also has a database of recipes, on a per-version basis.  See, for example, their recipe for `pandas@0.19.2`: https://github.com/ContinuumIO/anaconda-recipes/blob/master/pandas/meta.yaml\r\n\r\nAnaconda recipes have a much more complete set of dependencies; separated into `build` and `run`, which match well with Spack's dep mechanism.  On the weaker side, they have no checksums, apparently relying on the goodwill of their download sources.  In any case... it would be reasonable to scrape the dependencies out of the Anaconda recipes to augment information drawn from PyPI above.\r\n\r\nConclusions\r\n-------------\r\n\r\nAuto-generating is an intriguing possibility.  It would be most useful as a way to automatically chase down an entire DAG of stuff from PyPI, and create Spack recipes for all packages that have not yet been put into Spack.  Imagine running one `spack create` command end ending up with 10 new packages...\r\n\r\nHowever, there are many caveats:\r\n\r\n1. Some Spack recipes have extra stuff that does not come out of PyPI --- env vars that need to be set before running `setup.py`, for example (see `numpy/package.py`).  These will have to be added by hand.\r\n\r\n2. It would be nice if there's a way to auto-update auto-generated recipes with new versions in the future.  That should be possible, if we're careful to make them machine-parseable.\r\n\r\n3. A similar technique could be used to update existing Python packages with new URLs and versions, from PyPI.  That could eliminate the need for further work on a `pypi` fetch method, moving toward this idea instead.\r\n\r\n4. Info from PyPI will need to be augmented from elsewhere to provide accurate dependencies.  That seems to be doable.\r\n\r\n",
    "performed_via_github_app": null
}