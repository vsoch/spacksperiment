{
    "url": "https://api.github.com/repos/spack/spack/issues/20501",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/20501/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/20501/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/20501/events",
    "html_url": "https://github.com/spack/spack/issues/20501",
    "id": 772568149,
    "node_id": "MDU6SXNzdWU3NzI1NjgxNDk=",
    "number": 20501,
    "title": "use gringo from clingo to find ground expressions for z3 rules",
    "user": {
        "login": "cosmicexplorer",
        "id": 1305167,
        "node_id": "MDQ6VXNlcjEzMDUxNjc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1305167?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cosmicexplorer",
        "html_url": "https://github.com/cosmicexplorer",
        "followers_url": "https://api.github.com/users/cosmicexplorer/followers",
        "following_url": "https://api.github.com/users/cosmicexplorer/following{/other_user}",
        "gists_url": "https://api.github.com/users/cosmicexplorer/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/cosmicexplorer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/cosmicexplorer/subscriptions",
        "organizations_url": "https://api.github.com/users/cosmicexplorer/orgs",
        "repos_url": "https://api.github.com/users/cosmicexplorer/repos",
        "events_url": "https://api.github.com/users/cosmicexplorer/events{/privacy}",
        "received_events_url": "https://api.github.com/users/cosmicexplorer/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 446623646,
            "node_id": "MDU6TGFiZWw0NDY2MjM2NDY=",
            "url": "https://api.github.com/repos/spack/spack/labels/concretization",
            "name": "concretization",
            "color": "006b75",
            "default": false,
            "description": null
        },
        {
            "id": 460427403,
            "node_id": "MDU6TGFiZWw0NjA0Mjc0MDM=",
            "url": "https://api.github.com/repos/spack/spack/labels/performance",
            "name": "performance",
            "color": "c2e0c6",
            "default": false,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-12-22T01:21:15Z",
    "updated_at": "2020-12-22T01:21:32Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Basic idea: [ASP](https://en.wikipedia.org/wiki/Answer_set_programming) is a family of constraint solvers spack uses since #19501 that let you write \"rules\", which often have implicit \"for all\" or \"there exists (uniquely?)\" quantifier expressions, e.g. https://github.com/spack/spack/blob/1d8aa34f52bec78a33c46db1dd881866dbe4e9b4/lib/spack/spack/solver/concretize.lp#L9-L19 Before (not strictly) any solve process, there's a grounding phase, which assigns values to variables in quantified expressions. The process afterward seems to line up more closely with other constraint solvers.\r\n\r\n[SMT](https://en.m.wikipedia.org/wiki/Satisfiability_modulo_theories) solvers (such as the miniscule attempt at https://github.com/spack/spack/tree/z3-concretizer) do not have any such grounding phase -- in essence _all_ terms must be ground in order to do a solve, outside of very specific decidable subsets of specific theories. [z3](z3prover.github.io/) doesn't even attempt to provide any indication where quantifier expressions were overbroad -- it simply tries to solve forever.\r\n\r\nI would like to eventually address the question of \"why doesn't this tool know when it's been running a really long time\" for both solvers, but that's not relevant to this ticket. Instead, I would like to steal the hard work of the potassco project on fast grounding and use it to solve my SMT problem. @tgamblin mentioned both that the `clingo` tools have a `--text` output option, even if it's hidden, and mentioned it would almost definitely be easier to turn off optimization in the grounder, and to let z3 handle the optimization angle.\r\n\r\nI don't know *exactly* yet whether the grounder is *resumable* (feels like it should be) or if it only dumps a single output, or if it dumps multiple, all at once. For this prototyping, using the command-line tool should be sufficient, but the python API is also always there (if slower).",
    "performed_via_github_app": null
}