{
    "url": "https://api.github.com/repos/spack/spack/issues/2777",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/2777/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/2777/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/2777/events",
    "html_url": "https://github.com/spack/spack/issues/2777",
    "id": 199403867,
    "node_id": "MDU6SXNzdWUxOTk0MDM4Njc=",
    "number": 2777,
    "title": "External Repo Adapters",
    "user": {
        "login": "citibeth",
        "id": 1924215,
        "node_id": "MDQ6VXNlcjE5MjQyMTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1924215?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/citibeth",
        "html_url": "https://github.com/citibeth",
        "followers_url": "https://api.github.com/users/citibeth/followers",
        "following_url": "https://api.github.com/users/citibeth/following{/other_user}",
        "gists_url": "https://api.github.com/users/citibeth/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/citibeth/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/citibeth/subscriptions",
        "organizations_url": "https://api.github.com/users/citibeth/orgs",
        "repos_url": "https://api.github.com/users/citibeth/repos",
        "events_url": "https://api.github.com/users/citibeth/events{/privacy}",
        "received_events_url": "https://api.github.com/users/citibeth/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 73908756,
            "node_id": "MDU6TGFiZWw3MzkwODc1Ng==",
            "url": "https://api.github.com/repos/spack/spack/labels/feature",
            "name": "feature",
            "color": "84b6eb",
            "default": false,
            "description": null
        },
        {
            "id": 466955297,
            "node_id": "MDU6TGFiZWw0NjY5NTUyOTc=",
            "url": "https://api.github.com/repos/spack/spack/labels/proposal",
            "name": "proposal",
            "color": "0e8a16",
            "default": false,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2017-01-08T05:20:07Z",
    "updated_at": "2017-01-08T17:24:59Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "@JavierCVilla @adamjstewart @hartzell   The purpose of this proposal is to design a framework to support ideas brought up in #2761 and #2750 and #2128.  Thoughts?\r\n\r\nGoals\r\n=====\r\n\r\nAllow Spack to take advantage of external software repositories.  Examples include: PyPI (Python), CRAN (R), CTAN (TeX), CPAN (Perl), npm (JavaScript), Bioconductor.  The main way Spack will do this is by mining the repositories for packages, and then building Spack packages out of them.\r\n\r\nThere is currently interest on doing this within Spack for both Python and R packages.  The goal of this thread is to design a pluggable API against which external repo adapters can be built.\r\n\r\n\r\nRepo Adapter\r\n============\r\n\r\nEach repo adapter will generate and manage Spack packages in its own Spack repository (and namespace), to be checked into Git with the rest of Spack.  For example, the `pypi` repo adapter would create files in the respository `var/spack/repos/pypi`, in the namespace `pypi` ( https://spack.readthedocs.io/en/latest/repositories.html#namespaces ).  Note that repo adapters are named after the *repository* from which they adapt packages, not the language of those packages.  Hence, the adapter should be called `pypi` or `cran`, not `python` or `r`.  There could be more than one repository for some language systems.  In other cases, the same package might occur in two or more repositories.  For example, many Python packages are listed both in PyPI and in the Anaconda repository.\r\n\r\nIdeally, there should be a one-to-one correspondence between Packages in the external repo and Spack packages created by the repo adapter.  (I say ideally because this might not be possible for some external repos; we will have to see).  Names in the Spack repo should correspond to names in the external repo.  (More formally, there should be a function `s=f(e)` such that if `e1` and `e2` are different, then `f(e1)` and `f(e2)` are also different).  In general, this mapping will account for \"issues\" in the external repo's names.  We might decide to relax some of Spack's naming rules to make this function easier (for example, the Spack prohibition on upper case).  In other words, some of Spack's naming rules might be specific to the `builtin` repository, not global.\r\n\r\nPackage Creation\r\n================\r\n\r\nSpack packages will be created in the adapted repo by the command `spack create`.  For example:\r\n```\r\nspack create -r pypi.scipy\r\n```\r\nThis command is *recursive*.  Meaning... it will call the `pypi` repo adapter to create the package `pypi.scipy` by mining the external repo.  This command will also create scipy's dependencies, if they are not already created.  That is important for the same reason that `spack install` is recursive by default: the user should not have to chase down dependencies by hand.\r\n\r\nWhen a package is created, Spack will mine the external repository for: name, description, homepage, versions (includes hashes and per-version URLs) and dependencies.  Each repo adapter will have its own Package superclass, which it can customize for its needs.  The resulting `package.py` files generated by the repo adapter will be standardized across all repo adapters, and will look something like this:\r\n\r\n```\r\nfrom spack import *\r\n\r\nclass Scipy(PyPIPackage):\r\n    \"\"\"SciPy (pronounced \"Sigh Pie\") is a Scientific Library for Python.\r\n    It provides many user-friendly and efficient numerical routines such\r\n    as routines for numerical integration and optimization.\"\"\"\r\n\r\n    homepage = \"http://www.scipy.org/\"\r\n    repo_name = 'scipy'\r\n    repo_homepage = \"https://pypi.python.org/pypi/scipy\"\r\n\r\n    extends('python')\r\n\r\n    version('0.18.1', '5fb5fb7ccb113ab3a039702b6c2f3327',\r\n            url=\"https://pypi.python.org/packages/22/41/b1538a75309ae4913cdbbdc8d1cc54cae6d37981d2759532c1aa37a41121/scipy-0.18.1.tar.gz\")\r\n    depends_on('python@2.6:2.8,3.2:', when='0.18.1')\r\n    depends_on('pypi.numpy@1.10', type=('build', 'run'), when='0.18.1')\r\n\r\n    version('0.17.0', '5ff2971e1ce90e762c59d2cd84837224',\r\n            url=\"https://pypi.python.org/packages/22/41/b1538a75309ae4913cdbbdc8d1cc54cae6d37981d2759532c1aa37a41121/scipy-0.17.0.tar.gz\")\r\n    depends_on('python@2.6:2.8,3.2:', when='0.17.0')\r\n    depends_on('pypi.numpy@1.09', type=('build', 'run'), when='0.17.0')\r\n\r\n# ----------- MANUAL DEPENDENCIS ---------------------\r\n    depends_on('pypi.nose')\r\n    depends_on('blas')\r\n    depends_on('lapack')\r\n\r\n# ----------- EDIT BELOW THIS LINE ONLY ------------------\r\n```\r\n\r\nNote the ways in which this is different from a typical manually built package:\r\n 1. The superclass is special for this repo adapter.\r\n 2. Dependencies and URLs are explicit per-version.\r\n 3. `depends_on()` directives are mixed with `version()` directives.\r\n 4. There is a link to where the package came from in the external repo.\r\n 5. `repo_name` unambiguously indicates the name of the package in the external repo.  This means that the name function `f()` above does not have to be invertible.\r\n 6. There is a clear separation between machine-managed and manually managed sections of the Package.  Users are allowed to add at the end of `packages.py`.\r\n 7. The `depends_on()` will frequently have version numbers, depending on the structure of the external repo.\r\n\r\nDependencies\r\n------------\r\n\r\nMany external repos are weak on dependencies, which are are missing, or incomplete.  It is expected that users will have to add dependencies to the \"MANUAL DEPENDENCIES\" section.  They are added here to allow the Spack repo adapter to parse them; especially if they are from within the same external repo.\r\n\r\nCustomization\r\n-------------\r\n\r\nAt the end of `package.py`, the user may customize things further.  Spack will not parse or manage this section of the file.  Customization is important for many packages with unique build requirements (eg, SciPy).  On the other hand, it may not be required for the vast majority of R packages.\r\n\r\n\r\nPackage Updating\r\n================\r\n\r\nSpack Repo adapters will be able to parse and re-generate auto-generated packages; that way, packages may be updated as they evolve.  The parsing/generating code can be shared by all repo adapters (i.e. a top-level `RepoAdapter` class).  Only the machine-generated portions of generated packages will be re-generated; manual portions will be copied verbatim.\r\n\r\nA package may be updated with (for example):\r\n```\r\nspack update pypi.scipy\r\n```\r\nThis will re-read the PyPI repository for `pypi.scipy`.  The `-r` and `-R` flags can be used to make Spack update package for dependencies and dependents of `pypi`, respectively.  If new dependencies have been added in the external repo, they will be added too in the Spack repo.\r\n\r\nIt is also possible to update an entire external repo, with `spack update pypi`.  This is needed for repos that do not specify dependency versions; one might not get a consistent build unless ALL relevant packages are updated.\r\n\r\n\r\nInternal API\r\n============\r\n\r\nTo support ths functionality, there needs to be a basic `RepoAdapter` class that can:\r\n 1. Know the name of this repo adapter (eg: `pypi`).\r\n 2. Provide a directory where packages are to be created.\r\n 3. Parse the Spack repo into `RepoPackage` classes (similar but different from existing `Package`).\r\n 4. Write out a `RepoPackage` to generate a `package.py` file.\r\n 5. Virtual method to query the external repo and update a RepoPackage object.\r\n 6. Walk the tree for `spack create` and `spack update`\r\n\r\nWith this infrastructure in place, repo adapter authors can focus on writing repo-specific code to query external repos and fill in `RepoPackage` objects with the information.\r\n",
    "performed_via_github_app": null
}