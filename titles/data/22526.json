{
    "url": "https://api.github.com/repos/spack/spack/issues/22526",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/22526/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/22526/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/22526/events",
    "html_url": "https://github.com/spack/spack/pull/22526",
    "id": 840148681,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NjAwMDU2Mjkw",
    "number": 22526,
    "title": "start of work to add debugedit to change DW_TAG_comp_dir",
    "user": {
        "login": "vsoch",
        "id": 814322,
        "node_id": "MDQ6VXNlcjgxNDMyMg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/814322?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vsoch",
        "html_url": "https://github.com/vsoch",
        "followers_url": "https://api.github.com/users/vsoch/followers",
        "following_url": "https://api.github.com/users/vsoch/following{/other_user}",
        "gists_url": "https://api.github.com/users/vsoch/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vsoch/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vsoch/subscriptions",
        "organizations_url": "https://api.github.com/users/vsoch/orgs",
        "repos_url": "https://api.github.com/users/vsoch/repos",
        "events_url": "https://api.github.com/users/vsoch/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vsoch/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 6,
    "created_at": "2021-03-24T20:42:17Z",
    "updated_at": "2021-07-24T05:20:51Z",
    "closed_at": "2021-07-24T05:20:51Z",
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
        "url": "https://api.github.com/repos/spack/spack/pulls/22526",
        "html_url": "https://github.com/spack/spack/pull/22526",
        "diff_url": "https://github.com/spack/spack/pull/22526.diff",
        "patch_url": "https://github.com/spack/spack/pull/22526.patch"
    },
    "body": "Update: we no longer need to dynamically read the `DW_AT_comp_dir` so the description below the line is no longer needed. The questions that I now have for this PR are:\r\n\r\n - should the function to run_debugedit be somewhere else?\r\n - what tests should we have (and given that we would need to read the attribute, how should we go about it?)\r\n - what about all the functions that assert that a binary is not relocatable - were they because of this issue and we can remove them? Which ones/parts?\r\n\r\n--------------------\r\nThis PR is not ready for an actual review, but I'm running into issues with using pyelftools to bootstrap and I'm opening it so we have a place for discussion. I'll provide complete details next.\r\n\r\nWe want to add debugedit (bootstrapped) to spack so that we can take a buildcache (compiled somewhere else) and use a tool called debugedit (recently added) to change the `DW_TAG_comp_dir` attributes in the dwarf_str section. Debugedit itself works fine to bootstrap - but in order for the command to work we first need to retrieve the previous path that is set in the binary (in practice I've seen it's the spack stage temporary directory). I tried to test different system tools that we might bootstrap (e.g., objdump, readelf, nm, reading abidw output) but all of the ideas I had were sort of hacks with awk or grep. This (I don't think) is something we want to introduce into spack.\r\n\r\nFor my next effort, I was able to write a small python script with [pyelftools](https://github.com/eliben/pyelftools) (in the code in this PR) to grab all these paths (in practice it's just one, but I suspect there could be cases when there are more than one). I would then need to bootstrap this library too, so I tried following the same strategy of clingo-bootstrap. I tried a lot of things, but nothing seemed to work. The error I see is that the encoding of the filesystem cannot be determined (and there is no encoding module). Here is what happens when we try to do the bootstrap:\r\n\r\n```bash\r\n[+] /home/vanessa/Desktop/Code/spack/env (external python-3.8.3-ulizfw5ii43bt57ht3zq4leowl44qndi)\r\n==> Installing py-setuptools-50.3.2-dc2giw5s32vulagtupoy5dhkyl3cjows\r\n==> No binary for py-setuptools-50.3.2-dc2giw5s32vulagtupoy5dhkyl3cjows found: installing from source\r\n==> Using cached archive: /home/vanessa/Desktop/Code/spack-dev/var/spack/cache/_source-cache/archive/ed/ed0519d27a243843b05d82a5e9d01b0b083d9934eaa3d02779a23da18077bd3c.zip\r\n==> No patches needed for py-setuptools\r\n==> py-setuptools: Executing phase: 'build'\r\n==> Error: ProcessError: Command exited with status 1:\r\n    '/home/vanessa/Desktop/Code/spack/env/bin/python3' '-s' 'setup.py' '--no-user-cfg' 'build'\r\n1 error found in build log:\r\n     18        '/home/vanessa/.spack/bootstrap/store/linux-ubuntu20.04-x86_64/gcc-9.3.0/py-setuptools-50.3.2-dc2giw5s32vulagtupoy5dhkyl3cjows\r\n           /lib/python3.8/site-packages',\r\n     19        '/home/vanessa/.spack/bootstrap/store/linux-ubuntu20.04-x86_64/gcc-9.3.0/py-setuptools-50.3.2-dc2giw5s32vulagtupoy5dhkyl3cjows\r\n           /lib64/python3.8/site-packages',\r\n     20        '/home/vanessa/Desktop/Code/spack/env/lib/python38.zip',\r\n     21        '/home/vanessa/Desktop/Code/spack/env/lib/python3.8',\r\n     22        '/home/vanessa/Desktop/Code/spack/env/lib/python3.8/lib-dynload',\r\n     23      ]\r\n  >> 24    Fatal Python error: init_fs_encoding: failed to get the Python codec of the filesystem encoding\r\n     25    Python runtime state: core initialized\r\n     26    ModuleNotFoundError: No module named 'encodings'\r\n     27    \r\n     28    Current thread 0x00007facd6249740 (most recent call first):\r\n     29    <no Python frame>\r\nSee build log for details:\r\n  /tmp/vanessa/spack-stage/spack-stage-py-setuptools-50.3.2-dc2giw5s32vulagtupoy5dhkyl3cjows/spack-build-out.txt\r\n==> Warning: Skipping build of py-pyelftools-0.27-aevd74hltmxatwcfqoqxwsjfyuoy2cir since py-setuptools-50.3.2-dc2giw5s32vulagtupoy5dhkyl3cjows failed\r\n==> Error: py-pyelftools-0.27-aevd74hltmxatwcfqoqxwsjfyuoy2cir: Package was not installed\r\n```\r\nI've tried both using the wheel with pip and the included here with setup.py, and I've also tried unsetting the sys.path so that other python isn't found, along with the PATH.  I can't seem to get around generating this error, although installing the package on the command line works fine.\r\n\r\n## How to work on this\r\n\r\nThis function will be triggered if we are installing from a binarycache, so I created one to do this:\r\n\r\n```bash\r\n# You need the package installed to create a buildcache\r\nspack install swig\r\n\r\n# Create a folder, create a cache for swig\r\nmkdir -p ./spack-cache\r\nspack buildcache create -d ./spack-cache swig\r\n\r\n# add the mirror and update the index\r\nspack mirror add mymirror ./spack-cache\r\nspack buildcache update-index -d spack-cache/\r\n\r\n# remove the package so it's not installed\r\nspack uninstall swig\r\n\r\n# install from buildcache\r\nspack buildcache install swig\r\n```\r\nI'm actually setting [this line](https://github.com/spack/spack/blob/develop/lib/spack/spack/binary_distribution.py#L1164) to be `==` so that the relocation triggers (for development only) because the paths are the same, but you could change your buildcache / environment / spack install if you want them to be different and not need to change this line. \r\n\r\nI pinged @alalazo in slack, and am providing this so he can reproduce my issue (and others can ping in to help too!)\r\n\r\nOther alternatives:\r\n - we could use a different method to get the path\r\n - we could store the path with the build cache so we don't need to parse the binary\r\n\r\nSigned-off-by: vsoch <vsoch@users.noreply.github.com>",
    "performed_via_github_app": null
}