{
    "url": "https://api.github.com/repos/spack/spack/issues/16045",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/16045/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/16045/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/16045/events",
    "html_url": "https://github.com/spack/spack/issues/16045",
    "id": 599747503,
    "node_id": "MDU6SXNzdWU1OTk3NDc1MDM=",
    "number": 16045,
    "title": "Support vendoring of Cargo dependencies",
    "user": {
        "login": "AndrewGaspar",
        "id": 2292643,
        "node_id": "MDQ6VXNlcjIyOTI2NDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2292643?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AndrewGaspar",
        "html_url": "https://github.com/AndrewGaspar",
        "followers_url": "https://api.github.com/users/AndrewGaspar/followers",
        "following_url": "https://api.github.com/users/AndrewGaspar/following{/other_user}",
        "gists_url": "https://api.github.com/users/AndrewGaspar/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/AndrewGaspar/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/AndrewGaspar/subscriptions",
        "organizations_url": "https://api.github.com/users/AndrewGaspar/orgs",
        "repos_url": "https://api.github.com/users/AndrewGaspar/repos",
        "events_url": "https://api.github.com/users/AndrewGaspar/events{/privacy}",
        "received_events_url": "https://api.github.com/users/AndrewGaspar/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 73908756,
            "node_id": "MDU6TGFiZWw3MzkwODc1Ng==",
            "url": "https://api.github.com/repos/spack/spack/labels/feature",
            "name": "feature",
            "color": "84b6eb",
            "default": false,
            "description": null
        },
        {
            "id": 446643530,
            "node_id": "MDU6TGFiZWw0NDY2NDM1MzA=",
            "url": "https://api.github.com/repos/spack/spack/labels/fetching",
            "name": "fetching",
            "color": "fbca04",
            "default": false,
            "description": null
        },
        {
            "id": 1888436240,
            "node_id": "MDU6TGFiZWwxODg4NDM2MjQw",
            "url": "https://api.github.com/repos/spack/spack/labels/rust",
            "name": "rust",
            "color": "B7410E",
            "default": false,
            "description": ""
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-04-14T17:45:54Z",
    "updated_at": "2020-04-14T20:49:30Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "To support Rust packages on air-gapped machines, it's necessary to support offline builds.\r\n\r\nDiscussed briefly offline with @adamjstewart \r\n\r\n### Rationale\r\n\r\nRust has a language-centric package manager called Cargo. This package manager is the primary way that Rust packages add third-party dependencies. Practically every Rust project uses at least some third-party dependency, so it's necessary to be able to pull them in some way. By default, Cargo attempts to pull dependencies from the Internet, which breaks offline builds that rely on `spack mirror`. However, Cargo supports vendoring dependencies via `cargo vendor`. Therefore, it should be possible to implement this in a way that keeps the entire process inside the spack ecosystem, and without packages having to jump through hoops.\r\n\r\n### Description\r\n\r\nPossible Solutions, ordered from most desirable to least desirable:\r\n#### Native Support for Vendoring from a Cargo.lock file\r\nThe best possible solution is for Spack to offer some way for a package to opt into vendoring the packages from its Cargo.lock file during the fetch phase. Native support for Cargo is useful because it provides an easy on-ramp for all Rust packages. You could imagine adding a `CargoPackage` base class that automates the entire fetch and build process for packages which use cargo as their top level build system.\r\n\r\nSince Cargo.lock checksums each dependency, it would be possible to verify the integrity of each package without having to resort to putting every cargo package into spack.\r\n\r\nIdeally, being able to invoke this behavior wouldn't require `CargoPackage` - you can imagine that there are some packages which use Rust internally that would like to be able to vendor their dependencies, but have a different top-level build system. So there should be some way for any package flavor to opt into this.\r\n\r\n#### Rust Packages Ship Releases That Vendor Dependencies\r\nAnother possibility is to just have every Rust package that Spack supports to ship their own vendored dependencies in their release tar balls. This solves the problem \"cleanly\" without any involvement from Spack, but it has some downsides:\r\n1) Most existing Rust projects do not do this, so anytime you'd want to add a Rust package, you'd have to request that the project maintainer issue releases with vendored dependencies.\r\n2) It means you can't just point spack at a \"crates.io\" URL - you'd need specialized releases hosted elsewhere.\r\n\r\n#### Support for Package-Overload of the Fetch Stage\r\nAnother solution is to just punt it to the package. However, this would still require feature work in Spack to allow a package to add additional steps to \"spack fetch\". It would also need to be run after the base package is downloaded so that the `Cargo.lock` file could be checked.\r\n\r\nThis would be maybe acceptable, but it would lead to each Rust package having to roll the fetch behavior themselves.\r\n\r\n#### Import All of crates.io into Spack\r\nYou could imagine just creating a spack package for every needed Rust crate in a given dependency tree. This is not desirable for a number of reasons:\r\n1) omg, _could_ you imagine?\r\n2) Rust is reluctant to fully support sharing library \"crate\" builds across separate Rust workspaces, so the build wouldn't really benefit from spack's model of sharing dependencies when possible. The library packages would essentially just be source distributions, and they wouldn't get built until the top level Rust package is built. I think it's technically possible to share crate builds, but it's not the typical workflow.\r\n3) Those library \"crates\" are not useful to non-Rust projects. They export a Rust ABI and interface - only executables and libraries which export a portable ABI (such as a C-style interface) are useful to other packages in Spack.\r\n4) You're essentially re-writing Cargo, which probably would lead to bugs down the line.\r\n\r\n### General information\r\n\r\n- [x] Spack Version: `0.14.1-624-1b0dbc09c`\r\n- [x] I have searched the issues of this repo and believe this is not a duplicate",
    "performed_via_github_app": null
}