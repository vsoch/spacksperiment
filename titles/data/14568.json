{
    "url": "https://api.github.com/repos/spack/spack/issues/14568",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/14568/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/14568/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/14568/events",
    "html_url": "https://github.com/spack/spack/issues/14568",
    "id": 552291302,
    "node_id": "MDU6SXNzdWU1NTIyOTEzMDI=",
    "number": 14568,
    "title": "Environment modifications tests fail under venvs",
    "user": {
        "login": "alalazo",
        "id": 4199709,
        "node_id": "MDQ6VXNlcjQxOTk3MDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4199709?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/alalazo",
        "html_url": "https://github.com/alalazo",
        "followers_url": "https://api.github.com/users/alalazo/followers",
        "following_url": "https://api.github.com/users/alalazo/following{/other_user}",
        "gists_url": "https://api.github.com/users/alalazo/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/alalazo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/alalazo/subscriptions",
        "organizations_url": "https://api.github.com/users/alalazo/orgs",
        "repos_url": "https://api.github.com/users/alalazo/repos",
        "events_url": "https://api.github.com/users/alalazo/events{/privacy}",
        "received_events_url": "https://api.github.com/users/alalazo/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 73908754,
            "node_id": "MDU6TGFiZWw3MzkwODc1NA==",
            "url": "https://api.github.com/repos/spack/spack/labels/bug",
            "name": "bug",
            "color": "fc2929",
            "default": true,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-01-20T13:12:57Z",
    "updated_at": "2020-04-14T14:01:24Z",
    "closed_at": "2020-04-14T14:01:23Z",
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "The modifications in #14496 make unit tests fail under virtual environment since apparently Python can't find standard libraries. The PR has been merged in an attempt to fix #14491, which was indeed caused by #14252 which tried to fix the absence of the `python` executable on RHEL 8.\r\n\r\n### Steps to reproduce the issue\r\n\r\n```console\r\n$ python3.7 -m venv py37\r\n$ . py37/bin/activate\r\n\r\n(py37) $ ls\r\npy37\r\n(py37) $ git clone https://github.com/spack/spack.git\r\n[ ... ]\r\n(py37) $ spack test -k environment_modifications -x\r\n[ ... ]\r\n============================================================= 2306 tests deselected ==============================================================\r\n============================================== 1 failed, 10 passed, 2306 deselected in 2.02 seconds ==============================================\r\n```\r\n\r\n### Error Message\r\n\r\n<details>\r\n<summary>Error message from failing test</summary>\r\n\r\n```console\r\n============================================================== test session starts ===============================================================\r\nplatform linux -- Python 3.7.6, pytest-3.2.5, py-1.4.34, pluggy-0.4.0\r\nrootdir: /home/culpo/tmp/spack-issues/14496/spack/lib/spack/spack/test, inifile: pytest.ini\r\ncollected 2340 items                                                                                                                              \r\n\r\nenvironment_modifications.py ..........F\r\n============================================================ short test summary info =============================================================\r\nFAIL environment_modifications.py::test_source_files\r\n\r\n=========================================================== slowest 20 test durations ============================================================\r\n0.21s call     environment_modifications.py::test_source_files\r\n0.07s call     environment_modifications.py::test_inspect_path\r\n0.03s call     environment_modifications.py::test_path_manipulation\r\n0.01s call     environment_modifications.py::test_append_flags\r\n0.01s call     environment_modifications.py::test_set\r\n0.01s call     environment_modifications.py::test_set_path\r\n0.00s setup    environment_modifications.py::test_unset\r\n0.00s call     environment_modifications.py::test_extend\r\n0.00s setup    environment_modifications.py::test_inspect_path\r\n0.00s setup    environment_modifications.py::test_set\r\n0.00s teardown environment_modifications.py::test_append_flags\r\n0.00s setup    environment_modifications.py::test_set_path\r\n0.00s call     environment_modifications.py::test_unset\r\n0.00s teardown environment_modifications.py::test_filter_system_paths\r\n0.00s setup    environment_modifications.py::test_source_files\r\n0.00s call     environment_modifications.py::test_extra_arguments\r\n0.00s teardown environment_modifications.py::test_extra_arguments\r\n0.00s setup    environment_modifications.py::test_path_manipulation\r\n0.00s setup    environment_modifications.py::test_exclude_paths_from_inspection\r\n0.00s teardown environment_modifications.py::test_unset\r\n==================================================================== FAILURES ====================================================================\r\n_______________________________________________________________ test_source_files ________________________________________________________________\r\n\r\nfiles_to_be_sourced = ['/home/culpo/tmp/spack-issues/14496/spack/lib/spack/spack/test/data/sourceme_first.sh', '/home/culpo/tmp/spack-issues...data/sourceme_parameters.sh', '/home/culpo/tmp/spack-issues/14496/spack/lib/spack/spack/test/data/sourceme_unicode.sh']\r\n\r\n    @pytest.mark.usefixtures('prepare_environment_for_tests')\r\n    def test_source_files(files_to_be_sourced):\r\n        \"\"\"Tests the construction of a list of environment modifications that are\r\n        the result of sourcing a file.\r\n        \"\"\"\r\n        env = EnvironmentModifications()\r\n        for filename in files_to_be_sourced:\r\n            if filename.endswith('sourceme_parameters.sh'):\r\n                env.extend(EnvironmentModifications.from_sourcing_file(\r\n                    filename, 'intel64'))\r\n            else:\r\n>               env.extend(EnvironmentModifications.from_sourcing_file(filename))\r\n\r\nenvironment_modifications.py:262: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n../util/environment.py:610: in from_sourcing_file\r\n    environment_after_sourcing_files(file_and_args, **kwargs),\r\n../util/environment.py:950: in environment_after_sourcing_files\r\n    f, environment=current_environment\r\n../util/environment.py:930: in _source_single_file\r\n    output = shell(source_file_arguments, output=str, env=environment)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <exe: ['/bin/bash', '-c']>\r\nargs = ('source /home/culpo/tmp/spack-issues/14496/spack/lib/spack/spack/test/data/sourceme_first.sh &> /dev/null && PYTHONHO...home/culpo/tmp/spack-issues/14496/py37/bin/python3\" -c \"import os; import json; print(json.dumps(dict(os.environ)))\"',)\r\nkwargs = {'env': {'CLUTTER_IM_MODULE': 'xim', 'COLORTERM': 'truecolor', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', 'DEFAULTS_PATH': '/usr/share/gconf/ubuntu.default.path', ...}}\r\nenv_arg = {'CLUTTER_IM_MODULE': 'xim', 'COLORTERM': 'truecolor', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', 'DEFAULTS_PATH': '/usr/share/gconf/ubuntu.default.path', ...}\r\nenv = {'CLUTTER_IM_MODULE': 'xim', 'COLORTERM': 'truecolor', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', 'DEFAULTS_PATH': '/usr/share/gconf/ubuntu.default.path', ...}\r\nfail_on_error = True, ignore_errors = (), input = None, output = <class 'str'>, error = None\r\nstreamify = <function Executable.__call__.<locals>.streamify at 0x7fa410e66680>, ostream = -1, close_ostream = False\r\n\r\n    def __call__(self, *args, **kwargs):\r\n        \"\"\"Run this executable in a subprocess.\r\n    \r\n            Parameters:\r\n                *args (str): Command-line arguments to the executable to run\r\n    \r\n            Keyword Arguments:\r\n                _dump_env (dict): Dict to be set to the environment actually\r\n                    used (envisaged for testing purposes only)\r\n                env (dict): The environment to run the executable with\r\n                extra_env (dict): Extra items to add to the environment\r\n                    (neither requires nor precludes env)\r\n                fail_on_error (bool): Raise an exception if the subprocess returns\r\n                    an error. Default is True. The return code is available as\r\n                    ``exe.returncode``\r\n                ignore_errors (int or list): A list of error codes to ignore.\r\n                    If these codes are returned, this process will not raise\r\n                    an exception even if ``fail_on_error`` is set to ``True``\r\n                input: Where to read stdin from\r\n                output: Where to send stdout\r\n                error: Where to send stderr\r\n    \r\n            Accepted values for input, output, and error:\r\n    \r\n            * python streams, e.g. open Python file objects, or ``os.devnull``\r\n            * filenames, which will be automatically opened for writing\r\n            * ``str``, as in the Python string type. If you set these to ``str``,\r\n              output and error will be written to pipes and returned as a string.\r\n              If both ``output`` and ``error`` are set to ``str``, then one string\r\n              is returned containing output concatenated with error. Not valid\r\n              for ``input``\r\n    \r\n            By default, the subprocess inherits the parent's file descriptors.\r\n    \r\n            \"\"\"\r\n        # Environment\r\n        env_arg = kwargs.get('env', None)\r\n        if env_arg is None:\r\n            env = os.environ.copy()\r\n            env.update(self.default_env)\r\n        else:\r\n            env = self.default_env.copy()\r\n            env.update(env_arg)\r\n        env.update(kwargs.get('extra_env', {}))\r\n        if '_dump_env' in kwargs:\r\n            kwargs['_dump_env'].clear()\r\n            kwargs['_dump_env'].update(env)\r\n    \r\n        fail_on_error = kwargs.pop('fail_on_error', True)\r\n        ignore_errors = kwargs.pop('ignore_errors', ())\r\n    \r\n        # If they just want to ignore one error code, make it a tuple.\r\n        if isinstance(ignore_errors, int):\r\n            ignore_errors = (ignore_errors, )\r\n    \r\n        input  = kwargs.pop('input',  None)\r\n        output = kwargs.pop('output', None)\r\n        error  = kwargs.pop('error',  None)\r\n    \r\n        if input is str:\r\n            raise ValueError('Cannot use `str` as input stream.')\r\n    \r\n        def streamify(arg, mode):\r\n            if isinstance(arg, string_types):\r\n                return open(arg, mode), True\r\n            elif arg is str:\r\n                return subprocess.PIPE, False\r\n            else:\r\n                return arg, False\r\n    \r\n        ostream, close_ostream = streamify(output, 'w')\r\n        estream, close_estream = streamify(error,  'w')\r\n        istream, close_istream = streamify(input,  'r')\r\n    \r\n        quoted_args = [arg for arg in args if re.search(r'^\"|^\\'|\"$|\\'$', arg)]\r\n        if quoted_args:\r\n            tty.warn(\r\n                \"Quotes in command arguments can confuse scripts like\"\r\n                \" configure.\",\r\n                \"The following arguments may cause problems when executed:\",\r\n                str(\"\\n\".join([\"    \" + arg for arg in quoted_args])),\r\n                \"Quotes aren't needed because spack doesn't use a shell.\",\r\n                \"Consider removing them\")\r\n    \r\n        cmd = self.exe + list(args)\r\n    \r\n        cmd_line = \"'%s'\" % \"' '\".join(\r\n            map(lambda arg: arg.replace(\"'\", \"'\\\"'\\\"'\"), cmd))\r\n    \r\n        tty.debug(cmd_line)\r\n    \r\n        try:\r\n            proc = subprocess.Popen(\r\n                cmd,\r\n                stdin=istream,\r\n                stderr=estream,\r\n                stdout=ostream,\r\n                env=env)\r\n            out, err = proc.communicate()\r\n    \r\n            result = None\r\n            if output is str or error is str:\r\n                result = ''\r\n                if output is str:\r\n                    result += text_type(out.decode('utf-8'))\r\n                if error is str:\r\n                    result += text_type(err.decode('utf-8'))\r\n    \r\n            rc = self.returncode = proc.returncode\r\n            if fail_on_error and rc != 0 and (rc not in ignore_errors):\r\n                long_msg = cmd_line\r\n                if result:\r\n                    # If the output is not captured in the result, it will have\r\n                    # been stored either in the specified files (e.g. if\r\n                    # 'output' specifies a file) or written to the parent's\r\n                    # stdout/stderr (e.g. if 'output' is not specified)\r\n                    long_msg += '\\n' + result\r\n    \r\n                raise ProcessError('Command exited with status %d:' %\r\n>                                  proc.returncode, long_msg)\r\nE                                  spack.util.executable.ProcessError: Command exited with status -6:\r\nE                                      '/bin/bash' '-c' 'source /home/culpo/tmp/spack-issues/14496/spack/lib/spack/spack/test/data/sourceme_first.sh &> /dev/null && PYTHONHOME=\"/home/culpo/tmp/spack-issues/14496/py37\" \"/home/culpo/tmp/spack-issues/14496/py37/bin/python3\" -c \"import os; import json; print(json.dumps(dict(os.environ)))\"'\r\n\r\n../util/executable.py:189: ProcessError\r\n-------------------------------------------------------------- Captured stderr call --------------------------------------------------------------\r\n==> Warning: Quotes in command arguments can confuse scripts like configure.\r\n  The following arguments may cause problems when executed:\r\n      source /home/culpo/tmp/spack-issues/14496/spack/lib/spack/spack/test/data/sourceme_first.sh &> /dev/null && PYTHONHOME=\"/home/culpo/tmp/spack-issues/14496/py37\" \"/home/culpo/tmp/spack-issues/14496/py37/bin/python3\" -c \"import os; import json; print(json.dumps(dict(os.environ)))\"\r\n  Quotes aren't needed because spack doesn't use a shell.\r\n  Consider removing them\r\nFatal Python error: initfsencoding: Unable to get the locale encoding\r\nModuleNotFoundError: No module named 'encodings'\r\n\r\nCurrent thread 0x00007fe745a54740 (most recent call first):\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n```\r\n</details>\r\n\r\n\r\n### Information on your system\r\n\r\nI'm working in a virtual environment, with:\r\n```\r\n$ cat /etc/os-release \r\nNAME=\"Ubuntu\"\r\nVERSION=\"18.04.3 LTS (Bionic Beaver)\"\r\nID=ubuntu\r\nID_LIKE=debian\r\nPRETTY_NAME=\"Ubuntu 18.04.3 LTS\"\r\nVERSION_ID=\"18.04\"\r\nHOME_URL=\"https://www.ubuntu.com/\"\r\nSUPPORT_URL=\"https://help.ubuntu.com/\"\r\nBUG_REPORT_URL=\"https://bugs.launchpad.net/ubuntu/\"\r\nPRIVACY_POLICY_URL=\"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy\"\r\nVERSION_CODENAME=bionic\r\nUBUNTU_CODENAME=bionic\r\n\r\n$ uname -a\r\nLinux nuvolari 5.3.0-26-generic #28~18.04.1-Ubuntu SMP Wed Dec 18 16:40:14 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\r\n```",
    "performed_via_github_app": null
}