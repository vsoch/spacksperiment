{
    "url": "https://api.github.com/repos/spack/spack/issues/8518",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/8518/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/8518/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/8518/events",
    "html_url": "https://github.com/spack/spack/issues/8518",
    "id": 333834617,
    "node_id": "MDU6SXNzdWUzMzM4MzQ2MTc=",
    "number": 8518,
    "title": "test suite doesn't pass under Docker",
    "user": {
        "login": "reidpr",
        "id": 1682574,
        "node_id": "MDQ6VXNlcjE2ODI1NzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1682574?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/reidpr",
        "html_url": "https://github.com/reidpr",
        "followers_url": "https://api.github.com/users/reidpr/followers",
        "following_url": "https://api.github.com/users/reidpr/following{/other_user}",
        "gists_url": "https://api.github.com/users/reidpr/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/reidpr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/reidpr/subscriptions",
        "organizations_url": "https://api.github.com/users/reidpr/orgs",
        "repos_url": "https://api.github.com/users/reidpr/repos",
        "events_url": "https://api.github.com/users/reidpr/events{/privacy}",
        "received_events_url": "https://api.github.com/users/reidpr/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 719256466,
            "node_id": "MDU6TGFiZWw3MTkyNTY0NjY=",
            "url": "https://api.github.com/repos/spack/spack/labels/containers",
            "name": "containers",
            "color": "c5def5",
            "default": false,
            "description": null
        },
        {
            "id": 832208203,
            "node_id": "MDU6TGFiZWw4MzIyMDgyMDM=",
            "url": "https://api.github.com/repos/spack/spack/labels/docker",
            "name": "docker",
            "color": "77b9d6",
            "default": false,
            "description": null
        },
        {
            "id": 456341797,
            "node_id": "MDU6TGFiZWw0NTYzNDE3OTc=",
            "url": "https://api.github.com/repos/spack/spack/labels/tests",
            "name": "tests",
            "color": "b60205",
            "default": false,
            "description": "General test capability(ies)"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-06-19T20:52:38Z",
    "updated_at": "2018-07-13T18:10:28Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "The test suite does not pass under Docker, during Dockerfile build, with errors about locking.\r\n\r\nThanks for your hard work on Spack. Please let me know any additional clarification I can provide.\r\n\r\n### Expected Result\r\n\r\nTest suite passes.\r\n\r\n### Actual Result\r\n\r\nThe `RUN spack test` instruction fails with the following errors:\r\n\r\n```\r\n=================================== FAILURES ===================================\r\n__________ test_upgrade_read_to_write_fails_with_readonly_file[/tmp] ___________\r\n\r\nprivate_lock_path = '/tmp/tmpO2kFFA/lockfile'\r\n\r\n    def test_upgrade_read_to_write_fails_with_readonly_file(private_lock_path):\r\n        # ensure lock file exists the first time, so we open it read-only\r\n        # to begin wtih.\r\n        touch(private_lock_path)\r\n\r\n        with read_only(private_lock_path):\r\n            lock = Lock(private_lock_path)\r\n            assert lock._reads == 0\r\n            assert lock._writes == 0\r\n\r\n            lock.acquire_read()\r\n            assert lock._reads == 1\r\n            assert lock._writes == 0\r\n>           assert lock._file.mode == 'r'\r\nE           AssertionError: assert 'r+' == 'r'\r\nE             - r+\r\nE             + r\r\n\r\nlib/spack/spack/test/llnl/util/lock.py:597: AssertionError\r\n____________________________ test_lock_checks_user _____________________________\r\n\r\ntmpdir = local('/tmp/pytest-of-root/pytest-0/test_lock_checks_user0')\r\n\r\n    def test_lock_checks_user(tmpdir):\r\n        \"\"\"Ensure lock checks work.\"\"\"\r\n        path = str(tmpdir)\r\n        uid = os.getuid()\r\n\r\n        # self-owned, own group\r\n        tmpdir.chown(uid, uid)\r\n\r\n        # safe\r\n        tmpdir.chmod(0o744)\r\n        spack.util.lock.check_lock_safety(path)\r\n\r\n        # safe\r\n        tmpdir.chmod(0o774)\r\n        spack.util.lock.check_lock_safety(path)\r\n\r\n        # unsafe\r\n        tmpdir.chmod(0o777)\r\n        with pytest.raises(spack.error.SpackError):\r\n            spack.util.lock.check_lock_safety(path)\r\n\r\n        # safe\r\n        tmpdir.chmod(0o474)\r\n        spack.util.lock.check_lock_safety(path)\r\n\r\n        # safe\r\n        tmpdir.chmod(0o477)\r\n>       spack.util.lock.check_lock_safety(path)\r\n\r\nlib/spack/spack/test/llnl/util/lock.py:965:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\npath = '/tmp/pytest-of-root/pytest-0/test_lock_checks_user0'\r\n\r\n    def check_lock_safety(path):\r\n        \"\"\"Do some extra checks to ensure disabling locks is safe.\r\n\r\n        This will raise an error if ``path`` can is group- or world-writable\r\n        AND the current user can write to the directory (i.e., if this user\r\n        AND others could write to the path).\r\n\r\n        This is intended to run on the Spack prefix, but can be run on any\r\n        path for testing.\r\n        \"\"\"\r\n        if os.access(path, os.W_OK):\r\n            stat_result = os.stat(path)\r\n            uid, gid = stat_result.st_uid, stat_result.st_gid\r\n            mode = stat_result[stat.ST_MODE]\r\n\r\n            writable = None\r\n            if (mode & stat.S_IWGRP) and (uid != gid):\r\n                # spack is group-writeable and the group is not the owner\r\n                writable = 'group'\r\n            elif (mode & stat.S_IWOTH):\r\n                # spack is world-writeable\r\n                writable = 'world'\r\n\r\n            if writable:\r\n                msg = \"Refusing to disable locks: spack is {0}-writable.\".format(\r\n                    writable)\r\n                long_msg = (\r\n                    \"Running a shared spack without locks is unsafe. You must \"\r\n                    \"restrict permissions on {0} or enable locks.\").format(path)\r\n>               raise spack.error.SpackError(msg, long_msg)\r\nE               SpackError: Refusing to disable locks: spack is world-writable.\r\nE                   Running a shared spack without locks is unsafe. You must restrict permissions on /tmp/pytest-of-root/pytest-0/test_lock_checks_user0 or enable locks.\r\n\r\nlib/spack/spack/util/lock.py:91: SpackError\r\n======== 2 failed, 1037 passed, 90 skipped, 1 xfailed in 415.11 seconds ========\r\nThe command '/bin/sh -c spack test' returned a non-zero code: 1\r\n```\r\n\r\n`RUN spack --enable-locks test` gives 35 failures instead of 2.\r\n\r\n### Steps to reproduce the issue\r\n\r\nUse `docker build` on the following Dockerfile:\r\n\r\n```dockerfile\r\nFROM debian:stretch\r\n\r\nENV DEBIAN_FRONTEND noninteractive\r\n\r\nRUN    apt-get update \\\r\n    && apt-get install -y apt-utils\r\n\r\n# Spack needs curl, git, make, and unzip to install.\r\n# The other packages are needed for Spack unit tests.\r\nRUN apt-get install -y \\\r\n    curl \\\r\n    g++ \\\r\n    git \\\r\n    make \\\r\n    patch \\\r\n    procps \\\r\n    python \\\r\n    python-pkg-resources \\\r\n    unzip\r\n\r\n# Install Spack.\r\nENV SPACK_REPO https://github.com/spack/spack\r\nENV SPACK_VERSION 818e748\r\nRUN git clone $SPACK_REPO\r\nRUN cd spack && git checkout $SPACK_VERSION\r\n\r\n# Set up environment to use Spack. (We can't use setup-env.sh because the\r\n# Dockerfile shell is sh, not Bash.)\r\nENV PATH /spack/bin:$PATH\r\nRUN spack compilers\r\n\r\n# Test: Install a small package.\r\nRUN spack install libsigsegv\r\n\r\n# Test: Run Spack test suite.\r\nRUN spack test\r\n\r\n# Clean up.\r\nRUN spack clean --all\r\n```\r\n\r\n### Information on your system\r\n\r\n* Debian Stretch.\r\n* Docker version 17.12.0-ce, build c97c6d6\r\n* Spack 0.11.2 or commit 818e748 (tip of `develop` as of right now).",
    "performed_via_github_app": null
}