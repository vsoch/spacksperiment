{
    "url": "https://api.github.com/repos/spack/spack/issues/8772",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/8772/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/8772/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/8772/events",
    "html_url": "https://github.com/spack/spack/pull/8772",
    "id": 343288667,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjAyOTg3MDM0",
    "number": 8772,
    "title": "spack chain",
    "user": {
        "login": "scheibelp",
        "id": 1659704,
        "node_id": "MDQ6VXNlcjE2NTk3MDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1659704?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/scheibelp",
        "html_url": "https://github.com/scheibelp",
        "followers_url": "https://api.github.com/users/scheibelp/followers",
        "following_url": "https://api.github.com/users/scheibelp/following{/other_user}",
        "gists_url": "https://api.github.com/users/scheibelp/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/scheibelp/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/scheibelp/subscriptions",
        "organizations_url": "https://api.github.com/users/scheibelp/orgs",
        "repos_url": "https://api.github.com/users/scheibelp/repos",
        "events_url": "https://api.github.com/users/scheibelp/events{/privacy}",
        "received_events_url": "https://api.github.com/users/scheibelp/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 53,
    "created_at": "2018-07-21T02:12:42Z",
    "updated_at": "2019-03-28T17:00:17Z",
    "closed_at": "2019-03-27T20:06:47Z",
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
        "url": "https://api.github.com/repos/spack/spack/pulls/8772",
        "html_url": "https://github.com/spack/spack/pull/8772",
        "diff_url": "https://github.com/spack/spack/pull/8772.diff",
        "patch_url": "https://github.com/spack/spack/pull/8772.patch"
    },
    "body": "@gartung @paul-chelarescu @amundson\r\n\r\nSee also: https://github.com/spack/spack/pull/8545/\r\n\r\nThis attempts to connect a local Spack instance to another \"upstream\" instance, exactly like #8545 (and uses many ideas from it). To use this, see https://github.com/spack/spack/pull/8772#issuecomment-406764998\r\n\r\nThe primary goal of this PR, quoting from https://github.com/spack/spack/pull/8772#issuecomment-419378823:\r\n\r\n> Our use-case for this would be having a \"system\" instance of Spack maintained by our team that could be \"extended\" by our users. We would like the \"user\" instance of Spack to use installed packages in the \"system\" instance whenever possible.\r\n\r\nThe implementation differs from #8545: it tries to interact *only* with the upstream database, and otherwise avoids parsing upstream config files with the local Spack instance. For example it does not maintain a `parent_layout` analogous to `parent_db`: it assigns Spec prefixes based on the paths stored in install records and avoids all interactions with the directory layouts of upstream Spack instances.\r\n\r\nSimilarly, this PR adds a capability for upstream Spack instances to generate a module index file that associates installed packages with their generated module files. This is used for `spack module tcl find` etc. to locate module files. I think this approach will be more resilient to version drift between a local/upstream spack instance. Currently, the module file index is implicitly generated when doing e.g. `spack module tcl refresh`.\r\n\r\n(EDIT 11/21: originally the plan to handle module files for upstream packages was to invoke the upstream Spack binary to locate them but that ended up being problematic outside of environment setup scripts. The module indices now correctly locate upstream module files for Spack commands, but do not currently handle autoloading module file generation schemes)\r\n\r\nThis PR also tries to be careful about not writing any files to upstream database, including:\r\n\r\n* Don't acquire locks on upstream DBs\r\n* Don't attempt to reindex upstream DBs if an issue is detected\r\n\r\nTODOs (updated 9/7):\r\n\r\n- [x] (new: 11/27) update `spack uninstall -a` to uninstall all specs from the local Spack instance (but not attempt to uninstall any upstream Spack installs)\r\n- [x] (pending review) (new: 8/24) update the `csh` environment script to retrieve modules from upstream Spack instances in the same manner `setup-env.sh`\r\n- [x] (new: 9/7) add a test to check that in the simple case where a Spack instance depends on a single upstream instance and a dependency is uninstalled from the upstream instance, that this is reported (e.g. when using `spack find`)\r\n- [x] Raise an exception if an upstream DB attempts to acquire a lock\r\n- [x] Raise an exception if local and upstream DB versions don't match\r\n- [x] Handle loading of modules for packages that are installed upstream\r\n- [ ] (not essential) (new: 8/23) ~update `spack reindex` to set `path` on `InstallRecord`s so that upstream-installed externals can be used for older Spack instances~ (UPDATE) there is not actually sufficient information available for the downstream instance to handle this: Without extra information added to `InstallRecord`, the downstream Spack instance would need to examine the configuration files of the upstream instance to find the externals (which this PR avoids). This PR adds the external path to the `InstallRecord`, so the external package is available; external packages \"look the same as\" Spack-installed packages from the perspective of a downstream Spack instance. \r\n- [x] (handled 11/26) Determine whether to support the following case: given databases X, Y, and Z, where X has Y and Z as an upstream, allow Y to use Z as an upstream (if that's desired, it isn't currently supported)\r\n- [ ] (in a future PR) (new: 11/21) handle autoloading module generation schemes where dependencies are associated with upstream Spack instances\r\n",
    "performed_via_github_app": null
}