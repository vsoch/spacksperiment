{
    "url": "https://api.github.com/repos/spack/spack/issues/10558",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/10558/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/10558/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/10558/events",
    "html_url": "https://github.com/spack/spack/issues/10558",
    "id": 408424192,
    "node_id": "MDU6SXNzdWU0MDg0MjQxOTI=",
    "number": 10558,
    "title": "External, Compiler-Agnostic Package",
    "user": {
        "login": "ax3l",
        "id": 1353258,
        "node_id": "MDQ6VXNlcjEzNTMyNTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1353258?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ax3l",
        "html_url": "https://github.com/ax3l",
        "followers_url": "https://api.github.com/users/ax3l/followers",
        "following_url": "https://api.github.com/users/ax3l/following{/other_user}",
        "gists_url": "https://api.github.com/users/ax3l/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ax3l/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ax3l/subscriptions",
        "organizations_url": "https://api.github.com/users/ax3l/orgs",
        "repos_url": "https://api.github.com/users/ax3l/repos",
        "events_url": "https://api.github.com/users/ax3l/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ax3l/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 73908754,
            "node_id": "MDU6TGFiZWw3MzkwODc1NA==",
            "url": "https://api.github.com/repos/spack/spack/labels/bug",
            "name": "bug",
            "color": "fc2929",
            "default": true,
            "description": null
        },
        {
            "id": 471995122,
            "node_id": "MDU6TGFiZWw0NzE5OTUxMjI=",
            "url": "https://api.github.com/repos/spack/spack/labels/commands",
            "name": "commands",
            "color": "006b75",
            "default": false,
            "description": null
        },
        {
            "id": 446623646,
            "node_id": "MDU6TGFiZWw0NDY2MjM2NDY=",
            "url": "https://api.github.com/repos/spack/spack/labels/concretization",
            "name": "concretization",
            "color": "006b75",
            "default": false,
            "description": null
        },
        {
            "id": 446615135,
            "node_id": "MDU6TGFiZWw0NDY2MTUxMzU=",
            "url": "https://api.github.com/repos/spack/spack/labels/configuration",
            "name": "configuration",
            "color": "bfd4f2",
            "default": false,
            "description": null
        },
        {
            "id": 455855856,
            "node_id": "MDU6TGFiZWw0NTU4NTU4NTY=",
            "url": "https://api.github.com/repos/spack/spack/labels/external-packages",
            "name": "external-packages",
            "color": "c5def5",
            "default": false,
            "description": null
        },
        {
            "id": 446632829,
            "node_id": "MDU6TGFiZWw0NDY2MzI4Mjk=",
            "url": "https://api.github.com/repos/spack/spack/labels/modules",
            "name": "modules",
            "color": "fef2c0",
            "default": false,
            "description": null
        },
        {
            "id": 446780477,
            "node_id": "MDU6TGFiZWw0NDY3ODA0Nzc=",
            "url": "https://api.github.com/repos/spack/spack/labels/pkg-database",
            "name": "pkg-database",
            "color": "006b75",
            "default": false,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-02-09T11:45:54Z",
    "updated_at": "2019-02-13T15:25:54Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "I commonly use external packages, e.g. for build tools such as CMake, in `packages.yaml`.\r\n\r\nUnfortunately, the syntax does not allow for compiler (and likely architecture) agnostic registration and is overly verbose in practice (since too-concrete entries need to be listed).\r\n\r\n### Steps to reproduce the issue\r\n\r\nTake the following `packages.yaml` on Ubuntu Xenial:\r\n```yaml\r\npackages:\r\n  cmake:\r\n    version: [3.5.1]\r\n    paths:\r\n      cmake@3.5.1: /usr\r\n    buildable: False\r\n```\r\n\r\nPlease see a corresponding `Dockerfile` below.\r\n\r\n### Error Message\r\n\r\nLet's try to use our \"external\" CMake package\r\n\r\n```bash\r\n# preparation: (done in my Dockerfile)\r\n# spack install cmake\r\n\r\n$ spack compilers   \r\n==> Available compilers\r\n-- clang ubuntu16.04-x86_64 -------------------------------------\r\nclang@3.8.0-2ubuntu4\r\n\r\n-- gcc ubuntu16.04-x86_64 ---------------------------------------\r\ngcc@5.4.0\r\n\r\n$ spack load cmake\r\n$ cmake --version\r\ncmake version 3.5.1\r\n\r\n$ module li\r\nCurrently Loaded Modulefiles:\r\n  1) cmake-3.5.1-gcc-5.4.0-gycftb5\r\n\r\n$ module purge\r\n$ module li\r\nNo Modulefiles Currently Loaded.\r\n```\r\nWorks!\r\n\r\nNow with GCC:\r\n```bash\r\n$ spack load cmake %gcc\r\n# okay!\r\n\r\n$ module li\r\nCurrently Loaded Modulefiles:\r\n  1) cmake-3.5.1-gcc-5.4.0-gycftb5\r\n```\r\nOkay, works as well.\r\n\r\nSo now load it with Clang:\r\n```bash\r\n$ module purge\r\n\r\n$ spack load cmake %clang\r\n==> Error: the constraint '['cmake', '%clang']' matches no package.\r\n==> Error: In this context exactly **one** match is needed: please specify your constraints better.\r\n$ module li\r\nNo Modulefiles Currently Loaded.\r\n$ module av\r\n\r\n--------- /home/spack/src/spack/share/spack/modules/linux-ubuntu16.04-x86_64 ----------\r\ncmake-3.5.1-gcc-5.4.0-gycftb5\r\n\r\n----------------------------- /usr/share/modules/versions -----------------------------\r\n3.2.10\r\n\r\n--------------------------- /usr/share/modules/modulefiles ----------------------------\r\ndot         module-git  module-info modules     null        use.own\r\n```\r\n\r\nDoesn't work, although `packages.yaml` says it's compiler agnostic.\r\n\r\nWe could now say, \"ok, but you only installed the package with GCC, you also have to install it with Clang for the package index to notice it\".\r\n\r\nSo let's try telling the package database explicitly to install CMake again with Clang:\r\n```bash\r\n$ spack install cmake %clang\r\n==> cmake@3.5.1 : externally installed in /usr\r\n==> cmake@3.5.1 : already registered in DB\r\n# bug: it's not (for clang)\r\n\r\n$ module av\r\n--------- /home/spack/src/spack/share/spack/modules/linux-ubuntu16.04-x86_64 ----------\r\ncmake-3.5.1-gcc-5.4.0-gycftb5\r\n\r\n----------------------------- /usr/share/modules/versions -----------------------------\r\n3.2.10\r\n\r\n--------------------------- /usr/share/modules/modulefiles ----------------------------\r\ndot         module-git  module-info modules     null        use.own\r\n\r\n$ spack load cmake %clang\r\n==> Error: the constraint '['cmake', '%clang']' matches no package.\r\n==> Error: In this context exactly **one** match is needed: please specify your constraints better.\r\n```\r\n\r\nBut CMake with Clang is still not known.\r\n\r\n### Information on your system\r\n\r\nTake the following `Dockerfile`:\r\n```docker\r\nFROM       ubuntu:xenial\r\n\r\n# general environment for docker\r\nENV        DEBIAN_FRONTEND=noninteractive \\\r\n           HOME=/home/spack \\\r\n           PATH=/home/spack/src/spack/bin:$PATH\r\n\r\n# spack environment\r\nENV        PATH \"$HOME/src/spack/bin:$PATH\"\r\nCOPY       packages.yaml $HOME/.spack/packages.yaml\r\n\r\n# install minimal spack dependencies\r\nRUN        apt-get update \\\r\n           && apt-get install -y --no-install-recommends \\\r\n              autoconf \\\r\n              ca-certificates \\\r\n              clang \\\r\n              cmake \\\r\n              curl \\\r\n              environment-modules \\\r\n              git \\\r\n              build-essential \\\r\n              pkg-config \\\r\n              python \\\r\n              nano \\\r\n              sudo \\\r\n              unzip \\\r\n           && rm -rf /var/lib/apt/lists/*\r\n\r\n# startup: force the use of a login shell\r\nRUN        /bin/echo -e '#!/bin/bash -l\\n' \\\r\n             '. /home/spack/src/spack/share/spack/setup-env.sh\\n' \\\r\n             'exec \"$@\"\\n'                 \\\r\n             > /etc/entrypoint.sh\r\nRUN chmod a+x /etc/entrypoint.sh\r\n\r\nENTRYPOINT [\"/etc/entrypoint.sh\"]\r\nCMD [\"/bin/bash\"]\r\n\r\n# Add non-privileged, but system docker user with sudo rights\r\nRUN        groupadd -r spack -g 901 && \\\r\n           useradd -u 901 -r -m -g spack spack && \\\r\n           echo \"spack ALL=(root) NOPASSWD:ALL\" > /etc/sudoers.d/spack && \\\r\n           chmod 0440 /etc/sudoers.d/spack\r\n# this is also the user that executes all commands below\r\nUSER       spack\r\nWORKDIR    $HOME\r\n\r\n# spack environment\r\nCOPY       packages.yaml .spack/\r\n\r\nRUN        sudo chown spack:spack -R $HOME\r\n\r\n# install spack\r\nRUN        git clone --depth 50 https://github.com/llnl/spack.git \\\r\n           $HOME/src/spack/ && \\\r\n           spack compiler find\r\n\r\n# install software\r\nRUN        spack install cmake\r\n```\r\n\r\nbuild and run it interactively with:\r\n```bash\r\ndocker build -t spackexcmake .\r\ndocker run -it spackexcmake\r\n```\r\n\r\n### Work-Around\r\n\r\nThe necessary work-around for this is to verbosely write in `packages.yaml`\r\n```yaml\r\npackages:\r\n  cmake:\r\n    version: [3.5.1]\r\n    paths:\r\n      cmake@3.5.1 %gcc: /usr\r\n      cmake@3.5.1 %clang: /usr\r\n    buildable: False\r\n```\r\nand then manually triggering `spack install cmake %compilerSpec` *for each* `compilerSpec`. (That means, also for each version of GCC and Clang.)\r\n\r\nThe same holds likely true for the `arch=...` triplets, which is quite common on spack configs for CI (e.g. Travis with Ubuntu Trusty and Xenial) or docker compose. [Real-life example here.](https://github.com/openPMD/openPMD-api/blob/0.7.1-alpha/.travis/spack/packages.yaml)\r\n\r\nOne can argue how far this workflow should be supported, but at least a `spack install cmake %nonDefaultCompiler` should work with shortened external `paths: [cmake@3.5.1: /usr]`.",
    "performed_via_github_app": null
}