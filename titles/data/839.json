{
    "url": "https://api.github.com/repos/spack/spack/issues/839",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/839/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/839/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/839/events",
    "html_url": "https://github.com/spack/spack/issues/839",
    "id": 151177010,
    "node_id": "MDU6SXNzdWUxNTExNzcwMTA=",
    "number": 839,
    "title": "Resolve build dependencies separately from others (and take installed packages into account)",
    "user": {
        "login": "mathstuf",
        "id": 97253,
        "node_id": "MDQ6VXNlcjk3MjUz",
        "avatar_url": "https://avatars.githubusercontent.com/u/97253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mathstuf",
        "html_url": "https://github.com/mathstuf",
        "followers_url": "https://api.github.com/users/mathstuf/followers",
        "following_url": "https://api.github.com/users/mathstuf/following{/other_user}",
        "gists_url": "https://api.github.com/users/mathstuf/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mathstuf/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mathstuf/subscriptions",
        "organizations_url": "https://api.github.com/users/mathstuf/orgs",
        "repos_url": "https://api.github.com/users/mathstuf/repos",
        "events_url": "https://api.github.com/users/mathstuf/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mathstuf/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 446623646,
            "node_id": "MDU6TGFiZWw0NDY2MjM2NDY=",
            "url": "https://api.github.com/repos/spack/spack/labels/concretization",
            "name": "concretization",
            "color": "006b75",
            "default": false,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 25,
    "created_at": "2016-04-26T16:14:58Z",
    "updated_at": "2019-05-28T03:14:41Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Here is an outline of a test case for some corner cases for using dependency types (#378) to allow build-only dependencies to be resolved separately from other, unrelated, instances of the package in the DAG. The use case is for something like a package `A` which uses `scons` to build which brings in, say `python@2`. Another package, `X` depends on `A` and `B`, but `B` depends on `python@3`. Currently, the DAG will fail to resolve due to the `python` incompatibilities even though they do not strictly conflict.\n\n@tgamblin @dhandeo @eschnett @citibeth \n\n---\n\nSuppose we are looking to install a package `R`. Here is the dependency graph for `R`:\n\n![spack-deps](https://cloud.githubusercontent.com/assets/97253/14824525/56e0587e-0ba4-11e6-816d-ac4203d7a6aa.png)\n\nFirst, when traversing the DAG, we get this information:\n\n```\nName    Type    Parent\n----    ----    ------\nR       b,l,r\nD\u2081      b,l     R\nB\u2081~X    b       D\u2081\nL\u2081      b,l     D\u2081\nB\u2081      b       L\u2081\nL\u2082      b,l     L\u2081\nD\u2082      b,l     R\nB\u2081+X    b       D\u2082\n```\n\nWhen traversing, we add specs to the resolution map `M` unless we find specs which match `Type = {b} \u2227 Parent \u2260 R`. For each such case, we make a new resolution map `M\u2096` and add the non-root traversal over its parent for `{link, run}` dependencies over `D\u2081`'s `{build, link}` dependencies. This query creates a map for all specs which will need to be loaded during `D\u2081`'s build. Here, this equates to `{L\u2081, B\u2081, B\u2081~X, L\u2082}`. There will be another resolution multimap for the `B\u2081+X` dependency of `D\u2082` containing `{B\u2081+X}`.\n\nHere is a snapshot of the dependency resolution maps after the initial traversal:\n\n```\nM: {D\u2081, L\u2081, B\u2081, D\u2082, L\u2082}\nM\u2081: {L\u2081, B\u2081, B\u2081~X, L\u2082}\nM\u2082: {B\u2081+X}\n```\n\nNow we must resolve each `M\u2096` against `M`. However, we must choose an order in which to do so. I'm not sure of a fool-proof way to do this, but a sensible one seems to be to sort the maps based on how many entries are contained in the map which are shared with `M` and have multiple specs with that `M\u2096`. Here is the reasoning as to why such a sort is necessary:\n\nSuppose we choose to resolve `M\u2082` against `M` first. This would force `B\u2081` from `L\u2081` to have the `+X` feature. When we then go to resolve `M\u2081` itself, we will get a conflict between `D\u2081`'s build dependency of `B\u2081~X` and the `B\u2081` required by `L\u2081` and the resolution fails (which is the case as it is now, but the problem is that there is a solution).\n\nWhatever heuristic we end up using, it has to at least do this (we may also try backtracking to try other sort orders, but this is `O(n!)` in the number of secondary resolution maps created, so avoiding that is best (there are ways that can probably be used to determine that one map can't be resolved after another[1], but that isn't going to help that much).\n\nSo in resolving `M\u2081` against `M`, we determine that `B\u2081` in `M` must be `~X`. When we resolve `M\u2082`, there is no internal problems, but it cannot use the same `B\u2081` as the main build, so it is possible to just build a second `B\u2081` and use it just for `D\u2082`'s build.\n\n[1]Namely when the second resolution fails, the second cannot follow the first. If any first resolution fails, there is no solution.\n\n---\n\nAs a further enhancement, we can, before merging in any `M\u2096`, resolve `M` against the set of all installed packages. If any dependency is satisfied there, we can ignore any `M\u2096` which is made for that dependency (since we do not need to build it ourselves, none of its build dependencies can \"spoil\" our main package's dependency resolution). However, we must be able to successfully resolve all such installed dependencies together. I'm not sure what the failure mode of such a resolution should be. Do we kick out certain specs? If so, which ones? Kick out all such dependencies (seems harsh)? Fail with a message that `X` and `Y` conflict, so either specify `^X/<X_hash>`, `^Y/<Y_hash>`, or at least one of `^X/new` and `^Y/new` (the `/` sigil meaning \"look for an installed hash\" from #360 with `new` meaning _don't_ look for an installed hash)? It gets messy quickly.\n",
    "performed_via_github_app": null
}