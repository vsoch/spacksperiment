{
    "url": "https://api.github.com/repos/spack/spack/issues/10845",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/10845/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/10845/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/10845/events",
    "html_url": "https://github.com/spack/spack/issues/10845",
    "id": 418988970,
    "node_id": "MDU6SXNzdWU0MTg5ODg5NzA=",
    "number": 10845,
    "title": "Lmod, gcc, llvm, rust -> can't load Lmod module",
    "user": {
        "login": "hartzell",
        "id": 312978,
        "node_id": "MDQ6VXNlcjMxMjk3OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/312978?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hartzell",
        "html_url": "https://github.com/hartzell",
        "followers_url": "https://api.github.com/users/hartzell/followers",
        "following_url": "https://api.github.com/users/hartzell/following{/other_user}",
        "gists_url": "https://api.github.com/users/hartzell/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hartzell/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hartzell/subscriptions",
        "organizations_url": "https://api.github.com/users/hartzell/orgs",
        "repos_url": "https://api.github.com/users/hartzell/repos",
        "events_url": "https://api.github.com/users/hartzell/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hartzell/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 73908754,
            "node_id": "MDU6TGFiZWw3MzkwODc1NA==",
            "url": "https://api.github.com/repos/spack/spack/labels/bug",
            "name": "bug",
            "color": "fc2929",
            "default": true,
            "description": null
        },
        {
            "id": 446632829,
            "node_id": "MDU6TGFiZWw0NDY2MzI4Mjk=",
            "url": "https://api.github.com/repos/spack/spack/labels/modules",
            "name": "modules",
            "color": "fef2c0",
            "default": false,
            "description": null
        },
        {
            "id": 73908758,
            "node_id": "MDU6TGFiZWw3MzkwODc1OA==",
            "url": "https://api.github.com/repos/spack/spack/labels/question",
            "name": "question",
            "color": "cc317c",
            "default": true,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
        "login": "alalazo",
        "id": 4199709,
        "node_id": "MDQ6VXNlcjQxOTk3MDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4199709?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/alalazo",
        "html_url": "https://github.com/alalazo",
        "followers_url": "https://api.github.com/users/alalazo/followers",
        "following_url": "https://api.github.com/users/alalazo/following{/other_user}",
        "gists_url": "https://api.github.com/users/alalazo/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/alalazo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/alalazo/subscriptions",
        "organizations_url": "https://api.github.com/users/alalazo/orgs",
        "repos_url": "https://api.github.com/users/alalazo/repos",
        "events_url": "https://api.github.com/users/alalazo/events{/privacy}",
        "received_events_url": "https://api.github.com/users/alalazo/received_events",
        "type": "User",
        "site_admin": false
    },
    "assignees": [
        {
            "login": "alalazo",
            "id": 4199709,
            "node_id": "MDQ6VXNlcjQxOTk3MDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4199709?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alalazo",
            "html_url": "https://github.com/alalazo",
            "followers_url": "https://api.github.com/users/alalazo/followers",
            "following_url": "https://api.github.com/users/alalazo/following{/other_user}",
            "gists_url": "https://api.github.com/users/alalazo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alalazo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alalazo/subscriptions",
            "organizations_url": "https://api.github.com/users/alalazo/orgs",
            "repos_url": "https://api.github.com/users/alalazo/repos",
            "events_url": "https://api.github.com/users/alalazo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alalazo/received_events",
            "type": "User",
            "site_admin": false
        }
    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-03-08T22:54:04Z",
    "updated_at": "2019-03-08T23:10:59Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "I can't load the Lmod module for `bat` (a cat(1) replacement, written in Rust, PR pending #10837).\r\n\r\nI think that there's an inconsistency where Spack isn't seeing `llvm` as a compiler but the modules we generate *is*.\r\n\r\nI'd love to understand the current state of the art around compilers but would be content to remain ignorant if I end up with a way to load my `gcc` built `emacs` alongside a `rust` -> `llvm` -> `gcc` built `bat`.\r\n\r\nThis may or may not be related to #3973.\r\n\r\n---\r\n\r\nI'm working on a CentOS 7 system, which provides `gcc@4.8.5`.\r\n\r\nI use that to build `gcc@8.2.0` and set that as the default compiler via `packages.yaml`.\r\n\r\nMy `etc/spack/modules.yaml` file lists `gcc@4.8.5` in `core_compilers`.\r\n\r\nI then ran `spack install rust` and `spack install bat` (a cat(1) replacement, written in Rust, PR pending #10837).  Rust is built w/ `llvm`, which ends up being built with `gcc@8.2.0` in my configuration.\r\n\r\n`bat` ends up linking to the following dynamic libraries:\r\n\r\n```consolesession\r\n[ghartzell@bifx1n03 spack]$ ldd /home/ghartzell/spack/opt/spack/linux-centos7-x86_64/gcc-8.2.0/bat-0.10.0-xldouz3jymfgh7whohqgfxhvkebnejgf/bin/bat\r\n        linux-vdso.so.1 =>  (0x00007ffd0cdfd000)\r\n        libz.so.1 => /home/ghartzell/spack/opt/spack/linux-centos7-x86_64/gcc-8.2.0/zlib-1.2.11-6wdekzyadff6repdb5bxinnzizvnn35t/lib/libz.so.1 (0x00007f0569786000)\r\n        libc.so.6 => /lib64/libc.so.6 (0x00007f05693b9000)\r\n        /lib64/ld-linux-x86-64.so.2 (0x00007f056a085000)\r\n        libdl.so.2 => /lib64/libdl.so.2 (0x00007f05691b5000)\r\n        libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f0568f99000)\r\n        libgcc_s.so.1 => /home/ghartzell/spack/opt/spack/linux-centos7-x86_64/gcc-4.8.5/gcc-8.2.0-uc6sbumioobdbkw4rwfyn2givi4nyvwq/lib64/libgcc_s.so.1 (0x00007f0568d81000)\r\n        libm.so.6 => /lib64/libm.so.6 (0x00007f0568a7f000)\r\n[ghartzell@bifx1n03 spack]$\r\n```\r\n\r\nI'm running into two problems with Lmod and hierarchical modules:\r\n\r\n1. [this is probably a philosophical/meta-issue] There doesn't appear to be any way to use `llvm` built binaries (e.g. `bat`) and `gcc` built binaries simultaneously, even though things are either statically linked or RPATH'ed.  Perhaps this means that I should give up on Lmod?\r\n\r\n2. I seem to be unable to load the `bat` module, because (I think) Spack doesn't consider `llvm` a core compiler but the Lmod module files do (the `llvm` modulefile includes a `family(\"compiler\")` statement).\r\n\r\n    ```consolesession\r\n    $ module load gcc\r\n    $ module load aspell direnv emacs git htop r the-silver-searcher tmux tree vim\r\n    $ module load bat\r\n\r\n    Lmod is automatically replacing \"gcc/8.2.0-uc6sbum\" with \"llvm/7.0.1-py2.7-e3eu7bx\".\r\n\r\n\r\n    Inactive Modules:\r\n      1) aspell                        14) glib/2.56.3-py3.6-zypsii3                     27) libiconv/1.15-q7w32zb           40) libxrender/0.9.10-sctxcs3     53) tar/1.31-t2cmxty\r\n      2) bzip2/1.0.6-7djguhm           15) gmp/6.1.2-yhxishz                             28) libjpeg-turbo/1.5.90-aq4xone    41) libxt/1.1.5-yo5j5vj           54) tcl/8.6.8-fi32equ\r\n      3) cairo/1.16.0-py3.6-ma44jfg    16) gnutls/3.5.13-apvnfcf                         29) libpng/1.6.34-nu6yixy           42) ncurses/6.1-i655y27           55) the-silver-searcher\r\n      4) curl/7.63.0-5atszob           17) gobject-introspection/1.56.1-py3.6-3dzsuht    30) libpthread-stubs/0.4-bsy6nqs    43) nettle/3.4-vft434l            56) tk/8.6.8-ekmkqhf\r\n      5) direnv                        18) harfbuzz/2.3.1-py3.6-oi2acur                  31) libsm/1.2.2-o2oh3wn             44) openssl/1.1.1b-ttpynn6        57) tmux\r\n      6) emacs                         19) htop                                          32) libtiff/4.0.9-vntoozu           45) pango/1.41.0-py3.6-r63ixek    58) tree\r\n      7) expat/2.2.5-yueu76y           20) icu4c/60.1-yaq7rkn                            33) libx11/1.6.7-fde7vhi            46) pcre/8.42-jit-5sg6h5n         59) vim\r\n      8) font-util/1.3.1-h55nsu2       21) jdk/1.8.0_141-b15-npe2acp                     34) libxau/1.0.8-agyejqp            47) perl/5.26.2-ndoqgto           60) xextproto/7.3.0-lk677zo\r\n      9) fontconfig/2.12.3-k6alczn     22) kbproto/1.0.7-2vjelnv                         35) libxcb/1.13-be6phqf             48) pixman/0.38.0-har4ax3         61) xproto/7.0.31-3wym7qv\r\n     10) freetype/2.9.1-zxaa544        23) libbsd/0.9.1-64drktg                          36) libxdmcp/1.1.2-foxpnlx          49) r                             62) xz/5.2.4-fvj6toh\r\n     11) gdbm/1.18.1-2ggaajb           24) libevent/2.1.8-sxsgzkp                        37) libxext/1.3.3-m5gjspr           50) readline/7.0-wcnxwmb          63) zlib/1.2.11-6wdekzy\r\n     12) gettext/0.19.8.1-c6ipolx      25) libffi/3.2.1-2ssqtqu                          38) libxft/2.3.2-kcv646d            51) renderproto/0.11.1-cjz4unl\r\n     13) git                           26) libice/1.0.9-dfwj5jo                          39) libxml2/2.9.8-z2gjacs           52) sqlite/3.26.0-s5v72k5\r\n\r\n    $ which bat\r\n    /usr/bin/which: no bat in (/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin)\r\n    $ module load bat\r\n    Lmod has detected the following error:  These module(s) exist but cannot be loaded as requested: \"bat\"\r\n       Try: \"module spider bat\" to see how to load the module(s).\r\n\r\n\r\n\r\n    $ module spider bat\r\n\r\n    ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n      bat: bat/0.10.0-py2.7-xldouz3\r\n    ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n        You will need to load all module(s) on any one of the lines below before the \"bat/0.10.0-py2.7-xldouz3\" module is available to load.\r\n\r\n      gcc/8.2.0-uc6sbum\r\n\r\n        Help:\r\n          A cat(1) clone with wings.\r\n\r\n    $\r\n    ```\r\n\r\nSpack considers `bat` to \"belong\" to gcc@8.2.0 (as seen in `spack find`) and drops the modulefile into the `gcc/8.2.0` directory.  But, when I load it, it `rust` which loads `llvm` and (I think) the `family(\"compiler\")` bit causes Lmod to unload `gcc/8.2.0` and try to load a Core modulefile for `llvm` (which doesn't exist).\r\n\r\nI also tried building the system compiler (via `spack install bat%gcc@4.8.5`), which built `llvm` with `gcc@4.8.5` and then built rust with that `llvm` and finally `bat` with that `rust`.\r\n\r\nI still only have one Core modulefile, for `gcc@8.2.0`, which confuses me.  Trying to refer to `llvm` as a compiler, e.g. \r\n\r\n\r\n```consolesession\r\n$ spack spec bat%llvm\r\nInput spec\r\n--------------------------------\r\nbat%llvm\r\n\r\nConcretized\r\n--------------------------------\r\n==> Error: The 'llvm' compiler is not yet supported.\r\n```\r\n\r\nmakes it seem that `llvm` isn't a first class citizen.  I've also used `spack compiler add ...` to add the llvm compiler but still end up painted into the same corner.  And, I've tried adding `llvm` as a core compiler in my `modules.yaml` without any joy.\r\n\r\nAs mentioned up top, I'd love to understand the current state of the art around compilers but would be content to remain ignorant if I end up with a way to load my `gcc` built `emacs` alongside a `rust` -> `llvm` -> `gcc` built `bat`.",
    "performed_via_github_app": null
}