{
    "url": "https://api.github.com/repos/spack/spack/issues/12972",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/12972/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/12972/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/12972/events",
    "html_url": "https://github.com/spack/spack/pull/12972",
    "id": 499854875,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzIyNDY3OTIx",
    "number": 12972,
    "title": "prefer python3 to python2 for running Spack",
    "user": {
        "login": "tgamblin",
        "id": 299842,
        "node_id": "MDQ6VXNlcjI5OTg0Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/299842?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tgamblin",
        "html_url": "https://github.com/tgamblin",
        "followers_url": "https://api.github.com/users/tgamblin/followers",
        "following_url": "https://api.github.com/users/tgamblin/following{/other_user}",
        "gists_url": "https://api.github.com/users/tgamblin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tgamblin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tgamblin/subscriptions",
        "organizations_url": "https://api.github.com/users/tgamblin/orgs",
        "repos_url": "https://api.github.com/users/tgamblin/repos",
        "events_url": "https://api.github.com/users/tgamblin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tgamblin/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 574328447,
            "node_id": "MDU6TGFiZWw1NzQzMjg0NDc=",
            "url": "https://api.github.com/repos/spack/spack/labels/python3",
            "name": "python3",
            "color": "006b75",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-09-29T04:20:14Z",
    "updated_at": "2019-09-29T17:28:55Z",
    "closed_at": "2019-09-29T16:32:05Z",
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
        "url": "https://api.github.com/repos/spack/spack/pulls/12972",
        "html_url": "https://github.com/spack/spack/pull/12972",
        "diff_url": "https://github.com/spack/spack/pull/12972.diff",
        "patch_url": "https://github.com/spack/spack/pull/12972.patch"
    },
    "body": "Closes #11783.\r\n\r\n@michaelkuhn: I think this accomplishes what #11783 set out to do, but in a much simpler way.\r\n\r\nThe Python landscape is going to be changing in 2020, and Python 2 will be end of life. Spack should *prefer* Python 3 to Python 2 by default, but we still need to run on systems that only have Python2 available.\r\n\r\nThis is trickier than it sounds, as on some systems, the `python` command is `python2`; on others it's `python3`, and [RHEL8 doesn't even have the `python` command](https://developers.redhat.com/blog/2018/11/14/python-in-rhel-8/).  Instead, it makes you choose `python3` or `python2`. You can thus no longer make a simple shebang to handle all the cases.\r\n\r\nThis commit makes the `spack` script bilingual.  It is still valid Python, but its shebang is `#!/bin/sh`, and it has a tiny bit of shell code at the beginning to pick the right python and execute itself with what it finds.\r\n\r\nThis has a lot of advantages.  I think this will help ensure that Spack works well in Python3 -- there are cases where we've missed things because Python2 is still the default `python` on most systems.  Also, with this change, you do not lose the ability to execute the `spack` script directly with a python interpreter.  This is useful for forcing your own version of python, running coverage tools, and running profiling tools.  i.e., these will not break with this change:\r\n\r\n```console\r\n$ python2 $(which spack) <args>\r\n$ coverage run $(which spack) <args>\r\n$ pyinstrument $(which spack) <args>\r\n```\r\n\r\nThese would not work if we split `spack` into a python file and a shell script (see #11783).  So, this gives us the best of both worlds.  We get to control our interpreter *and* remain a mostly pure python executable.",
    "performed_via_github_app": null
}