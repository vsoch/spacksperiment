{
    "url": "https://api.github.com/repos/spack/spack/issues/11826",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/11826/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/11826/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/11826/events",
    "html_url": "https://github.com/spack/spack/issues/11826",
    "id": 459619450,
    "node_id": "MDU6SXNzdWU0NTk2MTk0NTA=",
    "number": 11826,
    "title": "Spack Environments: Load Group",
    "user": {
        "login": "citibeth",
        "id": 1924215,
        "node_id": "MDQ6VXNlcjE5MjQyMTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1924215?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/citibeth",
        "html_url": "https://github.com/citibeth",
        "followers_url": "https://api.github.com/users/citibeth/followers",
        "following_url": "https://api.github.com/users/citibeth/following{/other_user}",
        "gists_url": "https://api.github.com/users/citibeth/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/citibeth/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/citibeth/subscriptions",
        "organizations_url": "https://api.github.com/users/citibeth/orgs",
        "repos_url": "https://api.github.com/users/citibeth/repos",
        "events_url": "https://api.github.com/users/citibeth/events{/privacy}",
        "received_events_url": "https://api.github.com/users/citibeth/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 446634397,
            "node_id": "MDU6TGFiZWw0NDY2MzQzOTc=",
            "url": "https://api.github.com/repos/spack/spack/labels/discussion",
            "name": "discussion",
            "color": "a87f5a",
            "default": false,
            "description": null
        },
        {
            "id": 73908756,
            "node_id": "MDU6TGFiZWw3MzkwODc1Ng==",
            "url": "https://api.github.com/repos/spack/spack/labels/feature",
            "name": "feature",
            "color": "84b6eb",
            "default": false,
            "description": null
        },
        {
            "id": 466955297,
            "node_id": "MDU6TGFiZWw0NjY5NTUyOTc=",
            "url": "https://api.github.com/repos/spack/spack/labels/proposal",
            "name": "proposal",
            "color": "0e8a16",
            "default": false,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-06-23T21:23:45Z",
    "updated_at": "2020-03-02T09:41:54Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "@scheibelp @tgamblin @becker33 \r\n\r\nUpgrade Spack Environments to allow for *load groups* (LGs) --- i.e. groups of packages that are meant to be loaded together.  Each load group would be named (unless there's only one, in which case the name is optioanl).  Each load group would (as of today) have an option to concretize everything in it separately or together, a la #9902.  As an example, consider a `spack.yaml` something like this (pardon my bad YAML syntax):\r\n```\r\nloadgroup python2-stuff:\r\n    concretize-together: true\r\n    - python@2.7\r\n    - py-numpy\r\n    - py-scipy\r\nloadgroup python3-stuff:\r\n    concretize-together: true\r\n    - python@3.5\r\n    - py-numpy\r\n    - py-scipy\r\n```\r\n\r\nNOTES:\r\n\r\n1. It is expected that with a future (improved) concretizer, `concretize-together` will be removed, and always set to true.  (In the past, we've confused ourselves on why we're concretizing together vs. separately: is it for fundamental reasons, or is it because of the limites of our concretizer?  This proposal addresses that).\r\n\r\n2. In the past we've been talking about separate vs. single concretization to address two needs: (1) using a deficient concretizer, and (2) creating groups of packages that can't be loaded together).  It's important to keep these needs separate, which I believe this proposal does.\r\n\r\n3. Current usage would map to this:\r\n   ```\r\n   concretize <noname>:\r\n       concretize-together: false       # or true; see #9902\r\n       - python@3.5\r\n       - py-numpy\r\n       - emacs\r\n   ```\r\nWe could ensure backwards compatibility / convenience by allowing the current syntax; and internally mapping it to the more explicit syntax above.\r\n\r\n4. This is a generalization / integration of the original Spack Environment implementation, in which each spec is concretized separately --- and #9902, which adds an option to concretize all specs together --- and the original ideas for Environments.  @alalazo already implemented the guts of this feature in #11164, it's just a matter of exposing it as a first-class feature to the user.\r\n\r\n\r\n4. Optional name for load group: \"sub-environment\" (yuck), \"distro\" (yes, because each one is like a Linux distro), \"concretization group\" (my oiriginal name; but I think load group is better because specs may or may not be concretized together within each one)\r\n\r\n\r\nSpack Stacks\r\n============\r\n\r\nSpack stacks (#11057 #11612) would be implemented (most cleanly) by having the user write (eg) a `stack.yaml` file, instead of `spack.yaml`.  The `stack.yaml` file would have the syntax described in #11057, and in #11612.  In principle, each `stack.yaml` file can be reprocessed (internally) to a corresponding `spack.yaml` file, as if someone had manually written out all the combinations in a series of load groups.\r\n\r\nNOTES:\r\n\r\n1. There needs to be a way to generate the name of each load group (because each load group needs a name; see below).\r\n\r\n2. It is not necessary to *explicitly* generate the `spack.yaml` file, if people don't want that; just the principle that it *could* be done; and *is* done internally, in the parsed form.  Thus, **#11057 becomes basically a way to define `stack.yaml` syntax and process it into a `spack.yaml` internally parsed form.**\r\n\r\n3. The ability to generate a `spack.yaml` file explicitly might be nice for debugging because it shows *exactly* what combinations end up being created after all the combinatorial rules are applied.  This might become more important in the future: people might wish to add additional rules to controle combination generation.  (For example, do a combinatorial product, but avoid certain combinations that don't make sense.  Or concatenate multiple combinatorial products.  etc.  My sense is the functionality we have here is just the start).\r\n\r\n4. **PRO TIP**: Instead of making the user define a `spack.yaml` or `stack.yaml` file... consider just calling it `spack.yaml`, reading it, determine which kind it is, and do the appropriate thing.  Thus `stack.yaml` might be more of a conceptional idea than an on-the-ground reality.  (But the processing of the combinations into explicit load groups, at least as internal data structures, would remain a real thing).\r\n\r\n5. Note that Spack Stacks (AFAIK) requires *no new core Spack functionality* beyond Load Groups.  (If it does, please point out; and I'd like the opportunity to re-think this further).\r\n\r\n\r\nSpack Environment Support\r\n======================\r\n\r\nWith the addition of load groups, the following Spack Environment commands would need modififcation.  Maybe others would as well.  Note that the UI / semantics should never change for \"classic\" environments (one load group (LG), named `<noname>`); therefore, I'm not going to say that on each point.\r\n\r\nspack env add\r\n---------------\r\n\r\nA load group specifier needs to be added to the command, so Spack knows which LG it's modifying.  This will address #11687.\r\n\r\nspack env loads\r\n-----------------\r\n\r\nCurrently, `spack env loads -r <env>` creates a *single* file in the `environment/` folder that loads the given environment.  The same command will need to generate a file for each load group, *named after the load group's name*.  End users can access each load group in the environment by name.\r\n\r\nAlso, it would be nice if Spack could write a *single module* for each load group, thereby dispensing with having to generate scripts of 100 `module load` commands.\r\n\r\n\r\nSpack Environment Views\r\n---------------------------\r\n\r\nSpack will need to create a separate view for each load group, named after the LG.  Views should be turned on / off on a full environment basis, not per LG.\r\n\r\n**PRO TIP**: The result of `spack env loads` and the location of the Spack Environment View are completely different (but both inside the environment folder).  Maybe we should consider harmonizing this a bit.\r\n\r\nspack -e xyz concretize\r\n-------------------------\r\n\r\nLet's concretize all LGs at once.  No change to the command.\r\n\r\nspack -e xyz install\r\n--------------------\r\n\r\nInstall all LGs at once.  No change to the command.\r\n",
    "performed_via_github_app": null
}