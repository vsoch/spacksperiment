{
    "url": "https://api.github.com/repos/spack/spack/issues/17168",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/17168/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/17168/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/17168/events",
    "html_url": "https://github.com/spack/spack/issues/17168",
    "id": 641559753,
    "node_id": "MDU6SXNzdWU2NDE1NTk3NTM=",
    "number": 17168,
    "title": "A more robust way to support external packages",
    "user": {
        "login": "chuckatkins",
        "id": 320135,
        "node_id": "MDQ6VXNlcjMyMDEzNQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/320135?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chuckatkins",
        "html_url": "https://github.com/chuckatkins",
        "followers_url": "https://api.github.com/users/chuckatkins/followers",
        "following_url": "https://api.github.com/users/chuckatkins/following{/other_user}",
        "gists_url": "https://api.github.com/users/chuckatkins/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/chuckatkins/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chuckatkins/subscriptions",
        "organizations_url": "https://api.github.com/users/chuckatkins/orgs",
        "repos_url": "https://api.github.com/users/chuckatkins/repos",
        "events_url": "https://api.github.com/users/chuckatkins/events{/privacy}",
        "received_events_url": "https://api.github.com/users/chuckatkins/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 455855856,
            "node_id": "MDU6TGFiZWw0NTU4NTU4NTY=",
            "url": "https://api.github.com/repos/spack/spack/labels/external-packages",
            "name": "external-packages",
            "color": "c5def5",
            "default": false,
            "description": null
        },
        {
            "id": 73908756,
            "node_id": "MDU6TGFiZWw3MzkwODc1Ng==",
            "url": "https://api.github.com/repos/spack/spack/labels/feature",
            "name": "feature",
            "color": "84b6eb",
            "default": false,
            "description": null
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-06-18T21:27:32Z",
    "updated_at": "2020-06-23T14:52:44Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "This proposal is for a feature to allow external packages to be specified as a set of packages provided by the system's package manager and have spack using symlinks to emulate a unique install prefix.\r\n\r\n### Rationale\r\n\r\nOften a user needs to have spack use an externally installed version of a package.  The mechanism currently used by spack supplies either an explicit prefix or an env module.  If the external package isn't in it's own unique prefix though then anything else installed in that prefix pollutes the entire build environment.  This is particularly problematic if the package is installed in /usr by the system's package manager since the /usr prefix is shared by all other system packages, thus allowing everything in /usr to get pulled in to the spack environment whether you want it to or not.\r\n\r\n### Description\r\n\r\nI propose there be another mechanism to specify an external package besides module or prefix path that can leverage the system's package manager for interrogation and isolation.  Imagine that you could specify the spack package foo was made available by the system's foo and foo-devel rpms.  Something like this for rpms:\r\n```\r\npackages:\r\n  foo:\r\n    rpms:\r\n      foo@1.2.3%gcc@4.8.5 arch=linux-centos7-x86_64: [ libfoo, libfoo-devel ]\r\n    buildable: false\r\n```\r\nor for debs:\r\n```\r\npackages:\r\n  foo:\r\n    debs:\r\n      foo@1.2.3%gcc@5.4.0 arch=linux-ubuntu-16.04-x86_64: [ libfoo, libfoo-dev ]\r\n    buildable: false\r\n```\r\n\r\nThe `spack install foo` process would then use `rpm -ql libfoo libfoo-devel` or `dpkg -L libfoo libfoo-dev` to query the list of files provided by the specified rpms, create a unique install prefix within spack like it normally would, and then symlink all of the files provided by the specified rpms into the spack-created install prefix.  This would allow you to have a system-installed package provided in spack while maintaining the unique install prefix spack has for every package and avoiding pollution of the spack environment by everything else in the package's shared install prefix.\r\n\r\nOne of the problems with this approach is that dev files like pkg-config .pc files and CMake package config files would still reference the actual shared prefix instead of the newly created spack provided one that everything is symlinked into.  However, if I understand correctly (and maybe I don't so please correct me if that's the case) spack already has a mechanism to perform string replacement on txt files during installation so the feature could build on that by copying certain types of files instead of symlinking them and then changing the paths as appropriate using the existing capability.\r\n\r\nThis could be implemented for any packaging system we'd like but at a minimum we'd want to have rpm (yum, dnf and zypper) and deb (apt).\r\n\r\n### Additional information\r\n\r\nThis is a real problem that has come up in a variety of contexts when having to mix vendor-supplied packages that are built with system dependencies which are mismatched with the spack-provided versions.  I encounter it frequently when trying to provide an system-supplied opengl pacakge which is usually installed in /usr.\r\n\r\nI've also just recently encountered this issue on ascent at OLCF.  Both spectrum-mpi and libfabric are provided by spack, but with spectrum-mpi being an external installed as an rpm in /opt and libfabric being built by spack.  Both of them have a dependency on the `rdma-core` libraries but spectrum-mpi, as a vendor provded package, is built against the system-supplied rdma-core libraries while the spack-built libfabric package is of course using the spack-provided rdma-core libraries.  Trying to use both of them together in the same application results in neither of them working correctly because of the mismatched versions of libibverbs and librdmacm from rdma-core they were built against.  The solution to this would be to configure the `rdma-core` spack package to be an external, but since it's installed as a system packge in /usr then that would pollute the entire spack environment with everything from /usr.  A feature such as this would address that.\r\n\r\nI would love to get some feedback and discussion on such an idea.",
    "performed_via_github_app": null
}