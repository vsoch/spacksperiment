{
    "url": "https://api.github.com/repos/spack/spack/issues/10621",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/10621/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/10621/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/10621/events",
    "html_url": "https://github.com/spack/spack/pull/10621",
    "id": 410816828,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjUzNDY0NzY3",
    "number": 10621,
    "title": "Catch-all fallback for libs detection",
    "user": {
        "login": "HadrienG2",
        "id": 1305080,
        "node_id": "MDQ6VXNlcjEzMDUwODA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1305080?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/HadrienG2",
        "html_url": "https://github.com/HadrienG2",
        "followers_url": "https://api.github.com/users/HadrienG2/followers",
        "following_url": "https://api.github.com/users/HadrienG2/following{/other_user}",
        "gists_url": "https://api.github.com/users/HadrienG2/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/HadrienG2/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/HadrienG2/subscriptions",
        "organizations_url": "https://api.github.com/users/HadrienG2/orgs",
        "repos_url": "https://api.github.com/users/HadrienG2/repos",
        "events_url": "https://api.github.com/users/HadrienG2/events{/privacy}",
        "received_events_url": "https://api.github.com/users/HadrienG2/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 27,
    "created_at": "2019-02-15T15:22:52Z",
    "updated_at": "2019-12-20T09:40:15Z",
    "closed_at": "2019-10-16T15:51:07Z",
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "pull_request": {
        "url": "https://api.github.com/repos/spack/spack/pulls/10621",
        "html_url": "https://github.com/spack/spack/pull/10621",
        "diff_url": "https://github.com/spack/spack/pull/10621.diff",
        "patch_url": "https://github.com/spack/spack/pull/10621.patch"
    },
    "body": "The `_libs_default_handler` implicitly assumes that a library package called `(lib)?Something` will always produce a library called `libSomething`. This is not always the case, here are some counter examples:\r\n\r\n- `gettext` (produces several `libgettextSomething`s and a `libintl`, but not `libgettext`)\r\n- `intel-Something` (produces `libSomething`, without the intel prefix)\r\n- X11 packages (though that one could be fixed with a case-insensitive search)\r\n\r\nCurrently, the result is that these libraries will not be correctly added to the RPATH, leading to problems like #10617 . One possibility is to override libs() for every such package, but that gets tedious quickly. As an alternative, this PR proposes to have the default libs handler try harder and enumerate every library in the package's Spack prefix instead.\r\n\r\nI am quite convinced that this is a decent heuristic for library packages that are build using Spack, as the prefix will be specific to that package. But am not sure if this heuristic works or can be made to work for external packages where many libraries can end up sharing a common prefix. Extra review on this specific point would be most welcome.\r\n\r\nSee also #10617 for prior discussion.",
    "performed_via_github_app": null
}