{
    "url": "https://api.github.com/repos/spack/spack/issues/14368",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/14368/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/14368/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/14368/events",
    "html_url": "https://github.com/spack/spack/issues/14368",
    "id": 544911681,
    "node_id": "MDU6SXNzdWU1NDQ5MTE2ODE=",
    "number": 14368,
    "title": "Cannot find intel compiler?",
    "user": {
        "login": "SheraLee",
        "id": 33297023,
        "node_id": "MDQ6VXNlcjMzMjk3MDIz",
        "avatar_url": "https://avatars.githubusercontent.com/u/33297023?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SheraLee",
        "html_url": "https://github.com/SheraLee",
        "followers_url": "https://api.github.com/users/SheraLee/followers",
        "following_url": "https://api.github.com/users/SheraLee/following{/other_user}",
        "gists_url": "https://api.github.com/users/SheraLee/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/SheraLee/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/SheraLee/subscriptions",
        "organizations_url": "https://api.github.com/users/SheraLee/orgs",
        "repos_url": "https://api.github.com/users/SheraLee/repos",
        "events_url": "https://api.github.com/users/SheraLee/events{/privacy}",
        "received_events_url": "https://api.github.com/users/SheraLee/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 446616547,
            "node_id": "MDU6TGFiZWw0NDY2MTY1NDc=",
            "url": "https://api.github.com/repos/spack/spack/labels/build-error",
            "name": "build-error",
            "color": "ff3300",
            "default": false,
            "description": null
        },
        {
            "id": 477156668,
            "node_id": "MDU6TGFiZWw0NzcxNTY2Njg=",
            "url": "https://api.github.com/repos/spack/spack/labels/intel",
            "name": "intel",
            "color": "127cc1",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-01-03T09:18:36Z",
    "updated_at": "2020-01-10T10:26:35Z",
    "closed_at": "2020-01-10T10:26:35Z",
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "My package was working last month, but now it keeps on giving me the flowing errors when I use the intel compiler. This package depends on FFTW and MPI, which I have provided the external module. I am not sure if the error is caused by  `spack_env.set('CC', spec['mpi'].mpicc)`, or maybe the external mpi module. Any help will be really appreciated. Thank you!\r\n\r\n**Error Message**\r\n```\r\n[shera@comet-ln3 ~]$ spack install --dirty p3dfft-3%intel ^mvapich2\r\n==> fftw@3.3.8 : has external module in fftw\r\n==> fftw@3.3.8 : is actually installed in /opt/fftw/3.3.8/intel/mvapich2_ib\r\n==> fftw@3.3.8 : already registered in DB\r\n==> mvapich2@2.3.1 : has external module in mvapich2_ib\r\n==> mvapich2@2.3.1 : is actually installed in /opt/mvapich2/intel/ib\r\n==> mvapich2@2.3.1 : already registered in DB\r\n==> Installing p3dfft-3\r\n==> Searching for binary cache of p3dfft-3\r\n==> Warning: No Spack mirrors are currently configured\r\n==> No binary for p3dfft-3 found: installing from source\r\n==> Error: OSError: [Errno 2] No such file or directory: '/opt/intel/2018.1.163/compilers_and_libraries_2018.1.163/linux/ipp/lib/intel64'\r\n\r\n/home/shera/spack/spack/lib/spack/spack/build_environment.py:823, in child_process:\r\n        820            tb_string = traceback.format_exc()\r\n        821\r\n        822            # build up some context from the offending package so we can\r\n  >>    823            # show that, too.\r\n        824            package_context = get_package_context(tb)\r\n        825\r\n        826            build_log = None\r\n```\r\n\r\n**Package.py**\r\n```python\r\nfrom spack import *\r\n\r\n\r\nclass P3dfft3(Package):\r\n    \"\"\"put a proper description of this  package here later.\"\"\"\r\n\r\n    homepage = \"https://www.p3dfft.net\"\r\n    url      = \"https://github.com/sdsc/p3dfft.3/archive/master.tar.gz\"\r\n    git = \"https://github.com/sdsc/p3dfft.3\"\r\n\r\n    version('develop', branch = 'master')\r\n    version('0.0.0', '3c62c2bdf4aa91c3f1ab122efc1b3799')\r\n\r\n    variant('fftw', default = True,\r\n            description='Builds with FFTW library')\r\n    variant('essl', default=False,\r\n            description='Builds with ESSL library')\r\n    variant('mpi', default = True,\r\n            description=\"Enable MPI support.\")\r\n    variant('openmp', default=False,\r\n            description=\"Enable OpenMP support.\")\r\n    variant('measure', default=False,\r\n            description=\"Define if you want to use the measure fftw planner flag\")\r\n    variant('estimate', default=False,\r\n            description=\"Define if you want to use the estimate fftw planner flag\")\r\n    variant('patient', default=False,\r\n            description=\"[Define if you want to use the patient fftw planner flag]\")\r\n\r\n    depends_on('mpi',when = '+mpi')\r\n    depends_on('fftw',when = '+fftw')\r\n    depends_on('essl',when = '+essl')\r\n    depends_on('openmp',when = '+openmp')\r\n\r\n\r\n    def setup_environment(self, spack_env, run_env):\r\n        spec = self.spec\r\n\r\n        spack_env.set('CC', spec['mpi'].mpicc)\r\n        spack_env.set('FC', spec['mpi'].mpifc)\r\n        spack_env.set('CXX', spec['mpi'].mpicxx)\r\n\r\n\t\r\n\r\n    def install(self, spec, prefix):\r\n        config_args = ['--prefix={0}'.format(prefix)]\r\n\r\n        if '+fftw' in spec:\r\n            config_args.append('--enable-fftw')\r\n            config_args.append ('--with-fftw-lib= %s' % spec['fftw'].prefix.lib)\r\n            config_args.append ('--with-fftw-inc= %s' % spec['fftw'].prefix.include)\r\n            if '+measure' in spec:\r\n\t\t config_args.append('--enable-fftwmeasure')\r\n            if '+estimate' in spec:\r\n\t\t config_args.append('--enable-fftwestimate')\r\n            if '+patient' in spec:\r\n                 config_args.append('--enable-fftwpatient')\r\n\r\n        if '+essl' in spec:\r\n            config_args.append('--enable-essl')\r\n            config_args.append ('--with-essl-lib= %s' % spec['essl'].prefix.lib)\r\n            config_args.append ('--with-essl-inc= %s' % spec['essl'].prefix.include)\r\n\r\n\tif '+mkl' in spec:\r\n            config_args.append('--enable-mkl')\r\n            config_args.append ('--with-mkl-lib= %s' % spec['mkl'].prefix.lib)\r\n            config_args.append ('--with-mkl-inc= %s' % spec['mkl'].prefix.include)\t\r\n\r\n        configure( *config_args)\r\n\r\n        make()\r\n        make('install')\r\n```\r\n**package.yaml**\r\n```yaml\r\npackages:\r\n    fftw:\r\n        modules:\r\n             fftw: fftw \r\n        buildable: False\r\n\r\n    mvapich2:\r\n        modules:\r\n             mvapich2: mvapich2_ib\r\n        buildable: False\r\n\r\n    openmpi:\r\n        modules:\r\n             openmpi: openmpi_ib\r\n        buildable: False\r\n\r\n    intel-mpi:\r\n        modules:\r\n             intel-mpi: intelmpi\r\n        buildable: False\r\n    \r\n```",
    "performed_via_github_app": null
}