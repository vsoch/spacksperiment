{
    "url": "https://api.github.com/repos/spack/spack/issues/543",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/543/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/543/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/543/events",
    "html_url": "https://github.com/spack/spack/pull/543",
    "id": 140346450,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NjI2MzExMzY=",
    "number": 543,
    "title": "[RtM] spack setup, Developer Support for CMake Projects",
    "user": {
        "login": "citibeth",
        "id": 1924215,
        "node_id": "MDQ6VXNlcjE5MjQyMTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1924215?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/citibeth",
        "html_url": "https://github.com/citibeth",
        "followers_url": "https://api.github.com/users/citibeth/followers",
        "following_url": "https://api.github.com/users/citibeth/following{/other_user}",
        "gists_url": "https://api.github.com/users/citibeth/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/citibeth/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/citibeth/subscriptions",
        "organizations_url": "https://api.github.com/users/citibeth/orgs",
        "repos_url": "https://api.github.com/users/citibeth/repos",
        "events_url": "https://api.github.com/users/citibeth/events{/privacy}",
        "received_events_url": "https://api.github.com/users/citibeth/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 12,
    "created_at": "2016-03-12T04:37:10Z",
    "updated_at": "2016-07-04T07:36:26Z",
    "closed_at": "2016-07-04T07:36:26Z",
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
        "url": "https://api.github.com/repos/spack/spack/pulls/543",
        "html_url": "https://github.com/spack/spack/pull/543",
        "diff_url": "https://github.com/spack/spack/pull/543.diff",
        "patch_url": "https://github.com/spack/spack/pull/543.patch"
    },
    "body": "@mathstuf @tgamblin:\n\nHere's a first shot at separating the install() phase into sub-phases.\nThis is core functionality that will support the goals described in PR #474, but in a cleaner way than originally envisioned.\nI'm hoping we can iterate on this...\n\nA new subclass StagedPackage(Package) is introduced.  This PR should\nnot change the behavior for existing packages that subclass from\nspack.Package.\n\nIf a package subclasses spack.StagedPackage instead of spack.Package,\nthe install() phase (run inside a forked process) is now separated\ninto sub-stages:\n\n```\na) spconfig: Generate a script spconfig.py that will configure the\n   package (eg by running CMake or ./configure) This is for use if\n   the user wishes to build externally from Spack.  Therefore, the\n   Spack compiler wrappers are NOT used here.  Currently, that\n   means that RPATH support is up to the user.\n\nb) configure: Configure the project (eg: runs configure, CMake,\n   etc).  This will configure it for use within Spack, using the\n   Spack wrapper.\n\nc) build: eg: \"make\"\n\nd) install: eg: \"install\"\n```\n\nIf one chooses to use StagedPackage instead of Package, then one must\nimplement each of the install sub-stages as a separate method.\nStagedPackage.install() then calls each of the sub-stages as\nappropriate.\n\nStagedPackage can be configured to only run certain sub-stages.  This\nis done by setting the optional kwarg install_phases when calling\ndo_install().  Setting install_phases() ONLY has an effect on\nStagedPackage, not on any existing packages.  By default,\ninstall_phases is set to make StagedPackage run the same stages that\nare normally run for any package: configure, build, install (and NOT\nspconfig).\n\nThe ability for Spack to run stages selectively for StagedPackage\ninstances will enable new functionality.  For example, explicit\nCMake/Autotools helpers that allow Spack to help configure a user's\nproject without fetching, building or installing it.\n\n---\n\nOne implementation of StagedPackage is provided, CMakePackage.  This\nhas the following advantage for CMake-based projects over using the\nstandard Package class:\n\n  a) By separating out the phases, it enables future new functionality\n     for packages that use it.\n\n  b) It provides an implementation of intall_spconfig(), which will\n     help users configure their CMake-based projects.\n\nCMakePackage expects users to implement configure_args() and\nconfigure_env().  These methods provide the package-specific arguments\nand environment needed to properly configure the package.  They are\nplaced in separated functions because they are used in both the\nspconfig and configure stages.\n\nTODO:\n1. Generate spconfig.py scripts that are more readable.  This allows\n   the users to understand how their project is configured.\n2. Provide a practical way for the user to ACCESS the spconfig stage\n   without building the project through Spack.\n3. The CMAKE_TRANSITIVE_INCLUDE_PATH stuff needs to be reworked; it\n   should be considered provisional for now.\n4. User of Autotools might wish to make a similar ConfigurePackage\n   subclass of StagedPackage.\n\n---\n\nOne package using CMakePackage is introduced.  See ibmisc/package.py.\n",
    "performed_via_github_app": null
}