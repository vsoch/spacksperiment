{
    "url": "https://api.github.com/repos/spack/spack/issues/7536",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/7536/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/7536/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/7536/events",
    "html_url": "https://github.com/spack/spack/pull/7536",
    "id": 307067625,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTc2MzQ0NjUx",
    "number": 7536,
    "title": "Env mod 4",
    "user": {
        "login": "mgsternberg",
        "id": 31289496,
        "node_id": "MDQ6VXNlcjMxMjg5NDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/31289496?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mgsternberg",
        "html_url": "https://github.com/mgsternberg",
        "followers_url": "https://api.github.com/users/mgsternberg/followers",
        "following_url": "https://api.github.com/users/mgsternberg/following{/other_user}",
        "gists_url": "https://api.github.com/users/mgsternberg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mgsternberg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mgsternberg/subscriptions",
        "organizations_url": "https://api.github.com/users/mgsternberg/orgs",
        "repos_url": "https://api.github.com/users/mgsternberg/repos",
        "events_url": "https://api.github.com/users/mgsternberg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mgsternberg/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 446632829,
            "node_id": "MDU6TGFiZWw0NDY2MzI4Mjk=",
            "url": "https://api.github.com/repos/spack/spack/labels/modules",
            "name": "modules",
            "color": "fef2c0",
            "default": false,
            "description": null
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 7,
    "created_at": "2018-03-20T22:54:03Z",
    "updated_at": "2019-07-16T15:54:34Z",
    "closed_at": "2019-07-16T15:54:34Z",
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "pull_request": {
        "url": "https://api.github.com/repos/spack/spack/pulls/7536",
        "html_url": "https://github.com/spack/spack/pull/7536",
        "diff_url": "https://github.com/spack/spack/pull/7536.diff",
        "patch_url": "https://github.com/spack/spack/pull/7536.patch"
    },
    "body": "### Introduction\r\n\r\nThis PR provides fixes for Spack to function with [Environment Modules 4.x](https://github.com/cea-hpc/modules) and to address minor coding issues.\r\n\r\nI factored out the main fix addressed here from #7469. As mentioned in that PR in general, the issue is fundamental and would render Spack a non-starter for new users on a similar platform.\r\n\r\n### Issues and Fixes\r\n\r\n* Spack threw `UnboundLocalError` when using Environment Modules 4.x.\r\n  - Solution: Add a `continue` statement in `lib/spack/spack/environment.py:from_sourcing_file()`.\r\n\r\n  This is the absolute minimum needed to accommodate Env-Mod-4.x.  It turns out that a changed content of `BASH_FUNC_module()` triggered this problem (see next point). \r\n\r\n* `BASH_FUNC_module()` and `ENV` must be blacklisted to not show up in generated modulefiles.\r\n  - Root cause: Env-Mod-4 initializes `module()` differently, depending on the tty being interactive or not, or more specifically, where stderr goes [(see reason in code)](https://github.com/cea-hpc/modules/blob/master/modulecmd.tcl.in#L3476):\r\n\r\n  ```sh\r\n  $ env - bash -l -c 'env' | grep 'module()'\r\n  BASH_FUNC_module()=() {  _moduleraw $* 2>&1\r\n  $ env - bash -l -c 'env' 2> /dev/null | grep 'module()'\r\n  BASH_FUNC_module()=() {  if [ \"$MODULES_SILENT_SHELL_DEBUG\" = '1' ]; then\r\n  ```\r\n  and:\r\n  ```sh\r\n  $ ( env;  env - bash -l -c 'env' ) | grep ^ENV\r\n  ENV=/home/username/.bashrc\r\n  ENV=/usr/share/Modules/init/profile.sh\r\n  ```\r\n  Blacklisting `BASH_FUNC_module()` happens to sidestep the initial problem, but the latter should still be fixed to address the uninitialized variable issue.\r\n\r\n* A TypeError/NoneType was thrown if `blacklist` was in the YAML config but had all entries commented out (as happened during debugging), or equivalently has no entries.\r\n  - Solution: Extend a relevant `if` clause.\r\n\r\n\r\n### Background\r\nThe Environment Modules software project recently saw some major changes when Xavier Delaruelle <xavier.delaruelle@cea.fr> took on maintanence. He froze the former C-based implementation at 3.x, since it had become difficult to maintain and extend, and instead made the formerly alternative Tcl implemention the primary engine. Like Modules-C, the Modules-Tcl goes back quite some time and was mature but nonetheless new and interesting features are available with 4.x.\r\n\r\nPre-release versions of Environment Modules-4, like Modules-Tcl previously, did _not work at all with Spack_ for their lack of a `modulecmd` script/executable. The 4.x release version conveniently added such a script, which Spack can latch on to. For end users, more involved interfaces are available in a `module` function for Bash and numerous scripting languages, including Python. Those front-end functions support the concept of _quarantining_ variables, in particular `LD_LIBRARY_PATH`, which is needed to ensure that any user-side environment modifications do not interfere with running the Tcl interpreter for the Modules engine itself. Since Spack itself isolates module commands, however, this quarantine may not strictly be needed.\r\n\r\n### Development note\r\nWhile implementing the above, I got the impression that `lib/spack/spack/environment.py:from_sourcing_file()` looks somewhat, shall we say, \"organically grown\", which is concerning given the complexity of its task. That function could benefit from being split into two tasks:\r\n\r\n1. sourcing a file and reading the resulting environment, and\r\n2. comparing two environments stored as `dict` objects.\r\n\r\nFactoring out task 2 should make it rather more easy to test. It could be done here or in a separate PR. Of interest might be [createmodule.py](https://github.com/cea-hpc/modules/blob/master/contrib/scripts/createmodule.py) (it is under GPLv2). It uses a slightly different algorithm, jumping off with the rather nifty construct `(prepend,append) = env2[key].split(env1[key])`. There is also a [Bash-based version](https://github.com/cea-hpc/modules/blob/master/contrib/scripts/createmodule.sh) which, remarkably, is shorter.",
    "performed_via_github_app": null
}