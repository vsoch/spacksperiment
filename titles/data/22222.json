{
    "url": "https://api.github.com/repos/spack/spack/issues/22222",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/22222/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/22222/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/22222/events",
    "html_url": "https://github.com/spack/spack/issues/22222",
    "id": 827702566,
    "node_id": "MDU6SXNzdWU4Mjc3MDI1NjY=",
    "number": 22222,
    "title": "compiler.yaml (and possibly packages.yaml) files requires undocumented order of modules",
    "user": {
        "login": "jjellio",
        "id": 21248657,
        "node_id": "MDQ6VXNlcjIxMjQ4NjU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/21248657?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jjellio",
        "html_url": "https://github.com/jjellio",
        "followers_url": "https://api.github.com/users/jjellio/followers",
        "following_url": "https://api.github.com/users/jjellio/following{/other_user}",
        "gists_url": "https://api.github.com/users/jjellio/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jjellio/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jjellio/subscriptions",
        "organizations_url": "https://api.github.com/users/jjellio/orgs",
        "repos_url": "https://api.github.com/users/jjellio/repos",
        "events_url": "https://api.github.com/users/jjellio/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jjellio/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 73908754,
            "node_id": "MDU6TGFiZWw3MzkwODc1NA==",
            "url": "https://api.github.com/repos/spack/spack/labels/bug",
            "name": "bug",
            "color": "fc2929",
            "default": true,
            "description": null
        },
        {
            "id": 446615268,
            "node_id": "MDU6TGFiZWw0NDY2MTUyNjg=",
            "url": "https://api.github.com/repos/spack/spack/labels/compilers",
            "name": "compilers",
            "color": "f9d0c4",
            "default": false,
            "description": null
        },
        {
            "id": 446614485,
            "node_id": "MDU6TGFiZWw0NDY2MTQ0ODU=",
            "url": "https://api.github.com/repos/spack/spack/labels/cray",
            "name": "cray",
            "color": "b60205",
            "default": false,
            "description": null
        },
        {
            "id": 1433532775,
            "node_id": "MDU6TGFiZWwxNDMzNTMyNzc1",
            "url": "https://api.github.com/repos/spack/spack/labels/triage",
            "name": "triage",
            "color": "ed9793",
            "default": false,
            "description": "The issue needs to be prioritized"
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2021-03-10T13:01:11Z",
    "updated_at": "2021-03-10T13:58:27Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "<!-- Explain, in a clear and concise way, the command you ran and the result you were trying to achieve.\r\nExample: \"I ran `spack find` to list all the installed packages and ...\" -->\r\n\r\nI've been developing a SPACK `cray/compiler.yaml` and randomly seemed to start getting missing `<mpi.h>` or the configures would fail to link `cannot find libmpi.so`.  With some digging (verbose compiler flags + linker). I noticed sometimes I was missing my MPI include path, and other times I was missing MPI in the rpath or library path.  My intuition was that I screwed up defining an external `mvapich2` definition in `packages.yaml`.  But no matter what I did to `compilers.yaml` or `packages.yaml` I always seemed to bump into one of the 3 possible problems (missing mpi.h, missing rpath, or failure to link due to missing library path). \r\n\r\nI say *randomly* because as I hit problems I tried to resolve them in `packages.yaml` or `compilers.yaml`, but I was fairly sure the modules I specified should be the correct modules. Likewise, if I loaded the modules (as specified in the yamls) manually `module load ...` I could always compile/link/run binaries.\r\n\r\nDoing the naturally thing, I started hacking away trying to pin down why I got some errors some times and other errors others (that wasn't very fruitful).\r\n\r\nI finally started getting a very early error:\r\n\r\nIn `spack install`, i.e., an error in spack's setup:\r\n```\r\n==> [2021-03-10-05:48:11.353899] [TOOLCHAIN] MATCH Cce\r\n==> [2021-03-10-05:48:11.751752] Module name: craype-x86-haswell\r\n==> [2021-03-10-05:48:11.751919] Package directory variable prefix: CRAYPE_X86_HASWELL\r\n==> [2021-03-10-05:48:11.766202] Error: TypeError: expected str, bytes or os.PathLike object, not NoneType\r\n\r\nspack/lib/spack/spack/build_environment.py:873, in _setup_pkg_and_run:\r\n        870        tb_string = traceback.format_exc()\r\n        871\r\n        872        # build up some context from the offending package so we can\r\n  >>    873        # show that, too.\r\n        874        package_context = get_package_context(tb)\r\n        875\r\n        876        logfile = None\r\n```\r\n\r\nAt this point, I had a `cray/compilers.yaml` that likely had modules defined roughly as: \r\n```\r\n  modules:\r\n  - something\r\n  - craype-x86-haswell\r\n  - something else\r\n  - cce\r\n```\r\n\r\nI started looking at how SPACK deals with modules/rpath/etc... and I noticed this:\r\n```\r\n    # Second module is our compiler mod name. We use that to get rpaths from\r\n    # module show output.\r\n```\r\n\r\n```python\r\n# lib/spack/spack/build_environment.py:652\r\n\r\ndef get_rpaths(pkg):\r\n    \"\"\"Get a list of all the rpaths for a package.\"\"\"\r\n    rpaths = [pkg.prefix.lib, pkg.prefix.lib64]\r\n    deps = get_rpath_deps(pkg)\r\n    rpaths.extend(d.prefix.lib for d in deps\r\n                  if os.path.isdir(d.prefix.lib))\r\n    rpaths.extend(d.prefix.lib64 for d in deps\r\n                  if os.path.isdir(d.prefix.lib64))\r\n    # Second module is our compiler mod name. We use that to get rpaths from\r\n    # module show output.\r\n    if pkg.compiler.modules and len(pkg.compiler.modules) > 1:\r\n        rpaths.append(path_from_modules([pkg.compiler.modules[1]]))\r\n    return list(dedupe(filter_system_paths(rpaths)))\r\n\r\n```\r\nIf I moved (in this case) Cray's `cce` to be my second module in `cray/compilers.yaml`, Then my headache miraculously vanishes.\r\n\r\nI am a SPACK noob (so please correct me if I've missed something obvious).\r\n\r\nI guess if I need to have my core compiler module as the second in the list, I missed that somewhere (In the learning process I've bounced around yaml files from admins and this subtle detail was never conveyed to me).\r\n\r\nGiven this a Cray platform, getting one core module off can cause really weird things to happen (for example, the rpath, library path, or include error)\r\n\r\nNot sure if this is a bug or just a pitfall a new user can fall into.\r\n(Apologies for the ramble, I think there is value in understanding how a user arrived at their dysfunctional state of being)\r\n\r\n### Information on your system\r\n\r\nThis system is a private Cray platform.\r\n```\r\nspack debug report\r\n* **Spack:** 0.16.1-1664-a9fcba827b\r\n* **Python:** 3.6.8\r\n* **Platform:** cray-rhel8-haswell\r\n* **Concretizer:** original\r\n```\r\n\r\n### Additional information\r\n\r\n<!-- These boxes can be checked by replacing [ ] with [x] or by clicking them after submitting the issue. -->\r\n- [ x ] I have run `spack debug report` and reported the version of Spack/Python/Platform\r\n- [ x ] I have searched the issues of this repo and believe this is not a duplicate\r\n- [ x ] I have run the failing commands in debug mode and reported the output\r\n\r\n",
    "performed_via_github_app": null
}