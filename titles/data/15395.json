{
    "url": "https://api.github.com/repos/spack/spack/issues/15395",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/15395/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/15395/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/15395/events",
    "html_url": "https://github.com/spack/spack/pull/15395",
    "id": 577704739,
    "node_id": "MDExOlB1bGxSZXF1ZXN0Mzg1NDIzMDgw",
    "number": 15395,
    "title": "Improvements to Rust's Installation",
    "user": {
        "login": "AndrewGaspar",
        "id": 2292643,
        "node_id": "MDQ6VXNlcjIyOTI2NDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2292643?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AndrewGaspar",
        "html_url": "https://github.com/AndrewGaspar",
        "followers_url": "https://api.github.com/users/AndrewGaspar/followers",
        "following_url": "https://api.github.com/users/AndrewGaspar/following{/other_user}",
        "gists_url": "https://api.github.com/users/AndrewGaspar/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/AndrewGaspar/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/AndrewGaspar/subscriptions",
        "organizations_url": "https://api.github.com/users/AndrewGaspar/orgs",
        "repos_url": "https://api.github.com/users/AndrewGaspar/repos",
        "events_url": "https://api.github.com/users/AndrewGaspar/events{/privacy}",
        "received_events_url": "https://api.github.com/users/AndrewGaspar/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 1888436240,
            "node_id": "MDU6TGFiZWwxODg4NDM2MjQw",
            "url": "https://api.github.com/repos/spack/spack/labels/rust",
            "name": "rust",
            "color": "B7410E",
            "default": false,
            "description": ""
        }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 17,
    "created_at": "2020-03-09T07:20:36Z",
    "updated_at": "2020-04-12T01:34:32Z",
    "closed_at": "2020-03-20T03:57:42Z",
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "pull_request": {
        "url": "https://api.github.com/repos/spack/spack/pulls/15395",
        "html_url": "https://github.com/spack/spack/pull/15395",
        "diff_url": "https://github.com/spack/spack/pull/15395.diff",
        "patch_url": "https://github.com/spack/spack/pull/15395.patch"
    },
    "body": "# Overview\r\nThis change improves on the installation of the rust package in a few key ways. First, it puts everything needed to build the package into Spack's package management, meaning you no longer need network access to build the package (the current Rust package must pull the bootstrapping compiler off the Internet). Second, it builds the vendored LLVM for the package. This is important because Rust is tightly coupled to its own, modified version of LLVM - it shouldn't be built with any arbitrary version of LLVM, even if in practice it sometimes works. Finally, it provides a path to bootstrap Rust from a C++ implementation of the compiler called mrustc.\r\n\r\n# Implementation\r\n## Rust Binary Releases\r\nThe current 'rust' package relies on the Rust build system pulling the bootstrapping compiler from the web. This, of course, doesn't work on systems that are airgapped. For this reason, I've added the binary releases for x86 linux, x86 macos, and powerpc64le linux as first class packages in spack. In fact, if you don't care about bootstrapping the compiler, you can use them directly.\r\n\r\nTo accomplish this, I had to add 4 packages:\r\n- `rust-binary`\r\n- `rust-binary-x86-64-unknown-linux-gnu`\r\n- `rust-binary-x86-64-apple-darwin`\r\n- `rust-binary-powerpc64le-unknown-linux-gnu`\r\n\r\n`rust-binary` acts as an indirection to the platform-specific packages. There were a couple alternative implementations I would have liked to pursue, but unfortunately spack limitations led me to go this route with multiple packages.\r\n\r\nIdeally, I could register each different platform's tar file in the same package, but spack doesn't support differentiating \"versions\" based on architecture. That's why I put each platform in a separate package.\r\n\r\nIn this case, with separate packages for each platform, I had considered using `provides` for `rust-binary`. Unfortunately, the `provides` directive currently requires you to fully proscribe the target arch, which I did not want to do. Additionally, even when fully proscribing the target arch, I seemed to encounter issues with the correct arch provider not being selected, but I didn't fully look into it.\r\n\r\nSo, instead, I just made `rust-binary`, which merely takes the correct arch distribution and copies the install directory into the rust-binary prefix. Each `rust-binary-*` package derives from `RustBinaryPackage`, which is defined in `lib/spack/spack/build_systems/rust.py`. This minimizes code duplication between each package.\r\n\r\nUnfortunately, `rust-binary` has to download a dummy tar file of the Rust source code even though it's not actually used. I couldn't figure out a way around providing _some_ sort of unique tar file for each version, and the source tar file from the GitHub releases page seemed like the most expedient solution. This, interestingly, is different from the tar files that are used for bootstrapping, which include the necessary vendored dependencies.\r\n\r\n## Rust Bootstrapping\r\nThe existing `rust` package bootstraps the compiler from the existing binary distribution of the compiler, and this change expands on that. Now, in addition to bootstrapping from the latest stable release, you can also bootstrap from a C++ implementation of Rust called [mrustc](https://github.com/thepowersgang/mrustc). This means you don't have to run any pre-compiled code in the bootstrap of the compiler.\r\n\r\nOf course, bootstrapping from mrustc takes a very long time. It requires building every version of the compiler from Rust 1.29 through the version you wish to build (latest stable release is currently 1.41). Therefore, the default for `rust-bootstrap` is to build from `rust-binary` (see `default/packages.yaml`).\r\n\r\nBecause packages cannot depend on themselves, I had to introduce unique packages for each stage of the bootstrap from mrustc. Therefore, I created a package for each version of Rust from 1.29 through 1.41. There's no fundamental reason this couldn't include more versions of Rust, but the highest value seems to be bootstrapping from mrustc. There doesn't seem to be a lot of value in bootstrapping Rust from, say, `rust-binary@1.0` - if you're ok running the pre-compiled executables, why not just run the latest version?\r\n\r\nA versioned bootstrapped package like `rust-bootstrap-1-35` bootstraps from any package that provides `rust-can-bootstrap-1-35`, and it provides `rust-can-bootstrap-1-36`.  In order to build from mrustc, you _can_ specify `spack install rust-bootstrap ^rust-bootstrap-1-40 ^rust-bootstrap-1-39 ... ^rust-bootstrap-1-29-mrustc`, but I provide the shorthand variant `mrustc` to make that terser. e.g. `spack install rust-bootstrap +mrustc`.\r\n\r\nCurrently building from mrustc is only supported on x86_64 Linux platforms due to limitations in mrustc. Ideally at some point in the future Spack would support recursive package dependencies and we could remove the duplicate packages for each version in the bootstrapping chain.\r\n\r\n## Provides\r\nThese changes introduce two important virtual packages: `rust-lang` and `rust-compiler`. `rust-lang` is intended to represent the versions of the _language_ that a compiler supports, and `rust-compiler` represents the precise version of the compiler. The distinction is kind of subtle - any given Rust compiler implements the language for any version of the compiler that came before it. For example Rust 1.39 `provides('rust-lang@:1.39')` and `provides('rust-compiler@1.39')`. The intent is that a package can state which version of the language they require without having to remember to get the versioning correct on the precise compiler version.\r\n\r\nIt's possible this distinction isn't that important and we can reduce it to just 'rust-compiler', but it seemed important to me to have there be a distinction.\r\n\r\n## libgit2\r\nIncidental to this work, I expanded the libgit2 package to, most importantly, build the latest release of 0.99, but to also build a lot more versions of the code.\r\n\r\n# Testing\r\nI've tested and verified the following scenarios work:\r\n1) Bootstrapping Rust 1.41 from the latest binary distribution on Snow (LANL CTS-1 system)\r\n2) Bootstrapping Rust 1.41 from mrustc on Snow (barely slipped in under my 8 hour allocation time limit \ud83d\ude2c)\r\n3) Bootstrapping Rust 1.41 from the latest binary distribution on a Power9 system\r\n\r\nI also managed to successfully build Rust from the latest binary distribution on my MacBook Pro, but ran into issues at runtime due to missing `_iconv` routine. This may be an issue with my setup. I don't think it should block merging.\r\n\r\n# Final Thoughts\r\nI think we should get rid of the existing `rust` package if this is merged, but I haven't done that yet since it pretty wildly diverges from how the existing package is implemented. Presumably the `rust-compiler` virtual package would become `rust`.\r\n\r\ncc some people I see have modified the Rust package: @sknigh @matthiasdiener @qwertos @trws ",
    "performed_via_github_app": null
}