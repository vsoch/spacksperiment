{
    "url": "https://api.github.com/repos/spack/spack/issues/13023",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/13023/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/13023/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/13023/events",
    "html_url": "https://github.com/spack/spack/issues/13023",
    "id": 501621100,
    "node_id": "MDU6SXNzdWU1MDE2MjExMDA=",
    "number": 13023,
    "title": "RFC: GoPackage -- support for packaging applications written in Go",
    "user": {
        "login": "hartzell",
        "id": 312978,
        "node_id": "MDQ6VXNlcjMxMjk3OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/312978?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hartzell",
        "html_url": "https://github.com/hartzell",
        "followers_url": "https://api.github.com/users/hartzell/followers",
        "following_url": "https://api.github.com/users/hartzell/following{/other_user}",
        "gists_url": "https://api.github.com/users/hartzell/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hartzell/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hartzell/subscriptions",
        "organizations_url": "https://api.github.com/users/hartzell/orgs",
        "repos_url": "https://api.github.com/users/hartzell/repos",
        "events_url": "https://api.github.com/users/hartzell/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hartzell/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 501899682,
            "node_id": "MDU6TGFiZWw1MDE4OTk2ODI=",
            "url": "https://api.github.com/repos/spack/spack/labels/RFC",
            "name": "RFC",
            "color": "d93f0b",
            "default": false,
            "description": null
        },
        {
            "id": 73908756,
            "node_id": "MDU6TGFiZWw3MzkwODc1Ng==",
            "url": "https://api.github.com/repos/spack/spack/labels/feature",
            "name": "feature",
            "color": "84b6eb",
            "default": false,
            "description": null
        },
        {
            "id": 1591861005,
            "node_id": "MDU6TGFiZWwxNTkxODYxMDA1",
            "url": "https://api.github.com/repos/spack/spack/labels/go",
            "name": "go",
            "color": "69dbf4",
            "default": false,
            "description": ""
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
        "login": "hartzell",
        "id": 312978,
        "node_id": "MDQ6VXNlcjMxMjk3OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/312978?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hartzell",
        "html_url": "https://github.com/hartzell",
        "followers_url": "https://api.github.com/users/hartzell/followers",
        "following_url": "https://api.github.com/users/hartzell/following{/other_user}",
        "gists_url": "https://api.github.com/users/hartzell/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hartzell/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hartzell/subscriptions",
        "organizations_url": "https://api.github.com/users/hartzell/orgs",
        "repos_url": "https://api.github.com/users/hartzell/repos",
        "events_url": "https://api.github.com/users/hartzell/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hartzell/received_events",
        "type": "User",
        "site_admin": false
    },
    "assignees": [
        {
            "login": "hartzell",
            "id": 312978,
            "node_id": "MDQ6VXNlcjMxMjk3OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/312978?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hartzell",
            "html_url": "https://github.com/hartzell",
            "followers_url": "https://api.github.com/users/hartzell/followers",
            "following_url": "https://api.github.com/users/hartzell/following{/other_user}",
            "gists_url": "https://api.github.com/users/hartzell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hartzell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hartzell/subscriptions",
            "organizations_url": "https://api.github.com/users/hartzell/orgs",
            "repos_url": "https://api.github.com/users/hartzell/repos",
            "events_url": "https://api.github.com/users/hartzell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hartzell/received_events",
            "type": "User",
            "site_admin": false
        }
    ],
    "milestone": null,
    "comments": 15,
    "created_at": "2019-10-02T17:20:30Z",
    "updated_at": "2019-12-24T15:09:07Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Edits and updates\r\n\r\n- (advSORRYance) removed hard newlines\r\n- richer prior art section (formatting,  info about Nixpkgs go support)\r\n- better open questions formatting\r\n- added some notes/pointers about how Debian packages Go applications (spoiler: they populate a directory in /usr/share and access it via GOPATH).\r\n- en{biggened,riched} the FreeBSD notes\r\n- looks like Nixpkgs now downloads go dependencies at build time using `go mod download`.\r\n\r\n---\r\n\r\n# Intro\r\n\r\nI'm thinking about putting together support for go-based packages.  Going forward, I believe that most go applications will use [modules] to manage their dependencies so my initial plan is to focus support on applications that either:\r\n\r\n1. use modules *and* vendor their dependencies; or \r\n2. use modules *but do not* vendor their dependencies.\r\n\r\nI plan to provide generic implementations of the basic phases that would be useful to both cases and tooling that would help package authors define and fetch resources in the second case.\r\n\r\nI think that there is not sufficient commonality to the ways that \"pre-modules\" applications manage their dependencies for effective automation.  Such applications still might be able to take advantage of generic build steps.\r\n\r\n## Prior art\r\n\r\nThere seems to be two approaches to this:\r\n\r\n- using `go list -m json` (and variations); and\r\n- running `go mod vendor` and parsing the resulting `vendor/modules.txt` file.\r\n\r\nOther projects include:\r\n\r\n- the FreeBSD ports tree has [nice prior art][freebsd-uses-go] with [nice documentation](https://www.freebsd.org/doc/en_US.ISO8859-1/books/porters-handbook/uses-go.html) for this approach, including a tool ([modules2tuple]) to help port authors manage their dependency declarations.\r\n  See the section of the [FreeBSD Porters Handbook entry][freebsd-porters-go-modules] that encloses their example of \"Creating a Port for a Go Modules Based Application\" for details about FreeBSD ports and Go.\r\n- [Homebrew's go support][homebrew-go] is simpler; as far as I can discover they just provide a helper that unpacks resources into a GOPATH style tree.  \r\n- Ah, for Go applications that use modules, Nixpkgs now grabs the dependencies at build time.  See docs for [buildGoModule](https://nixos.org/nixpkgs/manual/#sec-language-go) and the [PR that introduced it](https://github.com/NixOS/nixpkgs/pull/57080).  That said, these tools still exist:\r\n  - [vgo2nix] automates Nixpkg creation for Go applications that use modules\r\n  - [go2nix] automates Nixpkg creation for pre-{dep,modules} Go applictions\r\n  - the [Nix Golang Demo](nix-golang-demo) project's README includes a summary of how Nix deals with Go and modules, including interesting links.\r\n- Debian....\r\n  - @jessieduffield has [a rep/project](https://github.com/jesseduffield/lazygit-debian) aimed at packaging [lazygit](https://github.com/jesseduffield/lazygit) for debian.  It includes several useful pointers to Go related Debian documentation.\r\n  - While I haven't [yet] found an explicit statement, this comment from [the go-team's docs](https://go-team.pages.debian.net/packaging.html) strongly suggests that they're building in GOPATH mode.\r\n    > All files should be installed into /usr/share/gocode/src/, which corresponds to $GOPATH/src\r\n    \r\n## Open questions\r\n\r\n- How to deal with the volume of resource declarations.  E.g. the current release of Hugo has [nearly 70 top level dependencies][hugo-go.mod], that result in over 300 dependent packages (in the Go sense) that are supplied by 80+ modules/repositories.  If each new release updates its 80+ resources then the hugo package would quickly become hundreds of lines long.  \r\n\r\n  Does Spack (this might just be a naive Python question...) have a mechanism for including other files in the packages directory?  It would be reasonably tidy to use a series of deps-X.Y.Z.py files to record the require resources for the individual releases.\r\n\r\nFeedback?\r\n\r\n[freebsd-porters-go-modules]: https://www.freebsd.org/doc/en_US.ISO8859-1/books/porters-handbook/building.html#go-ex1\r\n[freebsd-uses-go]: https://svnweb.freebsd.org/ports/head/Mk/Uses/go.mk?revision=512187&view=markup\r\n[freebsd-uses-go-docs]: https://www.freebsd.org/doc/en_US.ISO8859-1/books/porters-handbook/uses-go.html\r\n[go2nix]: https://github.com/kamilchm/go2nix\r\n[homebrew-go]: https://github.com/Homebrew/brew/blob/master/Library/Homebrew/language/go.rb\r\n[hugo-go.mod]: https://github.com/gohugoio/hugo/blob/master/go.mod\r\n[modules2tuple]: https://svnweb.freebsd.org/ports/head/ports-mgmt/modules2tuple/\r\n[modules]: https://github.com/golang/go/wiki/Modules\r\n[nix-Golang-demo]: https://github.com/MatrixAI/Golang-Demo\r\n[nixpkgs-go]: https://nixos.org/nixpkgs/manual/#sec-language-go\r\n[vgo2nix]: https://github.com/adisbladis/vgo2nix\r\n",
    "performed_via_github_app": null
}