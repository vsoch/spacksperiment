{
    "url": "https://api.github.com/repos/spack/spack/issues/950",
    "repository_url": "https://api.github.com/repos/spack/spack",
    "labels_url": "https://api.github.com/repos/spack/spack/issues/950/labels{/name}",
    "comments_url": "https://api.github.com/repos/spack/spack/issues/950/comments",
    "events_url": "https://api.github.com/repos/spack/spack/issues/950/events",
    "html_url": "https://github.com/spack/spack/pull/950",
    "id": 154770338,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NzAwMzY0MDI=",
    "number": 950,
    "title": "Enhancement Proposal: Make Python Spack Installs Ignore User Configuration",
    "user": {
        "login": "xjrc",
        "id": 17277866,
        "node_id": "MDQ6VXNlcjE3Mjc3ODY2",
        "avatar_url": "https://avatars.githubusercontent.com/u/17277866?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/xjrc",
        "html_url": "https://github.com/xjrc",
        "followers_url": "https://api.github.com/users/xjrc/followers",
        "following_url": "https://api.github.com/users/xjrc/following{/other_user}",
        "gists_url": "https://api.github.com/users/xjrc/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/xjrc/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/xjrc/subscriptions",
        "organizations_url": "https://api.github.com/users/xjrc/orgs",
        "repos_url": "https://api.github.com/users/xjrc/repos",
        "events_url": "https://api.github.com/users/xjrc/events{/privacy}",
        "received_events_url": "https://api.github.com/users/xjrc/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 23,
    "created_at": "2016-05-13T18:11:48Z",
    "updated_at": "2016-07-22T23:34:34Z",
    "closed_at": "2016-07-22T20:56:19Z",
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
        "url": "https://api.github.com/repos/spack/spack/pulls/950",
        "html_url": "https://github.com/spack/spack/pull/950",
        "diff_url": "https://github.com/spack/spack/pull/950.diff",
        "patch_url": "https://github.com/spack/spack/pull/950.patch"
    },
    "body": "Python's build system provides a lot of room for granular levels of customization through the use and application of [user, system, and distribution configuration files](https://docs.python.org/2/install/index.html#distutils-configuration-files).  While these files are very useful for customizing Python builds, they tend to negatively impact Spack's installation processes for Python and Python extensions by adding unwanted configuration options (which can alter the destinations of Spack's installs).  In order to allow Spack installations of Python libraries to coexist with these files, a solution must be implemented that allows Spack's install scripts to ignore these configuration files and all external install scripts that use Spack's Python to acknowledge them.\n\nI've outlined a few potential solutions to this problem below:\n- **Add `--no-user-cfg` to Each Python Extension's Install Command**: This solution will require changing the most files, but will necessitate zero additional changes to Spack's infrastructure or the Python package.  This solution is potentially undesirable because it requires authors for Python extension packages to acknowledge and properly account for the the fact that user configuration needs to be ignored.\n- **Add `python_setup` Function to Python Extensions**: This solution involves adding new function to Python extension modules that sets up extension files while ignoring user configurations (i.e. something that invokes `python setup.py --no-user-cfg [setup-instruction] [arguments]`).  This solution avoids the majority of the acknowledgement problems of the previous solution (authors will still have to remember to call `python_setup` instead of `python('setup.py', 'install')`), but still requires that all the Python extension install scripts be updated.\n- **Pre-Install `setup.cfg` into Each Python Extension's Install Directory**: This solution involves taking advantage of [Python's hierarchy of configuration files](https://docs.python.org/2/install/index.html#location-and-names-of-config-files) to override user and system options.  No Python extension packages need to be modified in this solution, but the Python package will need to install a file into each extension package's install directory (probably similar to the `Package.setup_dependent_package` function but occurring after the staging process for the dependent begins).  Additionally, due to a bug in Python's configuration capture functionality, this method will require a nontrivial patch to be applied to the Python `distutils` source code (which is probably not portable to versions of Python outside of 2.7).\n\nIf anyone has any thoughts about the methods that I've outlined or has any alternative solutions (especially frequent users of the Python package like @alalazo, @citibeth, @glennpj, @tgamblin), please let me know!  Given that each solution will require some fairly significant changes to Spack's Python packages, I'd like some input before I start writing anything major.  Thanks!\n",
    "performed_via_github_app": null
}